
fat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa4  08006fa4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fac  08006fac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fac  08006fac  00016fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f80  20000078  0800702c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ff8  0800702c  00022ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f56  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ee7  00000000  00000000  00035ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  00038ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  0003a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e7c  00000000  00000000  0003b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e3c3  00000000  00000000  0005f22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d457a  00000000  00000000  0006d5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141b69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b4  00000000  00000000  00141be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e50 	.word	0x08006e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006e50 	.word	0x08006e50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f002 fca6 	bl	8002ed2 <HAL_UART_Transmit>

  return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20012ed8 	.word	0x20012ed8

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fd21 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f83f 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  	MX_GPIO_Init();
 80005a2:	f000 f8fb 	bl	800079c <MX_GPIO_Init>
  	MX_SPI1_Init();
 80005a6:	f000 f899 	bl	80006dc <MX_SPI1_Init>
  	MX_UART4_Init();
 80005aa:	f000 f8cd 	bl	8000748 <MX_UART4_Init>
  	initMEMS();
 80005ae:	f000 f99f 	bl	80008f0 <initMEMS>
  /* USER CODE BEGIN 2 */




	xSemaphore = xSemaphoreCreateBinary();
 80005b2:	2203      	movs	r2, #3
 80005b4:	2100      	movs	r1, #0
 80005b6:	2001      	movs	r0, #1
 80005b8:	f003 fbdc 	bl	8003d74 <xQueueGenericCreate>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <main+0x70>)
 80005c0:	601a      	str	r2, [r3, #0]
//	xTaskCreate(Task1,"task1",130,NULL,1,NULL);
//	xTaskCreate(Task2,"task2",130,NULL,2,NULL);
//	xTaskCreate(Task2,"task1",128,NULL,1,NULL);
	xTaskCreate(Task3,"task3",130,NULL,2,NULL);
 80005c2:	2300      	movs	r3, #0
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2282      	movs	r2, #130	; 0x82
 80005ce:	490e      	ldr	r1, [pc, #56]	; (8000608 <main+0x74>)
 80005d0:	480e      	ldr	r0, [pc, #56]	; (800060c <main+0x78>)
 80005d2:	f004 f941 	bl	8004858 <xTaskCreate>
	xTaskCreate(Task4,"task4_gg",130,NULL,1,NULL);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2282      	movs	r2, #130	; 0x82
 80005e2:	490b      	ldr	r1, [pc, #44]	; (8000610 <main+0x7c>)
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <main+0x80>)
 80005e6:	f004 f937 	bl	8004858 <xTaskCreate>
	xTaskCreate(Task5,"task5_kk",130,NULL,1,NULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2282      	movs	r2, #130	; 0x82
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <main+0x84>)
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <main+0x88>)
 80005fa:	f004 f92d 	bl	8004858 <xTaskCreate>
//	gg=xQueueCreate(1,1);
	vTaskStartScheduler();
 80005fe:	f004 fa9d 	bl	8004b3c <vTaskStartScheduler>
	/* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x6e>
 8000604:	20012ed4 	.word	0x20012ed4
 8000608:	08006e68 	.word	0x08006e68
 800060c:	08000899 	.word	0x08000899
 8000610:	08006e70 	.word	0x08006e70
 8000614:	080008b1 	.word	0x080008b1
 8000618:	08006e7c 	.word	0x08006e7c
 800061c:	080008d1 	.word	0x080008d1

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fd0b 	bl	800604a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xb4>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xb4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <SystemClock_Config+0xb8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <SystemClock_Config+0xb8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <SystemClock_Config+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 ffd1 	bl	8001638 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800069c:	f000 fa80 	bl	8000ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fa2c 	bl	8001b18 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c6:	f000 fa6b 	bl	8000ba0 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_SPI1_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ec:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_SPI1_Init+0x64>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_SPI1_Init+0x64>)
 800072e:	f001 fbf1 	bl	8001f14 <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 fa32 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20012f18 	.word	0x20012f18
 8000744:	40013000 	.word	0x40013000

08000748 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_UART4_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_UART4_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_UART4_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_UART4_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_UART4_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_UART4_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_UART4_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_UART4_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_UART4_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_UART4_Init+0x4c>)
 8000780:	f002 fb5a 	bl	8002e38 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 fa09 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20012ed8 	.word	0x20012ed8
 8000798:	40004c00 	.word	0x40004c00

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b34      	ldr	r3, [pc, #208]	; (8000888 <MX_GPIO_Init+0xec>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a33      	ldr	r2, [pc, #204]	; (8000888 <MX_GPIO_Init+0xec>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <MX_GPIO_Init+0xec>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0xec>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <MX_GPIO_Init+0xec>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_GPIO_Init+0xec>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0xec>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <MX_GPIO_Init+0xec>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_GPIO_Init+0xec>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	4820      	ldr	r0, [pc, #128]	; (800088c <MX_GPIO_Init+0xf0>)
 800080c:	f000 fec8 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <MX_GPIO_Init+0xf4>)
 8000818:	f000 fec2 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800081c:	2308      	movs	r3, #8
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_GPIO_Init+0xf0>)
 8000834:	f000 fd1a 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000838:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800083c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <MX_GPIO_Init+0xf4>)
 8000852:	f000 fd0b 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000856:	2301      	movs	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_GPIO_Init+0xf8>)
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <MX_GPIO_Init+0xf0>)
 800086a:	f000 fcff 	bl	800126c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	210a      	movs	r1, #10
 8000872:	2006      	movs	r0, #6
 8000874:	f000 fcd0 	bl	8001218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000878:	2006      	movs	r0, #6
 800087a:	f000 fce9 	bl	8001250 <HAL_NVIC_EnableIRQ>

}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40021000 	.word	0x40021000
 8000890:	40020c00 	.word	0x40020c00
 8000894:	10110000 	.word	0x10110000

08000898 <Task3>:
	}


}

void Task3( void *pvParameters ){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	for(;;){
//		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);

//		uint8_t a[3]="hh";
//		printf("test %d\n\r",1);
		showTask();
 80008a0:	f003 ff66 	bl	8004770 <showTask>
//		HAL_UART_Transmit(&huart4, a, sizeof(a), 0xffff);
		vTaskDelay(3500);
 80008a4:	f640 50ac 	movw	r0, #3500	; 0xdac
 80008a8:	f004 f914 	bl	8004ad4 <vTaskDelay>
		showTask();
 80008ac:	e7f8      	b.n	80008a0 <Task3+0x8>
	...

080008b0 <Task4>:


}


void Task4( void *pvParameters ){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	for(;;){
//		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <Task4+0x1c>)
 80008be:	f000 fe88 	bl	80015d2 <HAL_GPIO_TogglePin>
//		uint8_t a[3]="hh";
//		printf("test %d\n\r",1);
//		showTask();
//		HAL_UART_Transmit(&huart4, a, sizeof(a), 0xffff);
//		vTaskDelay(1000);
		HAL_Delay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f000 fbcd 	bl	8001064 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 80008ca:	e7f5      	b.n	80008b8 <Task4+0x8>
 80008cc:	40020c00 	.word	0x40020c00

080008d0 <Task5>:
	}


}

void Task5( void *pvParameters ){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <Task5+0x1c>)
 80008de:	f000 fe78 	bl	80015d2 <HAL_GPIO_TogglePin>
//		uint8_t a[3]="hh";
//		printf("test %d\n\r",1);
//		showTask();
//		HAL_UART_Transmit(&huart4, a, sizeof(a), 0xffff);
//		vTaskDelay(2000);
		HAL_Delay(2000);
 80008e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e6:	f000 fbbd 	bl	8001064 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80008ea:	e7f5      	b.n	80008d8 <Task5+0x8>
 80008ec:	40020c00 	.word	0x40020c00

080008f0 <initMEMS>:
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 2);
  return ch;
}


void initMEMS(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
	uint8_t data[1];
	  	uint8_t ads[1];

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	4876      	ldr	r0, [pc, #472]	; (8000ad4 <initMEMS+0x1e4>)
 80008fc:	f000 fe50 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG1_ADDR;
 8000900:	2321      	movs	r3, #33	; 0x21
 8000902:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000904:	1d39      	adds	r1, r7, #4
 8000906:	230a      	movs	r3, #10
 8000908:	2201      	movs	r2, #1
 800090a:	4873      	ldr	r0, [pc, #460]	; (8000ad8 <initMEMS+0x1e8>)
 800090c:	f001 fb66 	bl	8001fdc <HAL_SPI_Transmit>
		ads[0]=0x01;
 8000910:	2301      	movs	r3, #1
 8000912:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000914:	4639      	mov	r1, r7
 8000916:	230a      	movs	r3, #10
 8000918:	2201      	movs	r2, #1
 800091a:	486f      	ldr	r0, [pc, #444]	; (8000ad8 <initMEMS+0x1e8>)
 800091c:	f001 fb5e 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2108      	movs	r1, #8
 8000924:	486b      	ldr	r0, [pc, #428]	; (8000ad4 <initMEMS+0x1e4>)
 8000926:	f000 fe3b 	bl	80015a0 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2108      	movs	r1, #8
 800092e:	4869      	ldr	r0, [pc, #420]	; (8000ad4 <initMEMS+0x1e4>)
 8000930:	f000 fe36 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG3_ADDR;
 8000934:	2323      	movs	r3, #35	; 0x23
 8000936:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000938:	1d39      	adds	r1, r7, #4
 800093a:	230a      	movs	r3, #10
 800093c:	2201      	movs	r2, #1
 800093e:	4866      	ldr	r0, [pc, #408]	; (8000ad8 <initMEMS+0x1e8>)
 8000940:	f001 fb4c 	bl	8001fdc <HAL_SPI_Transmit>
		ads[0]=0x48;
 8000944:	2348      	movs	r3, #72	; 0x48
 8000946:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000948:	4639      	mov	r1, r7
 800094a:	230a      	movs	r3, #10
 800094c:	2201      	movs	r2, #1
 800094e:	4862      	ldr	r0, [pc, #392]	; (8000ad8 <initMEMS+0x1e8>)
 8000950:	f001 fb44 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2108      	movs	r1, #8
 8000958:	485e      	ldr	r0, [pc, #376]	; (8000ad4 <initMEMS+0x1e4>)
 800095a:	f000 fe21 	bl	80015a0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	485c      	ldr	r0, [pc, #368]	; (8000ad4 <initMEMS+0x1e4>)
 8000964:	f000 fe1c 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG4_ADDR;
 8000968:	2320      	movs	r3, #32
 800096a:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 800096c:	1d39      	adds	r1, r7, #4
 800096e:	230a      	movs	r3, #10
 8000970:	2201      	movs	r2, #1
 8000972:	4859      	ldr	r0, [pc, #356]	; (8000ad8 <initMEMS+0x1e8>)
 8000974:	f001 fb32 	bl	8001fdc <HAL_SPI_Transmit>
		ads[0]=0x67;
 8000978:	2367      	movs	r3, #103	; 0x67
 800097a:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 800097c:	4639      	mov	r1, r7
 800097e:	230a      	movs	r3, #10
 8000980:	2201      	movs	r2, #1
 8000982:	4855      	ldr	r0, [pc, #340]	; (8000ad8 <initMEMS+0x1e8>)
 8000984:	f001 fb2a 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2108      	movs	r1, #8
 800098c:	4851      	ldr	r0, [pc, #324]	; (8000ad4 <initMEMS+0x1e4>)
 800098e:	f000 fe07 	bl	80015a0 <HAL_GPIO_WritePin>
	//	HAL_SPI_Transmit(&hspi1,data,1,10);
	//	data[0]=0x00;
	//	HAL_SPI_Transmit(&hspi1,data,1,10);
	//	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2108      	movs	r1, #8
 8000996:	484f      	ldr	r0, [pc, #316]	; (8000ad4 <initMEMS+0x1e4>)
 8000998:	f000 fe02 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_THRS1_1_ADDR;
 800099c:	2357      	movs	r3, #87	; 0x57
 800099e:	713b      	strb	r3, [r7, #4]
		ads[0]=0x55;
 80009a0:	2355      	movs	r3, #85	; 0x55
 80009a2:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 80009a4:	1d39      	adds	r1, r7, #4
 80009a6:	230a      	movs	r3, #10
 80009a8:	2201      	movs	r2, #1
 80009aa:	484b      	ldr	r0, [pc, #300]	; (8000ad8 <initMEMS+0x1e8>)
 80009ac:	f001 fb16 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 80009b0:	4639      	mov	r1, r7
 80009b2:	230a      	movs	r3, #10
 80009b4:	2201      	movs	r2, #1
 80009b6:	4848      	ldr	r0, [pc, #288]	; (8000ad8 <initMEMS+0x1e8>)
 80009b8:	f001 fb10 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2108      	movs	r1, #8
 80009c0:	4844      	ldr	r0, [pc, #272]	; (8000ad4 <initMEMS+0x1e4>)
 80009c2:	f000 fded 	bl	80015a0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2108      	movs	r1, #8
 80009ca:	4842      	ldr	r0, [pc, #264]	; (8000ad4 <initMEMS+0x1e4>)
 80009cc:	f000 fde8 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_ST1_1_ADDR;
 80009d0:	2340      	movs	r3, #64	; 0x40
 80009d2:	713b      	strb	r3, [r7, #4]
		ads[0]=0x05;
 80009d4:	2305      	movs	r3, #5
 80009d6:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 80009d8:	1d39      	adds	r1, r7, #4
 80009da:	230a      	movs	r3, #10
 80009dc:	2201      	movs	r2, #1
 80009de:	483e      	ldr	r0, [pc, #248]	; (8000ad8 <initMEMS+0x1e8>)
 80009e0:	f001 fafc 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 80009e4:	4639      	mov	r1, r7
 80009e6:	230a      	movs	r3, #10
 80009e8:	2201      	movs	r2, #1
 80009ea:	483b      	ldr	r0, [pc, #236]	; (8000ad8 <initMEMS+0x1e8>)
 80009ec:	f001 faf6 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2108      	movs	r1, #8
 80009f4:	4837      	ldr	r0, [pc, #220]	; (8000ad4 <initMEMS+0x1e4>)
 80009f6:	f000 fdd3 	bl	80015a0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	4835      	ldr	r0, [pc, #212]	; (8000ad4 <initMEMS+0x1e4>)
 8000a00:	f000 fdce 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_ST1_2_ADDR;
 8000a04:	2341      	movs	r3, #65	; 0x41
 8000a06:	713b      	strb	r3, [r7, #4]
		ads[0]=0x11;
 8000a08:	2311      	movs	r3, #17
 8000a0a:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a0c:	1d39      	adds	r1, r7, #4
 8000a0e:	230a      	movs	r3, #10
 8000a10:	2201      	movs	r2, #1
 8000a12:	4831      	ldr	r0, [pc, #196]	; (8000ad8 <initMEMS+0x1e8>)
 8000a14:	f001 fae2 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a18:	4639      	mov	r1, r7
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	482e      	ldr	r0, [pc, #184]	; (8000ad8 <initMEMS+0x1e8>)
 8000a20:	f001 fadc 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2108      	movs	r1, #8
 8000a28:	482a      	ldr	r0, [pc, #168]	; (8000ad4 <initMEMS+0x1e4>)
 8000a2a:	f000 fdb9 	bl	80015a0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2108      	movs	r1, #8
 8000a32:	4828      	ldr	r0, [pc, #160]	; (8000ad4 <initMEMS+0x1e4>)
 8000a34:	f000 fdb4 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_MASK1_B_ADDR;
 8000a38:	2359      	movs	r3, #89	; 0x59
 8000a3a:	713b      	strb	r3, [r7, #4]
		ads[0]=0xFC;
 8000a3c:	23fc      	movs	r3, #252	; 0xfc
 8000a3e:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a40:	1d39      	adds	r1, r7, #4
 8000a42:	230a      	movs	r3, #10
 8000a44:	2201      	movs	r2, #1
 8000a46:	4824      	ldr	r0, [pc, #144]	; (8000ad8 <initMEMS+0x1e8>)
 8000a48:	f001 fac8 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a4c:	4639      	mov	r1, r7
 8000a4e:	230a      	movs	r3, #10
 8000a50:	2201      	movs	r2, #1
 8000a52:	4821      	ldr	r0, [pc, #132]	; (8000ad8 <initMEMS+0x1e8>)
 8000a54:	f001 fac2 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	481d      	ldr	r0, [pc, #116]	; (8000ad4 <initMEMS+0x1e4>)
 8000a5e:	f000 fd9f 	bl	80015a0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <initMEMS+0x1e4>)
 8000a68:	f000 fd9a 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_MASK1_A_ADDR;
 8000a6c:	235a      	movs	r3, #90	; 0x5a
 8000a6e:	713b      	strb	r3, [r7, #4]
		ads[0]=0xFC;
 8000a70:	23fc      	movs	r3, #252	; 0xfc
 8000a72:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a74:	1d39      	adds	r1, r7, #4
 8000a76:	230a      	movs	r3, #10
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <initMEMS+0x1e8>)
 8000a7c:	f001 faae 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a80:	4639      	mov	r1, r7
 8000a82:	230a      	movs	r3, #10
 8000a84:	2201      	movs	r2, #1
 8000a86:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <initMEMS+0x1e8>)
 8000a88:	f001 faa8 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2108      	movs	r1, #8
 8000a90:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <initMEMS+0x1e4>)
 8000a92:	f000 fd85 	bl	80015a0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2108      	movs	r1, #8
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <initMEMS+0x1e4>)
 8000a9c:	f000 fd80 	bl	80015a0 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_SETT1_ADDR;
 8000aa0:	235b      	movs	r3, #91	; 0x5b
 8000aa2:	713b      	strb	r3, [r7, #4]
		ads[0]=0x01;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	230a      	movs	r3, #10
 8000aac:	2201      	movs	r2, #1
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <initMEMS+0x1e8>)
 8000ab0:	f001 fa94 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000ab4:	4639      	mov	r1, r7
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <initMEMS+0x1e8>)
 8000abc:	f001 fa8e 	bl	8001fdc <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <initMEMS+0x1e4>)
 8000ac6:	f000 fd6b 	bl	80015a0 <HAL_GPIO_WritePin>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	20012f18 	.word	0x20012f18

08000adc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	 if(GPIO_Pin == GPIO_PIN_0)
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d137      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0x80>
	 {
		 xHigherPriorityTaskWoken = pdFALSE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
		 if(flag==pdTRUE){
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x88>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d107      	bne.n	8000b08 <HAL_GPIO_EXTI_Callback+0x2c>
			 xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fb55 	bl	80041b2 <xQueueGiveFromISR>
		 }else{
			 //do nothing
		 }

		 HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0c:	4817      	ldr	r0, [pc, #92]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x90>)
 8000b0e:	f000 fd60 	bl	80015d2 <HAL_GPIO_TogglePin>
		 uint8_t data_1=0x5f|0x80;
 8000b12:	23df      	movs	r3, #223	; 0xdf
 8000b14:	72fb      	strb	r3, [r7, #11]
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4815      	ldr	r0, [pc, #84]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b1c:	f000 fd40 	bl	80015a0 <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi1,&data_1,1,10);
 8000b20:	f107 010b 	add.w	r1, r7, #11
 8000b24:	230a      	movs	r3, #10
 8000b26:	2201      	movs	r2, #1
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x98>)
 8000b2a:	f001 fa57 	bl	8001fdc <HAL_SPI_Transmit>
		  ////	HAL_Delay(10);
		 HAL_SPI_Receive(&hspi1,&data_1,1,10);
 8000b2e:	f107 010b 	add.w	r1, r7, #11
 8000b32:	230a      	movs	r3, #10
 8000b34:	2201      	movs	r2, #1
 8000b36:	480f      	ldr	r0, [pc, #60]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x98>)
 8000b38:	f001 fb84 	bl	8002244 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2108      	movs	r1, #8
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b42:	f000 fd2d 	bl	80015a0 <HAL_GPIO_WritePin>
		 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d007      	beq.n	8000b5c <HAL_GPIO_EXTI_Callback+0x80>
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	f3bf 8f6f 	isb	sy
	 }


}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20012ed4 	.word	0x20012ed4
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40021000 	.word	0x40021000
 8000b74:	20012f18 	.word	0x20012f18
 8000b78:	e000ed04 	.word	0xe000ed04

08000b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8e:	f000 fa49 	bl	8001024 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40001000 	.word	0x40001000

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <Error_Handler+0x6>

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_SPI_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c52:	23e0      	movs	r3, #224	; 0xe0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_SPI_MspInit+0x8c>)
 8000c6e:	f000 fafd 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40013000 	.word	0x40013000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_UART_MspInit+0x84>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12b      	bne.n	8000d02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_UART_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_UART_MspInit+0x88>)
 8000cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_UART_MspInit+0x88>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_UART_MspInit+0x88>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_UART_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_UART_MspInit+0x8c>)
 8000cfe:	f000 fab5 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40004c00 	.word	0x40004c00
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	2036      	movs	r0, #54	; 0x36
 8000d2e:	f000 fa73 	bl	8001218 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d32:	2036      	movs	r0, #54	; 0x36
 8000d34:	f000 fa8c 	bl	8001250 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <HAL_InitTick+0xa0>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <HAL_InitTick+0xa0>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_InitTick+0xa0>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d54:	f107 0210 	add.w	r2, r7, #16
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 f8a6 	bl	8001eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d64:	f001 f87c 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 8000d68:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <HAL_InitTick+0xa4>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	0c9b      	lsrs	r3, r3, #18
 8000d74:	3b01      	subs	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <HAL_InitTick+0xac>)
 8000d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000d9a:	f001 fe0f 	bl	80029bc <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d104      	bne.n	8000dae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000da4:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <HAL_InitTick+0xa8>)
 8000da6:	f001 fe3e 	bl	8002a26 <HAL_TIM_Base_Start_IT>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3730      	adds	r7, #48	; 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	431bde83 	.word	0x431bde83
 8000dc0:	20012f70 	.word	0x20012f70
 8000dc4:	40001000 	.word	0x40001000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 fc05 	bl	8001608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM6_DAC_IRQHandler+0x10>)
 8000e0a:	f001 fe30 	bl	8002a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20012f70 	.word	0x20012f70

08000e18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e00a      	b.n	8000e40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e2a:	f3af 8000 	nop.w
 8000e2e:	4601      	mov	r1, r0
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	b2ca      	uxtb	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf0      	blt.n	8000e2a <_read+0x12>
	}

return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e009      	b.n	8000e78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fb7f 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf1      	blt.n	8000e64 <_write+0x12>
	}
	return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_close>:

int _close(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	return -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_isatty>:

int _isatty(int file)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
	return 1;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f005 f85c 	bl	8005fe0 <__errno>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20020000 	.word	0x20020000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	20000094 	.word	0x20000094
 8000f5c:	20012ff8 	.word	0x20012ff8

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <SystemInit+0x28>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <SystemInit+0x28>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SystemInit+0x28>)
 8000f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f92:	e003      	b.n	8000f9c <LoopCopyDataInit>

08000f94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f9a:	3104      	adds	r1, #4

08000f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fa4:	d3f6      	bcc.n	8000f94 <CopyDataInit>
  ldr  r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fa8:	e002      	b.n	8000fb0 <LoopFillZerobss>

08000faa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000faa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fac:	f842 3b04 	str.w	r3, [r2], #4

08000fb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fb4:	d3f9      	bcc.n	8000faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fb6:	f7ff ffd3 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f005 f817 	bl	8005fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fae9 	bl	8000594 <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fc8:	08006fb4 	.word	0x08006fb4
  ldr  r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fd0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000fd4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000fd8:	20012ff8 	.word	0x20012ff8

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_Init+0x40>)
 8000fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_Init+0x40>)
 8000ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x40>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f8fa 	bl	8001202 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fe82 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fdc8 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023c00 	.word	0x40023c00

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2000000c 	.word	0x2000000c
 8001048:	20012fb0 	.word	0x20012fb0

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20012fb0 	.word	0x20012fb0

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_Delay+0x40>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff4c 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122a:	f7ff ff61 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 800122e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	6978      	ldr	r0, [r7, #20]
 8001236:	f7ff ffb1 	bl	800119c <NVIC_EncodePriority>
 800123a:	4602      	mov	r2, r0
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff80 	bl	8001148 <__NVIC_SetPriority>
}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff54 	bl	800110c <__NVIC_EnableIRQ>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e16b      	b.n	8001560 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 815a 	bne.w	800155a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d00b      	beq.n	80012c6 <HAL_GPIO_Init+0x5a>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ba:	2b11      	cmp	r3, #17
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d130      	bne.n	8001328 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 0201 	and.w	r2, r3, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0xfc>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80b4 	beq.w	800155a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b5f      	ldr	r3, [pc, #380]	; (8001574 <HAL_GPIO_Init+0x308>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a5e      	ldr	r2, [pc, #376]	; (8001574 <HAL_GPIO_Init+0x308>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <HAL_GPIO_Init+0x308>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a5a      	ldr	r2, [pc, #360]	; (8001578 <HAL_GPIO_Init+0x30c>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a51      	ldr	r2, [pc, #324]	; (800157c <HAL_GPIO_Init+0x310>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02b      	beq.n	8001492 <HAL_GPIO_Init+0x226>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a50      	ldr	r2, [pc, #320]	; (8001580 <HAL_GPIO_Init+0x314>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d025      	beq.n	800148e <HAL_GPIO_Init+0x222>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4f      	ldr	r2, [pc, #316]	; (8001584 <HAL_GPIO_Init+0x318>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01f      	beq.n	800148a <HAL_GPIO_Init+0x21e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_GPIO_Init+0x31c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_GPIO_Init+0x320>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x324>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_GPIO_Init+0x328>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x20e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_GPIO_Init+0x32c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x20a>
 8001472:	2307      	movs	r3, #7
 8001474:	e00e      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001476:	2308      	movs	r3, #8
 8001478:	e00c      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147a:	2306      	movs	r3, #6
 800147c:	e00a      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147e:	2305      	movs	r3, #5
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001482:	2304      	movs	r3, #4
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001492:	2300      	movs	r3, #0
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a4:	4934      	ldr	r1, [pc, #208]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_GPIO_Init+0x330>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d6:	4a31      	ldr	r2, [pc, #196]	; (800159c <HAL_GPIO_Init+0x330>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_GPIO_Init+0x330>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001500:	4a26      	ldr	r2, [pc, #152]	; (800159c <HAL_GPIO_Init+0x330>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_GPIO_Init+0x330>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_GPIO_Init+0x330>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_GPIO_Init+0x330>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <HAL_GPIO_Init+0x330>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	f67f ae90 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001568:	bf00      	nop
 800156a:	3724      	adds	r7, #36	; 0x24
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40021400 	.word	0x40021400
 8001594:	40021800 	.word	0x40021800
 8001598:	40021c00 	.word	0x40021c00
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	401a      	ands	r2, r3
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d104      	bne.n	80015f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fa58 	bl	8000adc <HAL_GPIO_EXTI_Callback>
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40013c00 	.word	0x40013c00

08001638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e25b      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d075      	beq.n	8001742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001656:	4ba3      	ldr	r3, [pc, #652]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b04      	cmp	r3, #4
 8001660:	d00c      	beq.n	800167c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001662:	4ba0      	ldr	r3, [pc, #640]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800166a:	2b08      	cmp	r3, #8
 800166c:	d112      	bne.n	8001694 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800167a:	d10b      	bne.n	8001694 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4b99      	ldr	r3, [pc, #612]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d05b      	beq.n	8001740 <HAL_RCC_OscConfig+0x108>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d157      	bne.n	8001740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e236      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d106      	bne.n	80016ac <HAL_RCC_OscConfig+0x74>
 800169e:	4b91      	ldr	r3, [pc, #580]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a90      	ldr	r2, [pc, #576]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e01d      	b.n	80016e8 <HAL_RCC_OscConfig+0xb0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x98>
 80016b6:	4b8b      	ldr	r3, [pc, #556]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a8a      	ldr	r2, [pc, #552]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0xb0>
 80016d0:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a83      	ldr	r2, [pc, #524]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a80      	ldr	r2, [pc, #512]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fcac 	bl	800104c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fca8 	bl	800104c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1fb      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0xc0>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fc98 	bl	800104c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fc94 	bl	800104c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e1e7      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0xe8>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d063      	beq.n	8001816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175a:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001762:	2b08      	cmp	r3, #8
 8001764:	d11c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d116      	bne.n	80017a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x152>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d001      	beq.n	800178a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e1bb      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4952      	ldr	r1, [pc, #328]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	e03a      	b.n	8001816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a8:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <HAL_RCC_OscConfig+0x2b0>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff fc4d 	bl	800104c <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b6:	f7ff fc49 	bl	800104c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e19c      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4940      	ldr	r1, [pc, #256]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_OscConfig+0x2b0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc2c 	bl	800104c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff fc28 	bl	800104c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e17b      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d030      	beq.n	8001884 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_RCC_OscConfig+0x2b4>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff fc0c 	bl	800104c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fc08 	bl	800104c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e15b      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x200>
 8001856:	e015      	b.n	8001884 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x2b4>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff fbf5 	bl	800104c <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001866:	f7ff fbf1 	bl	800104c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e144      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80a0 	beq.w	80019d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x2b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d121      	bne.n	8001912 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_RCC_OscConfig+0x2b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_RCC_OscConfig+0x2b8>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff fbb7 	bl	800104c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e011      	b.n	8001906 <HAL_RCC_OscConfig+0x2ce>
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	42470000 	.word	0x42470000
 80018ec:	42470e80 	.word	0x42470e80
 80018f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7ff fbaa 	bl	800104c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e0fd      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001906:	4b81      	ldr	r3, [pc, #516]	; (8001b0c <HAL_RCC_OscConfig+0x4d4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x2f0>
 800191a:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a7c      	ldr	r2, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	e01c      	b.n	8001962 <HAL_RCC_OscConfig+0x32a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b05      	cmp	r3, #5
 800192e:	d10c      	bne.n	800194a <HAL_RCC_OscConfig+0x312>
 8001930:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a76      	ldr	r2, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a73      	ldr	r2, [pc, #460]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	e00b      	b.n	8001962 <HAL_RCC_OscConfig+0x32a>
 800194a:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	4a70      	ldr	r2, [pc, #448]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6713      	str	r3, [r2, #112]	; 0x70
 8001956:	4b6e      	ldr	r3, [pc, #440]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	4a6d      	ldr	r2, [pc, #436]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d015      	beq.n	8001996 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff fb6f 	bl	800104c <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff fb6b 	bl	800104c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e0bc      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ee      	beq.n	8001972 <HAL_RCC_OscConfig+0x33a>
 8001994:	e014      	b.n	80019c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff fb59 	bl	800104c <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fb55 	bl	800104c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0a6      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ee      	bne.n	800199e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d105      	bne.n	80019d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c6:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8092 	beq.w	8001b00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d05c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d141      	bne.n	8001a74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <HAL_RCC_OscConfig+0x4dc>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fb29 	bl	800104c <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff fb25 	bl	800104c <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e078      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69da      	ldr	r2, [r3, #28]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	019b      	lsls	r3, r3, #6
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	061b      	lsls	r3, r3, #24
 8001a40:	4933      	ldr	r1, [pc, #204]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <HAL_RCC_OscConfig+0x4dc>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fafe 	bl	800104c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fafa 	bl	800104c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e04d      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x41c>
 8001a72:	e045      	b.n	8001b00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a74:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_RCC_OscConfig+0x4dc>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fae7 	bl	800104c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff fae3 	bl	800104c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e036      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x44a>
 8001aa0:	e02e      	b.n	8001b00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e029      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_RCC_OscConfig+0x4d8>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11c      	bne.n	8001afc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d115      	bne.n	8001afc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d10d      	bne.n	8001afc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d106      	bne.n	8001afc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	42470060 	.word	0x42470060

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0cc      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d90c      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0b8      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	494d      	ldr	r1, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d044      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d119      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e07f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d003      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e067      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff fa20 	bl	800104c <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff fa1c 	bl	800104c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e04f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1eb      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d20c      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e032      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4916      	ldr	r1, [pc, #88]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9e:	f000 f821 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f82a 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08006ef4 	.word	0x08006ef4
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfa:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d007      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x32>
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d008      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x38>
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 808d 	bne.w	8001e2a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b4b      	ldr	r3, [pc, #300]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d12:	60bb      	str	r3, [r7, #8]
       break;
 8001d14:	e08c      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d16:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d18:	60bb      	str	r3, [r7, #8]
      break;
 8001d1a:	e089      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d26:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d023      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	f04f 0400 	mov.w	r4, #0
 8001d3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	ea03 0501 	and.w	r5, r3, r1
 8001d48:	ea04 0602 	and.w	r6, r4, r2
 8001d4c:	4a3d      	ldr	r2, [pc, #244]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d4e:	fb02 f106 	mul.w	r1, r2, r6
 8001d52:	2200      	movs	r2, #0
 8001d54:	fb02 f205 	mul.w	r2, r2, r5
 8001d58:	440a      	add	r2, r1
 8001d5a:	493a      	ldr	r1, [pc, #232]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d5c:	fba5 0101 	umull	r0, r1, r5, r1
 8001d60:	1853      	adds	r3, r2, r1
 8001d62:	4619      	mov	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f04f 0400 	mov.w	r4, #0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4623      	mov	r3, r4
 8001d6e:	f7fe fa7f 	bl	8000270 <__aeabi_uldivmod>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e049      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	f04f 0400 	mov.w	r4, #0
 8001d84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	ea03 0501 	and.w	r5, r3, r1
 8001d90:	ea04 0602 	and.w	r6, r4, r2
 8001d94:	4629      	mov	r1, r5
 8001d96:	4632      	mov	r2, r6
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	f04f 0400 	mov.w	r4, #0
 8001da0:	0154      	lsls	r4, r2, #5
 8001da2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001da6:	014b      	lsls	r3, r1, #5
 8001da8:	4619      	mov	r1, r3
 8001daa:	4622      	mov	r2, r4
 8001dac:	1b49      	subs	r1, r1, r5
 8001dae:	eb62 0206 	sbc.w	r2, r2, r6
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	f04f 0400 	mov.w	r4, #0
 8001dba:	0194      	lsls	r4, r2, #6
 8001dbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dc0:	018b      	lsls	r3, r1, #6
 8001dc2:	1a5b      	subs	r3, r3, r1
 8001dc4:	eb64 0402 	sbc.w	r4, r4, r2
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	00e2      	lsls	r2, r4, #3
 8001dd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dd6:	00d9      	lsls	r1, r3, #3
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4614      	mov	r4, r2
 8001ddc:	195b      	adds	r3, r3, r5
 8001dde:	eb44 0406 	adc.w	r4, r4, r6
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	02a2      	lsls	r2, r4, #10
 8001dec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001df0:	0299      	lsls	r1, r3, #10
 8001df2:	460b      	mov	r3, r1
 8001df4:	4614      	mov	r4, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	4621      	mov	r1, r4
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f04f 0400 	mov.w	r4, #0
 8001e00:	461a      	mov	r2, r3
 8001e02:	4623      	mov	r3, r4
 8001e04:	f7fe fa34 	bl	8000270 <__aeabi_uldivmod>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	60bb      	str	r3, [r7, #8]
      break;
 8001e28:	e002      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e2c:	60bb      	str	r3, [r7, #8]
      break;
 8001e2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e30:	68bb      	ldr	r3, [r7, #8]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	017d7840 	.word	0x017d7840

08001e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e64:	f7ff fff0 	bl	8001e48 <HAL_RCC_GetHCLKFreq>
 8001e68:	4601      	mov	r1, r0
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0a9b      	lsrs	r3, r3, #10
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	08006f04 	.word	0x08006f04

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e8c:	f7ff ffdc 	bl	8001e48 <HAL_RCC_GetHCLKFreq>
 8001e90:	4601      	mov	r1, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0b5b      	lsrs	r3, r3, #13
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	08006f04 	.word	0x08006f04

08001eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_RCC_GetClockConfig+0x5c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_RCC_GetClockConfig+0x60>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 020f 	and.w	r2, r3, #15
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e056      	b.n	8001fd4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7fe fe59 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	ea42 0103 	orr.w	r1, r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	f003 0104 	and.w	r1, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_SPI_Transmit+0x22>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e11e      	b.n	800223c <HAL_SPI_Transmit+0x260>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002006:	f7ff f821 	bl	800104c <HAL_GetTick>
 800200a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d002      	beq.n	8002022 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800201c:	2302      	movs	r3, #2
 800201e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002020:	e103      	b.n	800222a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_SPI_Transmit+0x52>
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002032:	e0fa      	b.n	800222a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2203      	movs	r2, #3
 8002038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207a:	d107      	bne.n	800208c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800208a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d007      	beq.n	80020aa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020b2:	d14b      	bne.n	800214c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_SPI_Transmit+0xe6>
 80020bc:	8afb      	ldrh	r3, [r7, #22]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d13e      	bne.n	8002140 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	881a      	ldrh	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	1c9a      	adds	r2, r3, #2
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020e6:	e02b      	b.n	8002140 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d112      	bne.n	800211c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	86da      	strh	r2, [r3, #54]	; 0x36
 800211a:	e011      	b.n	8002140 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800211c:	f7fe ff96 	bl	800104c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d803      	bhi.n	8002134 <HAL_SPI_Transmit+0x158>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002132:	d102      	bne.n	800213a <HAL_SPI_Transmit+0x15e>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800213e:	e074      	b.n	800222a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ce      	bne.n	80020e8 <HAL_SPI_Transmit+0x10c>
 800214a:	e04c      	b.n	80021e6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_SPI_Transmit+0x17e>
 8002154:	8afb      	ldrh	r3, [r7, #22]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d140      	bne.n	80021dc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	330c      	adds	r3, #12
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002180:	e02c      	b.n	80021dc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d113      	bne.n	80021b8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	7812      	ldrb	r2, [r2, #0]
 800219c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80021b6:	e011      	b.n	80021dc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021b8:	f7fe ff48 	bl	800104c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d803      	bhi.n	80021d0 <HAL_SPI_Transmit+0x1f4>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ce:	d102      	bne.n	80021d6 <HAL_SPI_Transmit+0x1fa>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021da:	e026      	b.n	800222a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1cd      	bne.n	8002182 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fba4 	bl	8002938 <SPI_EndRxTxTransaction>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	77fb      	strb	r3, [r7, #31]
 8002226:	e000      	b.n	800222a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002228:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800223a:	7ffb      	ldrb	r3, [r7, #31]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002260:	d112      	bne.n	8002288 <HAL_SPI_Receive+0x44>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2204      	movs	r2, #4
 800226e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f8e9 	bl	8002456 <HAL_SPI_TransmitReceive>
 8002284:	4603      	mov	r3, r0
 8002286:	e0e2      	b.n	800244e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_SPI_Receive+0x52>
 8002292:	2302      	movs	r3, #2
 8002294:	e0db      	b.n	800244e <HAL_SPI_Receive+0x20a>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800229e:	f7fe fed5 	bl	800104c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d002      	beq.n	80022b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
 80022b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022b4:	e0c2      	b.n	800243c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_SPI_Receive+0x7e>
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022c6:	e0b9      	b.n	800243c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2204      	movs	r2, #4
 80022cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	88fa      	ldrh	r2, [r7, #6]
 80022e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	88fa      	ldrh	r2, [r7, #6]
 80022e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230e:	d107      	bne.n	8002320 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d007      	beq.n	800233e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d162      	bne.n	800240c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002346:	e02e      	b.n	80023a6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d115      	bne.n	8002382 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f103 020c 	add.w	r2, r3, #12
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002380:	e011      	b.n	80023a6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002382:	f7fe fe63 	bl	800104c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d803      	bhi.n	800239a <HAL_SPI_Receive+0x156>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002398:	d102      	bne.n	80023a0 <HAL_SPI_Receive+0x15c>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023a4:	e04a      	b.n	800243c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1cb      	bne.n	8002348 <HAL_SPI_Receive+0x104>
 80023b0:	e031      	b.n	8002416 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d113      	bne.n	80023e8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	b292      	uxth	r2, r2
 80023cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	1c9a      	adds	r2, r3, #2
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023e6:	e011      	b.n	800240c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e8:	f7fe fe30 	bl	800104c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d803      	bhi.n	8002400 <HAL_SPI_Receive+0x1bc>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023fe:	d102      	bne.n	8002406 <HAL_SPI_Receive+0x1c2>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	75fb      	strb	r3, [r7, #23]
          goto error;
 800240a:	e017      	b.n	800243c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1cd      	bne.n	80023b2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa27 	bl	800286e <SPI_EndRxTransaction>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	75fb      	strb	r3, [r7, #23]
 8002438:	e000      	b.n	800243c <HAL_SPI_Receive+0x1f8>
  }

error :
 800243a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800244c:	7dfb      	ldrb	r3, [r7, #23]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b08c      	sub	sp, #48	; 0x30
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002464:	2301      	movs	r3, #1
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_SPI_TransmitReceive+0x26>
 8002478:	2302      	movs	r3, #2
 800247a:	e18a      	b.n	8002792 <HAL_SPI_TransmitReceive+0x33c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002484:	f7fe fde2 	bl	800104c <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800249a:	887b      	ldrh	r3, [r7, #2]
 800249c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800249e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d00f      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x70>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ac:	d107      	bne.n	80024be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <HAL_SPI_TransmitReceive+0x68>
 80024b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d003      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024c4:	e15b      	b.n	800277e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_SPI_TransmitReceive+0x82>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_TransmitReceive+0x82>
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024de:	e14e      	b.n	800277e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d003      	beq.n	80024f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2205      	movs	r2, #5
 80024f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	887a      	ldrh	r2, [r7, #2]
 800250a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	887a      	ldrh	r2, [r7, #2]
 8002516:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d007      	beq.n	8002548 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002550:	d178      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_SPI_TransmitReceive+0x10a>
 800255a:	8b7b      	ldrh	r3, [r7, #26]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d166      	bne.n	800262e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	1c9a      	adds	r2, r3, #2
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002584:	e053      	b.n	800262e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	d11b      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x176>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x176>
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d113      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d119      	bne.n	800260e <HAL_SPI_TransmitReceive+0x1b8>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d014      	beq.n	800260e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	b292      	uxth	r2, r2
 80025f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	1c9a      	adds	r2, r3, #2
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800260a:	2301      	movs	r3, #1
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800260e:	f7fe fd1d 	bl	800104c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800261a:	429a      	cmp	r2, r3
 800261c:	d807      	bhi.n	800262e <HAL_SPI_TransmitReceive+0x1d8>
 800261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002624:	d003      	beq.n	800262e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800262c:	e0a7      	b.n	800277e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1a6      	bne.n	8002586 <HAL_SPI_TransmitReceive+0x130>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1a1      	bne.n	8002586 <HAL_SPI_TransmitReceive+0x130>
 8002642:	e07c      	b.n	800273e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_SPI_TransmitReceive+0x1fc>
 800264c:	8b7b      	ldrh	r3, [r7, #26]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d16b      	bne.n	800272a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002678:	e057      	b.n	800272a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b02      	cmp	r3, #2
 8002686:	d11c      	bne.n	80026c2 <HAL_SPI_TransmitReceive+0x26c>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d017      	beq.n	80026c2 <HAL_SPI_TransmitReceive+0x26c>
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d114      	bne.n	80026c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	330c      	adds	r3, #12
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d119      	bne.n	8002704 <HAL_SPI_TransmitReceive+0x2ae>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d014      	beq.n	8002704 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002700:	2301      	movs	r3, #1
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002704:	f7fe fca2 	bl	800104c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002710:	429a      	cmp	r2, r3
 8002712:	d803      	bhi.n	800271c <HAL_SPI_TransmitReceive+0x2c6>
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271a:	d102      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x2cc>
 800271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002728:	e029      	b.n	800277e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1a2      	bne.n	800267a <HAL_SPI_TransmitReceive+0x224>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d19d      	bne.n	800267a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f8f8 	bl	8002938 <SPI_EndRxTxTransaction>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800275a:	e010      	b.n	800277e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	e000      	b.n	800277e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800277c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800278e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002792:	4618      	mov	r0, r3
 8002794:	3730      	adds	r7, #48	; 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027aa:	e04c      	b.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b2:	d048      	beq.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80027b4:	f7fe fc4a 	bl	800104c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d902      	bls.n	80027ca <SPI_WaitFlagStateUntilTimeout+0x30>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d13d      	bne.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e2:	d111      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ec:	d004      	beq.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d107      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002810:	d10f      	bne.n	8002832 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e00f      	b.n	8002866 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	429a      	cmp	r2, r3
 8002862:	d1a3      	bne.n	80027ac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af02      	add	r7, sp, #8
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002882:	d111      	bne.n	80028a8 <SPI_EndRxTransaction+0x3a>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288c:	d004      	beq.n	8002898 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d107      	bne.n	80028a8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b0:	d12a      	bne.n	8002908 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ba:	d012      	beq.n	80028e2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff ff67 	bl	800279a <SPI_WaitFlagStateUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d02d      	beq.n	800292e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f043 0220 	orr.w	r2, r3, #32
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e026      	b.n	8002930 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	2101      	movs	r1, #1
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff ff54 	bl	800279a <SPI_WaitFlagStateUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01a      	beq.n	800292e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e013      	b.n	8002930 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	2101      	movs	r1, #1
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff ff41 	bl	800279a <SPI_WaitFlagStateUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e000      	b.n	8002930 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <SPI_EndRxTxTransaction+0x7c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <SPI_EndRxTxTransaction+0x80>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0d5b      	lsrs	r3, r3, #21
 8002950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002962:	d112      	bne.n	800298a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2200      	movs	r2, #0
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff ff13 	bl	800279a <SPI_WaitFlagStateUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e00f      	b.n	80029aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3b01      	subs	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d0f2      	beq.n	800298a <SPI_EndRxTxTransaction+0x52>
 80029a4:	e000      	b.n	80029a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80029a6:	bf00      	nop
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000004 	.word	0x20000004
 80029b8:	165e9f81 	.word	0x165e9f81

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e01d      	b.n	8002a0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f815 	bl	8002a12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 f968 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d007      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d122      	bne.n	8002aca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d11b      	bne.n	8002aca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f06f 0202 	mvn.w	r2, #2
 8002a9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8ee 	bl	8002c92 <HAL_TIM_IC_CaptureCallback>
 8002ab6:	e005      	b.n	8002ac4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f8e0 	bl	8002c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8f1 	bl	8002ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d122      	bne.n	8002b1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d11b      	bne.n	8002b1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0204 	mvn.w	r2, #4
 8002aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8c4 	bl	8002c92 <HAL_TIM_IC_CaptureCallback>
 8002b0a:	e005      	b.n	8002b18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f8b6 	bl	8002c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8c7 	bl	8002ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d122      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d11b      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0208 	mvn.w	r2, #8
 8002b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f89a 	bl	8002c92 <HAL_TIM_IC_CaptureCallback>
 8002b5e:	e005      	b.n	8002b6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f88c 	bl	8002c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f89d 	bl	8002ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d122      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d11b      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0210 	mvn.w	r2, #16
 8002b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f870 	bl	8002c92 <HAL_TIM_IC_CaptureCallback>
 8002bb2:	e005      	b.n	8002bc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f862 	bl	8002c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f873 	bl	8002ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f06f 0201 	mvn.w	r2, #1
 8002bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fd ffc5 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d10e      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b80      	cmp	r3, #128	; 0x80
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f903 	bl	8002e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d10e      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f838 	bl	8002cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d10e      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d107      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0220 	mvn.w	r2, #32
 8002c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f8cd 	bl	8002e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a40      	ldr	r2, [pc, #256]	; (8002de4 <TIM_Base_SetConfig+0x114>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cee:	d00f      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3d      	ldr	r2, [pc, #244]	; (8002de8 <TIM_Base_SetConfig+0x118>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a3c      	ldr	r2, [pc, #240]	; (8002dec <TIM_Base_SetConfig+0x11c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <TIM_Base_SetConfig+0x120>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x40>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3a      	ldr	r2, [pc, #232]	; (8002df4 <TIM_Base_SetConfig+0x124>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <TIM_Base_SetConfig+0x114>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d027      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <TIM_Base_SetConfig+0x118>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d023      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <TIM_Base_SetConfig+0x11c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <TIM_Base_SetConfig+0x120>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <TIM_Base_SetConfig+0x124>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d017      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <TIM_Base_SetConfig+0x128>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <TIM_Base_SetConfig+0x12c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00f      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <TIM_Base_SetConfig+0x130>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <TIM_Base_SetConfig+0x134>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <TIM_Base_SetConfig+0x138>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d003      	beq.n	8002d82 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <TIM_Base_SetConfig+0x13c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d108      	bne.n	8002d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <TIM_Base_SetConfig+0x114>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_Base_SetConfig+0xf8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <TIM_Base_SetConfig+0x124>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d103      	bne.n	8002dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	615a      	str	r2, [r3, #20]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40000c00 	.word	0x40000c00
 8002df4:	40010400 	.word	0x40010400
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40014400 	.word	0x40014400
 8002e00:	40014800 	.word	0x40014800
 8002e04:	40001800 	.word	0x40001800
 8002e08:	40001c00 	.word	0x40001c00
 8002e0c:	40002000 	.word	0x40002000

08002e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e03f      	b.n	8002eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd ff12 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f90b 	bl	8003098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	af02      	add	r7, sp, #8
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	f040 8083 	bne.w	8002ffa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_UART_Transmit+0x2e>
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e07b      	b.n	8002ffc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Transmit+0x40>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e074      	b.n	8002ffc <HAL_UART_Transmit+0x12a>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2221      	movs	r2, #33	; 0x21
 8002f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f28:	f7fe f890 	bl	800104c <HAL_GetTick>
 8002f2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f42:	e042      	b.n	8002fca <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d122      	bne.n	8002fa2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f84c 	bl	8003004 <UART_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e042      	b.n	8002ffc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f88:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3302      	adds	r3, #2
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	e017      	b.n	8002fca <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	e013      	b.n	8002fca <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f829 	bl	8003004 <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e01f      	b.n	8002ffc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	60ba      	str	r2, [r7, #8]
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1b7      	bne.n	8002f44 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2140      	movs	r1, #64	; 0x40
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f810 	bl	8003004 <UART_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e006      	b.n	8002ffc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003014:	e02c      	b.n	8003070 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800301c:	d028      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <UART_WaitOnFlagUntilTimeout+0x30>
 8003024:	f7fe f812 	bl	800104c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	429a      	cmp	r2, r3
 8003032:	d21d      	bcs.n	8003070 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003042:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e00f      	b.n	8003090 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	429a      	cmp	r2, r3
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	429a      	cmp	r2, r3
 800308c:	d0c3      	beq.n	8003016 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030da:	f023 030c 	bic.w	r3, r3, #12
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	68f9      	ldr	r1, [r7, #12]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003106:	f040 818b 	bne.w	8003420 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4ac1      	ldr	r2, [pc, #772]	; (8003414 <UART_SetConfig+0x37c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d005      	beq.n	8003120 <UART_SetConfig+0x88>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4abf      	ldr	r2, [pc, #764]	; (8003418 <UART_SetConfig+0x380>)
 800311a:	4293      	cmp	r3, r2
 800311c:	f040 80bd 	bne.w	800329a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003120:	f7fe feb2 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8003124:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	461d      	mov	r5, r3
 800312a:	f04f 0600 	mov.w	r6, #0
 800312e:	46a8      	mov	r8, r5
 8003130:	46b1      	mov	r9, r6
 8003132:	eb18 0308 	adds.w	r3, r8, r8
 8003136:	eb49 0409 	adc.w	r4, r9, r9
 800313a:	4698      	mov	r8, r3
 800313c:	46a1      	mov	r9, r4
 800313e:	eb18 0805 	adds.w	r8, r8, r5
 8003142:	eb49 0906 	adc.w	r9, r9, r6
 8003146:	f04f 0100 	mov.w	r1, #0
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003152:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003156:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800315a:	4688      	mov	r8, r1
 800315c:	4691      	mov	r9, r2
 800315e:	eb18 0005 	adds.w	r0, r8, r5
 8003162:	eb49 0106 	adc.w	r1, r9, r6
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	461d      	mov	r5, r3
 800316c:	f04f 0600 	mov.w	r6, #0
 8003170:	196b      	adds	r3, r5, r5
 8003172:	eb46 0406 	adc.w	r4, r6, r6
 8003176:	461a      	mov	r2, r3
 8003178:	4623      	mov	r3, r4
 800317a:	f7fd f879 	bl	8000270 <__aeabi_uldivmod>
 800317e:	4603      	mov	r3, r0
 8003180:	460c      	mov	r4, r1
 8003182:	461a      	mov	r2, r3
 8003184:	4ba5      	ldr	r3, [pc, #660]	; (800341c <UART_SetConfig+0x384>)
 8003186:	fba3 2302 	umull	r2, r3, r3, r2
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	461d      	mov	r5, r3
 8003194:	f04f 0600 	mov.w	r6, #0
 8003198:	46a9      	mov	r9, r5
 800319a:	46b2      	mov	sl, r6
 800319c:	eb19 0309 	adds.w	r3, r9, r9
 80031a0:	eb4a 040a 	adc.w	r4, sl, sl
 80031a4:	4699      	mov	r9, r3
 80031a6:	46a2      	mov	sl, r4
 80031a8:	eb19 0905 	adds.w	r9, r9, r5
 80031ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031c4:	4689      	mov	r9, r1
 80031c6:	4692      	mov	sl, r2
 80031c8:	eb19 0005 	adds.w	r0, r9, r5
 80031cc:	eb4a 0106 	adc.w	r1, sl, r6
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	461d      	mov	r5, r3
 80031d6:	f04f 0600 	mov.w	r6, #0
 80031da:	196b      	adds	r3, r5, r5
 80031dc:	eb46 0406 	adc.w	r4, r6, r6
 80031e0:	461a      	mov	r2, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	f7fd f844 	bl	8000270 <__aeabi_uldivmod>
 80031e8:	4603      	mov	r3, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b8b      	ldr	r3, [pc, #556]	; (800341c <UART_SetConfig+0x384>)
 80031f0:	fba3 1302 	umull	r1, r3, r3, r2
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	2164      	movs	r1, #100	; 0x64
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	3332      	adds	r3, #50	; 0x32
 8003202:	4a86      	ldr	r2, [pc, #536]	; (800341c <UART_SetConfig+0x384>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003210:	4498      	add	r8, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	461d      	mov	r5, r3
 8003216:	f04f 0600 	mov.w	r6, #0
 800321a:	46a9      	mov	r9, r5
 800321c:	46b2      	mov	sl, r6
 800321e:	eb19 0309 	adds.w	r3, r9, r9
 8003222:	eb4a 040a 	adc.w	r4, sl, sl
 8003226:	4699      	mov	r9, r3
 8003228:	46a2      	mov	sl, r4
 800322a:	eb19 0905 	adds.w	r9, r9, r5
 800322e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800323e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003246:	4689      	mov	r9, r1
 8003248:	4692      	mov	sl, r2
 800324a:	eb19 0005 	adds.w	r0, r9, r5
 800324e:	eb4a 0106 	adc.w	r1, sl, r6
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	461d      	mov	r5, r3
 8003258:	f04f 0600 	mov.w	r6, #0
 800325c:	196b      	adds	r3, r5, r5
 800325e:	eb46 0406 	adc.w	r4, r6, r6
 8003262:	461a      	mov	r2, r3
 8003264:	4623      	mov	r3, r4
 8003266:	f7fd f803 	bl	8000270 <__aeabi_uldivmod>
 800326a:	4603      	mov	r3, r0
 800326c:	460c      	mov	r4, r1
 800326e:	461a      	mov	r2, r3
 8003270:	4b6a      	ldr	r3, [pc, #424]	; (800341c <UART_SetConfig+0x384>)
 8003272:	fba3 1302 	umull	r1, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2164      	movs	r1, #100	; 0x64
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	3332      	adds	r3, #50	; 0x32
 8003284:	4a65      	ldr	r2, [pc, #404]	; (800341c <UART_SetConfig+0x384>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	f003 0207 	and.w	r2, r3, #7
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4442      	add	r2, r8
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	e26f      	b.n	800377a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800329a:	f7fe fde1 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 800329e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	461d      	mov	r5, r3
 80032a4:	f04f 0600 	mov.w	r6, #0
 80032a8:	46a8      	mov	r8, r5
 80032aa:	46b1      	mov	r9, r6
 80032ac:	eb18 0308 	adds.w	r3, r8, r8
 80032b0:	eb49 0409 	adc.w	r4, r9, r9
 80032b4:	4698      	mov	r8, r3
 80032b6:	46a1      	mov	r9, r4
 80032b8:	eb18 0805 	adds.w	r8, r8, r5
 80032bc:	eb49 0906 	adc.w	r9, r9, r6
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032d4:	4688      	mov	r8, r1
 80032d6:	4691      	mov	r9, r2
 80032d8:	eb18 0005 	adds.w	r0, r8, r5
 80032dc:	eb49 0106 	adc.w	r1, r9, r6
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	461d      	mov	r5, r3
 80032e6:	f04f 0600 	mov.w	r6, #0
 80032ea:	196b      	adds	r3, r5, r5
 80032ec:	eb46 0406 	adc.w	r4, r6, r6
 80032f0:	461a      	mov	r2, r3
 80032f2:	4623      	mov	r3, r4
 80032f4:	f7fc ffbc 	bl	8000270 <__aeabi_uldivmod>
 80032f8:	4603      	mov	r3, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <UART_SetConfig+0x384>)
 8003300:	fba3 2302 	umull	r2, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	461d      	mov	r5, r3
 800330e:	f04f 0600 	mov.w	r6, #0
 8003312:	46a9      	mov	r9, r5
 8003314:	46b2      	mov	sl, r6
 8003316:	eb19 0309 	adds.w	r3, r9, r9
 800331a:	eb4a 040a 	adc.w	r4, sl, sl
 800331e:	4699      	mov	r9, r3
 8003320:	46a2      	mov	sl, r4
 8003322:	eb19 0905 	adds.w	r9, r9, r5
 8003326:	eb4a 0a06 	adc.w	sl, sl, r6
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800333a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800333e:	4689      	mov	r9, r1
 8003340:	4692      	mov	sl, r2
 8003342:	eb19 0005 	adds.w	r0, r9, r5
 8003346:	eb4a 0106 	adc.w	r1, sl, r6
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	461d      	mov	r5, r3
 8003350:	f04f 0600 	mov.w	r6, #0
 8003354:	196b      	adds	r3, r5, r5
 8003356:	eb46 0406 	adc.w	r4, r6, r6
 800335a:	461a      	mov	r2, r3
 800335c:	4623      	mov	r3, r4
 800335e:	f7fc ff87 	bl	8000270 <__aeabi_uldivmod>
 8003362:	4603      	mov	r3, r0
 8003364:	460c      	mov	r4, r1
 8003366:	461a      	mov	r2, r3
 8003368:	4b2c      	ldr	r3, [pc, #176]	; (800341c <UART_SetConfig+0x384>)
 800336a:	fba3 1302 	umull	r1, r3, r3, r2
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2164      	movs	r1, #100	; 0x64
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	3332      	adds	r3, #50	; 0x32
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <UART_SetConfig+0x384>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800338a:	4498      	add	r8, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	461d      	mov	r5, r3
 8003390:	f04f 0600 	mov.w	r6, #0
 8003394:	46a9      	mov	r9, r5
 8003396:	46b2      	mov	sl, r6
 8003398:	eb19 0309 	adds.w	r3, r9, r9
 800339c:	eb4a 040a 	adc.w	r4, sl, sl
 80033a0:	4699      	mov	r9, r3
 80033a2:	46a2      	mov	sl, r4
 80033a4:	eb19 0905 	adds.w	r9, r9, r5
 80033a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033c0:	4689      	mov	r9, r1
 80033c2:	4692      	mov	sl, r2
 80033c4:	eb19 0005 	adds.w	r0, r9, r5
 80033c8:	eb4a 0106 	adc.w	r1, sl, r6
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	461d      	mov	r5, r3
 80033d2:	f04f 0600 	mov.w	r6, #0
 80033d6:	196b      	adds	r3, r5, r5
 80033d8:	eb46 0406 	adc.w	r4, r6, r6
 80033dc:	461a      	mov	r2, r3
 80033de:	4623      	mov	r3, r4
 80033e0:	f7fc ff46 	bl	8000270 <__aeabi_uldivmod>
 80033e4:	4603      	mov	r3, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <UART_SetConfig+0x384>)
 80033ec:	fba3 1302 	umull	r1, r3, r3, r2
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	2164      	movs	r1, #100	; 0x64
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	3332      	adds	r3, #50	; 0x32
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <UART_SetConfig+0x384>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	f003 0207 	and.w	r2, r3, #7
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4442      	add	r2, r8
 8003410:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003412:	e1b2      	b.n	800377a <UART_SetConfig+0x6e2>
 8003414:	40011000 	.word	0x40011000
 8003418:	40011400 	.word	0x40011400
 800341c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4ad7      	ldr	r2, [pc, #860]	; (8003784 <UART_SetConfig+0x6ec>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d005      	beq.n	8003436 <UART_SetConfig+0x39e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4ad6      	ldr	r2, [pc, #856]	; (8003788 <UART_SetConfig+0x6f0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	f040 80d1 	bne.w	80035d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003436:	f7fe fd27 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 800343a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	469a      	mov	sl, r3
 8003440:	f04f 0b00 	mov.w	fp, #0
 8003444:	46d0      	mov	r8, sl
 8003446:	46d9      	mov	r9, fp
 8003448:	eb18 0308 	adds.w	r3, r8, r8
 800344c:	eb49 0409 	adc.w	r4, r9, r9
 8003450:	4698      	mov	r8, r3
 8003452:	46a1      	mov	r9, r4
 8003454:	eb18 080a 	adds.w	r8, r8, sl
 8003458:	eb49 090b 	adc.w	r9, r9, fp
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003468:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800346c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003470:	4688      	mov	r8, r1
 8003472:	4691      	mov	r9, r2
 8003474:	eb1a 0508 	adds.w	r5, sl, r8
 8003478:	eb4b 0609 	adc.w	r6, fp, r9
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4619      	mov	r1, r3
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	f04f 0400 	mov.w	r4, #0
 800348e:	0094      	lsls	r4, r2, #2
 8003490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003494:	008b      	lsls	r3, r1, #2
 8003496:	461a      	mov	r2, r3
 8003498:	4623      	mov	r3, r4
 800349a:	4628      	mov	r0, r5
 800349c:	4631      	mov	r1, r6
 800349e:	f7fc fee7 	bl	8000270 <__aeabi_uldivmod>
 80034a2:	4603      	mov	r3, r0
 80034a4:	460c      	mov	r4, r1
 80034a6:	461a      	mov	r2, r3
 80034a8:	4bb8      	ldr	r3, [pc, #736]	; (800378c <UART_SetConfig+0x6f4>)
 80034aa:	fba3 2302 	umull	r2, r3, r3, r2
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	469b      	mov	fp, r3
 80034b8:	f04f 0c00 	mov.w	ip, #0
 80034bc:	46d9      	mov	r9, fp
 80034be:	46e2      	mov	sl, ip
 80034c0:	eb19 0309 	adds.w	r3, r9, r9
 80034c4:	eb4a 040a 	adc.w	r4, sl, sl
 80034c8:	4699      	mov	r9, r3
 80034ca:	46a2      	mov	sl, r4
 80034cc:	eb19 090b 	adds.w	r9, r9, fp
 80034d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e8:	4689      	mov	r9, r1
 80034ea:	4692      	mov	sl, r2
 80034ec:	eb1b 0509 	adds.w	r5, fp, r9
 80034f0:	eb4c 060a 	adc.w	r6, ip, sl
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	f04f 0400 	mov.w	r4, #0
 8003506:	0094      	lsls	r4, r2, #2
 8003508:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800350c:	008b      	lsls	r3, r1, #2
 800350e:	461a      	mov	r2, r3
 8003510:	4623      	mov	r3, r4
 8003512:	4628      	mov	r0, r5
 8003514:	4631      	mov	r1, r6
 8003516:	f7fc feab 	bl	8000270 <__aeabi_uldivmod>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	461a      	mov	r2, r3
 8003520:	4b9a      	ldr	r3, [pc, #616]	; (800378c <UART_SetConfig+0x6f4>)
 8003522:	fba3 1302 	umull	r1, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2164      	movs	r1, #100	; 0x64
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	3332      	adds	r3, #50	; 0x32
 8003534:	4a95      	ldr	r2, [pc, #596]	; (800378c <UART_SetConfig+0x6f4>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003540:	4498      	add	r8, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	469b      	mov	fp, r3
 8003546:	f04f 0c00 	mov.w	ip, #0
 800354a:	46d9      	mov	r9, fp
 800354c:	46e2      	mov	sl, ip
 800354e:	eb19 0309 	adds.w	r3, r9, r9
 8003552:	eb4a 040a 	adc.w	r4, sl, sl
 8003556:	4699      	mov	r9, r3
 8003558:	46a2      	mov	sl, r4
 800355a:	eb19 090b 	adds.w	r9, r9, fp
 800355e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003562:	f04f 0100 	mov.w	r1, #0
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003572:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003576:	4689      	mov	r9, r1
 8003578:	4692      	mov	sl, r2
 800357a:	eb1b 0509 	adds.w	r5, fp, r9
 800357e:	eb4c 060a 	adc.w	r6, ip, sl
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4619      	mov	r1, r3
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	f04f 0400 	mov.w	r4, #0
 8003594:	0094      	lsls	r4, r2, #2
 8003596:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800359a:	008b      	lsls	r3, r1, #2
 800359c:	461a      	mov	r2, r3
 800359e:	4623      	mov	r3, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	4631      	mov	r1, r6
 80035a4:	f7fc fe64 	bl	8000270 <__aeabi_uldivmod>
 80035a8:	4603      	mov	r3, r0
 80035aa:	460c      	mov	r4, r1
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b77      	ldr	r3, [pc, #476]	; (800378c <UART_SetConfig+0x6f4>)
 80035b0:	fba3 1302 	umull	r1, r3, r3, r2
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	2164      	movs	r1, #100	; 0x64
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	3332      	adds	r3, #50	; 0x32
 80035c2:	4a72      	ldr	r2, [pc, #456]	; (800378c <UART_SetConfig+0x6f4>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	f003 020f 	and.w	r2, r3, #15
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4442      	add	r2, r8
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	e0d0      	b.n	800377a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7fe fc42 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 80035dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	469a      	mov	sl, r3
 80035e2:	f04f 0b00 	mov.w	fp, #0
 80035e6:	46d0      	mov	r8, sl
 80035e8:	46d9      	mov	r9, fp
 80035ea:	eb18 0308 	adds.w	r3, r8, r8
 80035ee:	eb49 0409 	adc.w	r4, r9, r9
 80035f2:	4698      	mov	r8, r3
 80035f4:	46a1      	mov	r9, r4
 80035f6:	eb18 080a 	adds.w	r8, r8, sl
 80035fa:	eb49 090b 	adc.w	r9, r9, fp
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800360a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800360e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003612:	4688      	mov	r8, r1
 8003614:	4691      	mov	r9, r2
 8003616:	eb1a 0508 	adds.w	r5, sl, r8
 800361a:	eb4b 0609 	adc.w	r6, fp, r9
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4619      	mov	r1, r3
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	0094      	lsls	r4, r2, #2
 8003632:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003636:	008b      	lsls	r3, r1, #2
 8003638:	461a      	mov	r2, r3
 800363a:	4623      	mov	r3, r4
 800363c:	4628      	mov	r0, r5
 800363e:	4631      	mov	r1, r6
 8003640:	f7fc fe16 	bl	8000270 <__aeabi_uldivmod>
 8003644:	4603      	mov	r3, r0
 8003646:	460c      	mov	r4, r1
 8003648:	461a      	mov	r2, r3
 800364a:	4b50      	ldr	r3, [pc, #320]	; (800378c <UART_SetConfig+0x6f4>)
 800364c:	fba3 2302 	umull	r2, r3, r3, r2
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	469b      	mov	fp, r3
 800365a:	f04f 0c00 	mov.w	ip, #0
 800365e:	46d9      	mov	r9, fp
 8003660:	46e2      	mov	sl, ip
 8003662:	eb19 0309 	adds.w	r3, r9, r9
 8003666:	eb4a 040a 	adc.w	r4, sl, sl
 800366a:	4699      	mov	r9, r3
 800366c:	46a2      	mov	sl, r4
 800366e:	eb19 090b 	adds.w	r9, r9, fp
 8003672:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003682:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003686:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800368a:	4689      	mov	r9, r1
 800368c:	4692      	mov	sl, r2
 800368e:	eb1b 0509 	adds.w	r5, fp, r9
 8003692:	eb4c 060a 	adc.w	r6, ip, sl
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4619      	mov	r1, r3
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	f04f 0400 	mov.w	r4, #0
 80036a8:	0094      	lsls	r4, r2, #2
 80036aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036ae:	008b      	lsls	r3, r1, #2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4623      	mov	r3, r4
 80036b4:	4628      	mov	r0, r5
 80036b6:	4631      	mov	r1, r6
 80036b8:	f7fc fdda 	bl	8000270 <__aeabi_uldivmod>
 80036bc:	4603      	mov	r3, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b32      	ldr	r3, [pc, #200]	; (800378c <UART_SetConfig+0x6f4>)
 80036c4:	fba3 1302 	umull	r1, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	3332      	adds	r3, #50	; 0x32
 80036d6:	4a2d      	ldr	r2, [pc, #180]	; (800378c <UART_SetConfig+0x6f4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e2:	4498      	add	r8, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	469b      	mov	fp, r3
 80036e8:	f04f 0c00 	mov.w	ip, #0
 80036ec:	46d9      	mov	r9, fp
 80036ee:	46e2      	mov	sl, ip
 80036f0:	eb19 0309 	adds.w	r3, r9, r9
 80036f4:	eb4a 040a 	adc.w	r4, sl, sl
 80036f8:	4699      	mov	r9, r3
 80036fa:	46a2      	mov	sl, r4
 80036fc:	eb19 090b 	adds.w	r9, r9, fp
 8003700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003718:	4689      	mov	r9, r1
 800371a:	4692      	mov	sl, r2
 800371c:	eb1b 0509 	adds.w	r5, fp, r9
 8003720:	eb4c 060a 	adc.w	r6, ip, sl
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4619      	mov	r1, r3
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	f04f 0400 	mov.w	r4, #0
 8003736:	0094      	lsls	r4, r2, #2
 8003738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800373c:	008b      	lsls	r3, r1, #2
 800373e:	461a      	mov	r2, r3
 8003740:	4623      	mov	r3, r4
 8003742:	4628      	mov	r0, r5
 8003744:	4631      	mov	r1, r6
 8003746:	f7fc fd93 	bl	8000270 <__aeabi_uldivmod>
 800374a:	4603      	mov	r3, r0
 800374c:	460c      	mov	r4, r1
 800374e:	461a      	mov	r2, r3
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <UART_SetConfig+0x6f4>)
 8003752:	fba3 1302 	umull	r1, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2164      	movs	r1, #100	; 0x64
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	3332      	adds	r3, #50	; 0x32
 8003764:	4a09      	ldr	r2, [pc, #36]	; (800378c <UART_SetConfig+0x6f4>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4442      	add	r2, r8
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	e7ff      	b.n	800377a <UART_SetConfig+0x6e2>
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003784:	40011000 	.word	0x40011000
 8003788:	40011400 	.word	0x40011400
 800378c:	51eb851f 	.word	0x51eb851f

08003790 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800379c:	f001 fa1a 	bl	8004bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80037a0:	4b57      	ldr	r3, [pc, #348]	; (8003900 <pvPortMalloc+0x170>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80037a8:	f000 f90c 	bl	80039c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037ac:	4b55      	ldr	r3, [pc, #340]	; (8003904 <pvPortMalloc+0x174>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 808c 	bne.w	80038d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01c      	beq.n	80037fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80037c0:	2208      	movs	r2, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d013      	beq.n	80037fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	3308      	adds	r3, #8
 80037da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e7fe      	b.n	80037f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d068      	beq.n	80038d2 <pvPortMalloc+0x142>
 8003800:	4b41      	ldr	r3, [pc, #260]	; (8003908 <pvPortMalloc+0x178>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	d863      	bhi.n	80038d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800380a:	4b40      	ldr	r3, [pc, #256]	; (800390c <pvPortMalloc+0x17c>)
 800380c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800380e:	4b3f      	ldr	r3, [pc, #252]	; (800390c <pvPortMalloc+0x17c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003814:	e004      	b.n	8003820 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d903      	bls.n	8003832 <pvPortMalloc+0xa2>
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f1      	bne.n	8003816 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003832:	4b33      	ldr	r3, [pc, #204]	; (8003900 <pvPortMalloc+0x170>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003838:	429a      	cmp	r2, r3
 800383a:	d04a      	beq.n	80038d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2208      	movs	r2, #8
 8003842:	4413      	add	r3, r2
 8003844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	2308      	movs	r3, #8
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	429a      	cmp	r2, r3
 800385c:	d91e      	bls.n	800389c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <pvPortMalloc+0xf4>
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e7fe      	b.n	8003882 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1ad2      	subs	r2, r2, r3
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003896:	69b8      	ldr	r0, [r7, #24]
 8003898:	f000 f8f6 	bl	8003a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <pvPortMalloc+0x178>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	4a18      	ldr	r2, [pc, #96]	; (8003908 <pvPortMalloc+0x178>)
 80038a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <pvPortMalloc+0x178>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <pvPortMalloc+0x180>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d203      	bcs.n	80038be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <pvPortMalloc+0x178>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a15      	ldr	r2, [pc, #84]	; (8003910 <pvPortMalloc+0x180>)
 80038bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <pvPortMalloc+0x174>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80038d2:	f001 f98d 	bl	8004bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <pvPortMalloc+0x164>
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	e7fe      	b.n	80038f2 <pvPortMalloc+0x162>
	return pvReturn;
 80038f4:	69fb      	ldr	r3, [r7, #28]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3728      	adds	r7, #40	; 0x28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20012ca0 	.word	0x20012ca0
 8003904:	20012cac 	.word	0x20012cac
 8003908:	20012ca4 	.word	0x20012ca4
 800390c:	20012c98 	.word	0x20012c98
 8003910:	20012ca8 	.word	0x20012ca8

08003914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d046      	beq.n	80039b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003926:	2308      	movs	r3, #8
 8003928:	425b      	negs	r3, r3
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4413      	add	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <vPortFree+0xa8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <vPortFree+0x42>
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e7fe      	b.n	8003954 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <vPortFree+0x5e>
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	e7fe      	b.n	8003970 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <vPortFree+0xa8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d019      	beq.n	80039b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d115      	bne.n	80039b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <vPortFree+0xa8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003998:	f001 f91c 	bl	8004bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <vPortFree+0xac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	4a06      	ldr	r2, [pc, #24]	; (80039c0 <vPortFree+0xac>)
 80039a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039aa:	6938      	ldr	r0, [r7, #16]
 80039ac:	f000 f86c 	bl	8003a88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80039b0:	f001 f91e 	bl	8004bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80039b4:	bf00      	nop
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20012cac 	.word	0x20012cac
 80039c0:	20012ca4 	.word	0x20012ca4

080039c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039ca:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80039ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039d0:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <prvHeapInit+0xac>)
 80039d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3307      	adds	r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <prvHeapInit+0xac>)
 80039f4:	4413      	add	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039fc:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <prvHeapInit+0xb0>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a02:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <prvHeapInit+0xb0>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003a10:	2208      	movs	r2, #8
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0307 	bic.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <prvHeapInit+0xb4>)
 8003a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <prvHeapInit+0xb4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <prvHeapInit+0xb4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	1ad2      	subs	r2, r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <prvHeapInit+0xb4>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <prvHeapInit+0xb8>)
 8003a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <prvHeapInit+0xbc>)
 8003a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <prvHeapInit+0xc0>)
 8003a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a62:	601a      	str	r2, [r3, #0]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20000098 	.word	0x20000098
 8003a74:	20012c98 	.word	0x20012c98
 8003a78:	20012ca0 	.word	0x20012ca0
 8003a7c:	20012ca8 	.word	0x20012ca8
 8003a80:	20012ca4 	.word	0x20012ca4
 8003a84:	20012cac 	.word	0x20012cac

08003a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <prvInsertBlockIntoFreeList+0xac>)
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e002      	b.n	8003a9c <prvInsertBlockIntoFreeList+0x14>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d8f7      	bhi.n	8003a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d108      	bne.n	8003aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d118      	bne.n	8003b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <prvInsertBlockIntoFreeList+0xb0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d00d      	beq.n	8003b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e008      	b.n	8003b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <prvInsertBlockIntoFreeList+0xb0>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e003      	b.n	8003b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d002      	beq.n	8003b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20012c98 	.word	0x20012c98
 8003b38:	20012ca0 	.word	0x20012ca0

08003b3c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f103 0208 	add.w	r2, r3, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b54:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f103 0208 	add.w	r2, r3, #8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f103 0208 	add.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf4:	d103      	bne.n	8003bfe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	e00c      	b.n	8003c18 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3308      	adds	r3, #8
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e002      	b.n	8003c0c <vListInsert+0x2e>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d2f6      	bcs.n	8003c06 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6892      	ldr	r2, [r2, #8]
 8003c66:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6852      	ldr	r2, [r2, #4]
 8003c70:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d103      	bne.n	8003c84 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	1e5a      	subs	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <xQueueGenericReset+0x28>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	e7fe      	b.n	8003cca <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8003ccc:	f002 f86e 	bl	8005dac <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	68f9      	ldr	r1, [r7, #12]
 8003cda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	441a      	add	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	441a      	add	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	22ff      	movs	r2, #255	; 0xff
 8003d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	22ff      	movs	r2, #255	; 0xff
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d114      	bne.n	8003d4c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01a      	beq.n	8003d60 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 f96a 	bl	8005008 <xTaskRemoveFromEventList>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d012      	beq.n	8003d60 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <xQueueGenericReset+0xcc>)
 8003d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	e009      	b.n	8003d60 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3310      	adds	r3, #16
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fef3 	bl	8003b3c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3324      	adds	r3, #36	; 0x24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff feee 	bl	8003b3c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003d60:	f002 f852 	bl	8005e08 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003d64:	2301      	movs	r3, #1
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	; 0x30
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <xQueueGenericCreate+0x28>
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	e7fe      	b.n	8003d9a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <xQueueGenericCreate+0x46>
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d101      	bne.n	8003dbe <xQueueGenericCreate+0x4a>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <xQueueGenericCreate+0x4c>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <xQueueGenericCreate+0x64>
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e7fe      	b.n	8003dd6 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003dde:	d909      	bls.n	8003df4 <xQueueGenericCreate+0x80>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e7fe      	b.n	8003df2 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	3350      	adds	r3, #80	; 0x50
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fcc9 	bl	8003790 <pvPortMalloc>
 8003dfe:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3350      	adds	r3, #80	; 0x50
 8003e0e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e10:	79fa      	ldrb	r2, [r7, #7]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f805 	bl	8003e2c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003e22:	6a3b      	ldr	r3, [r7, #32]
    }
 8003e24:	4618      	mov	r0, r3
 8003e26:	3728      	adds	r7, #40	; 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e002      	b.n	8003e4e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	69b8      	ldr	r0, [r7, #24]
 8003e5e:	f7ff ff21 	bl	8003ca4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08e      	sub	sp, #56	; 0x38
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e82:	2300      	movs	r3, #0
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <xQueueGenericSend+0x30>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea2:	e7fe      	b.n	8003ea2 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <xQueueGenericSend+0x3e>
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <xQueueGenericSend+0x42>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <xQueueGenericSend+0x44>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <xQueueGenericSend+0x5c>
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	e7fe      	b.n	8003ece <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d103      	bne.n	8003ede <xQueueGenericSend+0x6a>
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <xQueueGenericSend+0x6e>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <xQueueGenericSend+0x70>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <xQueueGenericSend+0x88>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	623b      	str	r3, [r7, #32]
 8003efa:	e7fe      	b.n	8003efa <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003efc:	f001 fa1c 	bl	8005338 <xTaskGetSchedulerState>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <xQueueGenericSend+0x98>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <xQueueGenericSend+0x9c>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <xQueueGenericSend+0x9e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <xQueueGenericSend+0xb6>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e7fe      	b.n	8003f28 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003f2a:	f001 ff3f 	bl	8005dac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <xQueueGenericSend+0xcc>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d129      	bne.n	8003f94 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f46:	f000 faa7 	bl	8004498 <prvCopyDataToQueue>
 8003f4a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	3324      	adds	r3, #36	; 0x24
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 f855 	bl	8005008 <xTaskRemoveFromEventList>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003f64:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <xQueueGenericSend+0x1f0>)
 8003f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	e00a      	b.n	8003f8c <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003f7c:	4b39      	ldr	r3, [pc, #228]	; (8004064 <xQueueGenericSend+0x1f0>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003f8c:	f001 ff3c 	bl	8005e08 <vPortExitCritical>
                return pdPASS;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e063      	b.n	800405c <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003f9a:	f001 ff35 	bl	8005e08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e05c      	b.n	800405c <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f88d 	bl	80050cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003fb6:	f001 ff27 	bl	8005e08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003fba:	f000 fe0b 	bl	8004bd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003fbe:	f001 fef5 	bl	8005dac <vPortEnterCritical>
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fc8:	b25b      	sxtb	r3, r3
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fce:	d103      	bne.n	8003fd8 <xQueueGenericSend+0x164>
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe4:	d103      	bne.n	8003fee <xQueueGenericSend+0x17a>
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fee:	f001 ff0b 	bl	8005e08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ff2:	1d3a      	adds	r2, r7, #4
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 f87c 	bl	80050f8 <xTaskCheckForTimeOut>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d124      	bne.n	8004050 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004008:	f000 fb3e 	bl	8004688 <prvIsQueueFull>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	3310      	adds	r3, #16
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ffa6 	bl	8004f6c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004022:	f000 fac9 	bl	80045b8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004026:	f000 fde3 	bl	8004bf0 <xTaskResumeAll>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f47f af7c 	bne.w	8003f2a <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <xQueueGenericSend+0x1f0>)
 8004034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	e772      	b.n	8003f2a <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004046:	f000 fab7 	bl	80045b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800404a:	f000 fdd1 	bl	8004bf0 <xTaskResumeAll>
 800404e:	e76c      	b.n	8003f2a <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004052:	f000 fab1 	bl	80045b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004056:	f000 fdcb 	bl	8004bf0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800405a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800405c:	4618      	mov	r0, r3
 800405e:	3738      	adds	r7, #56	; 0x38
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b090      	sub	sp, #64	; 0x40
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <xQueueGenericSendFromISR+0x2c>
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
 8004092:	e7fe      	b.n	8004092 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <xQueueGenericSendFromISR+0x3a>
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <xQueueGenericSendFromISR+0x3e>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <xQueueGenericSendFromISR+0x40>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <xQueueGenericSendFromISR+0x58>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
 80040be:	e7fe      	b.n	80040be <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d103      	bne.n	80040ce <xQueueGenericSendFromISR+0x66>
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <xQueueGenericSendFromISR+0x6a>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <xQueueGenericSendFromISR+0x6c>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <xQueueGenericSendFromISR+0x84>
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	623b      	str	r3, [r7, #32]
 80040ea:	e7fe      	b.n	80040ea <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040ec:	f001 ff3a 	bl	8005f64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040f0:	f3ef 8211 	mrs	r2, BASEPRI
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	61fa      	str	r2, [r7, #28]
 8004106:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004108:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <xQueueGenericSendFromISR+0xb6>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d13d      	bne.n	800419a <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004124:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004134:	f000 f9b0 	bl	8004498 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004138:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004140:	d112      	bne.n	8004168 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d024      	beq.n	8004194 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	4618      	mov	r0, r3
 8004150:	f000 ff5a 	bl	8005008 <xTaskRemoveFromEventList>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01c      	beq.n	8004194 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d019      	beq.n	8004194 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e015      	b.n	8004194 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004168:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800416c:	2b7f      	cmp	r3, #127	; 0x7f
 800416e:	d109      	bne.n	8004184 <xQueueGenericSendFromISR+0x11c>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	e7fe      	b.n	8004182 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004184:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004188:	3301      	adds	r3, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	b25a      	sxtb	r2, r3
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004194:	2301      	movs	r3, #1
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004198:	e001      	b.n	800419e <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800419a:	2300      	movs	r3, #0
 800419c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3740      	adds	r7, #64	; 0x40
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b08e      	sub	sp, #56	; 0x38
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <xQueueGiveFromISR+0x28>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	e7fe      	b.n	80041d8 <xQueueGiveFromISR+0x26>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <xQueueGiveFromISR+0x44>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	e7fe      	b.n	80041f4 <xQueueGiveFromISR+0x42>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <xQueueGiveFromISR+0x54>
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <xQueueGiveFromISR+0x58>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <xQueueGiveFromISR+0x5a>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <xQueueGiveFromISR+0x72>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	e7fe      	b.n	8004222 <xQueueGiveFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004224:	f001 fe9e 	bl	8005f64 <vPortValidateInterruptPriority>
	__asm volatile
 8004228:	f3ef 8211 	mrs	r2, BASEPRI
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	617a      	str	r2, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004240:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004250:	429a      	cmp	r2, r3
 8004252:	d239      	bcs.n	80042c8 <xQueueGiveFromISR+0x116>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800425a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004266:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426e:	d112      	bne.n	8004296 <xQueueGiveFromISR+0xe4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d024      	beq.n	80042c2 <xQueueGiveFromISR+0x110>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	3324      	adds	r3, #36	; 0x24
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fec3 	bl	8005008 <xTaskRemoveFromEventList>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01c      	beq.n	80042c2 <xQueueGiveFromISR+0x110>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d019      	beq.n	80042c2 <xQueueGiveFromISR+0x110>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e015      	b.n	80042c2 <xQueueGiveFromISR+0x110>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004296:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800429a:	2b7f      	cmp	r3, #127	; 0x7f
 800429c:	d109      	bne.n	80042b2 <xQueueGiveFromISR+0x100>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e7fe      	b.n	80042b0 <xQueueGiveFromISR+0xfe>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042b6:	3301      	adds	r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	b25a      	sxtb	r2, r3
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80042c2:	2301      	movs	r3, #1
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
 80042c6:	e001      	b.n	80042cc <xQueueGiveFromISR+0x11a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80042d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3738      	adds	r7, #56	; 0x38
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	; 0x30
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <xQueueReceive+0x2e>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	e7fe      	b.n	800430c <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <xQueueReceive+0x3c>
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <xQueueReceive+0x40>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <xQueueReceive+0x42>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <xQueueReceive+0x5a>
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	e7fe      	b.n	8004338 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800433a:	f000 fffd 	bl	8005338 <xTaskGetSchedulerState>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <xQueueReceive+0x6a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <xQueueReceive+0x6e>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <xQueueReceive+0x70>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <xQueueReceive+0x88>
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e7fe      	b.n	8004366 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004368:	f001 fd20 	bl	8005dac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01f      	beq.n	80043b8 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800437c:	f000 f8f6 	bl	800456c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	1e5a      	subs	r2, r3, #1
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00f      	beq.n	80043b0 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	3310      	adds	r3, #16
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fe37 	bl	8005008 <xTaskRemoveFromEventList>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80043a0:	4b3c      	ldr	r3, [pc, #240]	; (8004494 <xQueueReceive+0x1b4>)
 80043a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80043b0:	f001 fd2a 	bl	8005e08 <vPortExitCritical>
                return pdPASS;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e069      	b.n	800448c <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80043be:	f001 fd23 	bl	8005e08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e062      	b.n	800448c <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fe7b 	bl	80050cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80043da:	f001 fd15 	bl	8005e08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80043de:	f000 fbf9 	bl	8004bd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80043e2:	f001 fce3 	bl	8005dac <vPortEnterCritical>
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f2:	d103      	bne.n	80043fc <xQueueReceive+0x11c>
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004402:	b25b      	sxtb	r3, r3
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004408:	d103      	bne.n	8004412 <xQueueReceive+0x132>
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004412:	f001 fcf9 	bl	8005e08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004416:	1d3a      	adds	r2, r7, #4
 8004418:	f107 0310 	add.w	r3, r7, #16
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fe6a 	bl	80050f8 <xTaskCheckForTimeOut>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d123      	bne.n	8004472 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800442a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442c:	f000 f916 	bl	800465c <prvIsQueueEmpty>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d017      	beq.n	8004466 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	3324      	adds	r3, #36	; 0x24
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fd94 	bl	8004f6c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004446:	f000 f8b7 	bl	80045b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800444a:	f000 fbd1 	bl	8004bf0 <xTaskResumeAll>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d189      	bne.n	8004368 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <xQueueReceive+0x1b4>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	e780      	b.n	8004368 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004468:	f000 f8a6 	bl	80045b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800446c:	f000 fbc0 	bl	8004bf0 <xTaskResumeAll>
 8004470:	e77a      	b.n	8004368 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004474:	f000 f8a0 	bl	80045b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004478:	f000 fbba 	bl	8004bf0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800447c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800447e:	f000 f8ed 	bl	800465c <prvIsQueueEmpty>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	f43f af6f 	beq.w	8004368 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800448a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	; 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	e000ed04 	.word	0xe000ed04

08004498 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d14d      	bne.n	800455a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 ff56 	bl	8005374 <xTaskPriorityDisinherit>
 80044c8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	e043      	b.n	800455a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d119      	bne.n	800450c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6858      	ldr	r0, [r3, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	461a      	mov	r2, r3
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	f001 fda6 	bl	8006034 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d32b      	bcc.n	800455a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	e026      	b.n	800455a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68d8      	ldr	r0, [r3, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	461a      	mov	r2, r3
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	f001 fd8c 	bl	8006034 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	425b      	negs	r3, r3
 8004526:	441a      	add	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d207      	bcs.n	8004548 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	425b      	negs	r3, r3
 8004542:	441a      	add	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d105      	bne.n	800455a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	3b01      	subs	r3, #1
 8004558:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004562:	697b      	ldr	r3, [r7, #20]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d018      	beq.n	80045b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	441a      	add	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	d303      	bcc.n	80045a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68d9      	ldr	r1, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	461a      	mov	r2, r3
 80045aa:	6838      	ldr	r0, [r7, #0]
 80045ac:	f001 fd42 	bl	8006034 <memcpy>
    }
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80045c0:	f001 fbf4 	bl	8005dac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80045cc:	e011      	b.n	80045f2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3324      	adds	r3, #36	; 0x24
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fd14 	bl	8005008 <xTaskRemoveFromEventList>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80045e6:	f000 fde7 	bl	80051b8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80045f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	dce9      	bgt.n	80045ce <prvUnlockQueue+0x16>
 80045fa:	e000      	b.n	80045fe <prvUnlockQueue+0x46>
                        break;
 80045fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004606:	f001 fbff 	bl	8005e08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800460a:	f001 fbcf 	bl	8005dac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004614:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004616:	e011      	b.n	800463c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3310      	adds	r3, #16
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fcef 	bl	8005008 <xTaskRemoveFromEventList>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004630:	f000 fdc2 	bl	80051b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	3b01      	subs	r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800463c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004640:	2b00      	cmp	r3, #0
 8004642:	dce9      	bgt.n	8004618 <prvUnlockQueue+0x60>
 8004644:	e000      	b.n	8004648 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004646:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	22ff      	movs	r2, #255	; 0xff
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004650:	f001 fbda 	bl	8005e08 <vPortExitCritical>
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004664:	f001 fba2 	bl	8005dac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e001      	b.n	800467a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800467a:	f001 fbc5 	bl	8005e08 <vPortExitCritical>

    return xReturn;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004690:	f001 fb8c 	bl	8005dac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	429a      	cmp	r2, r3
 800469e:	d102      	bne.n	80046a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e001      	b.n	80046aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80046aa:	f001 fbad 	bl	8005e08 <vPortExitCritical>

    return xReturn;
 80046ae:	68fb      	ldr	r3, [r7, #12]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e014      	b.n	80046f2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046c8:	4a0e      	ldr	r2, [pc, #56]	; (8004704 <vQueueAddToRegistry+0x4c>)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046d4:	490b      	ldr	r1, [pc, #44]	; (8004704 <vQueueAddToRegistry+0x4c>)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <vQueueAddToRegistry+0x4c>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80046ea:	e005      	b.n	80046f8 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3301      	adds	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b07      	cmp	r3, #7
 80046f6:	d9e7      	bls.n	80046c8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80046f8:	bf00      	nop
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	20012fb4 	.word	0x20012fb4

08004708 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004718:	f001 fb48 	bl	8005dac <vPortEnterCritical>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004722:	b25b      	sxtb	r3, r3
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004728:	d103      	bne.n	8004732 <vQueueWaitForMessageRestricted+0x2a>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004738:	b25b      	sxtb	r3, r3
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800473e:	d103      	bne.n	8004748 <vQueueWaitForMessageRestricted+0x40>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004748:	f001 fb5e 	bl	8005e08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3324      	adds	r3, #36	; 0x24
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fc29 	bl	8004fb4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	f7ff ff28 	bl	80045b8 <prvUnlockQueue>
    }
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <showTask>:
PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the scheduler was suspended.  They will be moved to the ready list when the scheduler is resumed. */


char aa[10]={};

void showTask(void){
 8004770:	b5b0      	push	{r4, r5, r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
//	vTaskSuspendAll();
	printf("taskname      priority     stackstart    stacktop   status\n\r");
 8004776:	4834      	ldr	r0, [pc, #208]	; (8004848 <showTask+0xd8>)
 8004778:	f001 fc70 	bl	800605c <iprintf>
	uint8_t i,j=0;
 800477c:	2300      	movs	r3, #0
 800477e:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<configMAX_PRIORITIES;i++){
 8004780:	2300      	movs	r3, #0
 8004782:	75fb      	strb	r3, [r7, #23]
 8004784:	e059      	b.n	800483a <showTask+0xca>
		if(!listLIST_IS_EMPTY(&pxReadyTasksLists[i])){
 8004786:	7dfa      	ldrb	r2, [r7, #23]
 8004788:	4930      	ldr	r1, [pc, #192]	; (800484c <showTask+0xdc>)
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d04c      	beq.n	8004834 <showTask+0xc4>
//			HAL_Delay(10);
			ListItem_t object_item=*(pxReadyTasksLists[i].xListEnd.pxNext);
 800479a:	7dfa      	ldrb	r2, [r7, #23]
 800479c:	492b      	ldr	r1, [pc, #172]	; (800484c <showTask+0xdc>)
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	330c      	adds	r3, #12
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	463c      	mov	r4, r7
 80047ae:	461d      	mov	r5, r3
 80047b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	6023      	str	r3, [r4, #0]
//			ListItem_t object_item;
//			memcpy(&object_item, pxReadyTasksLists[i].pxIndex, sizeof(object_item));
			memset(aa,0,10);
 80047b8:	220a      	movs	r2, #10
 80047ba:	2100      	movs	r1, #0
 80047bc:	4824      	ldr	r0, [pc, #144]	; (8004850 <showTask+0xe0>)
 80047be:	f001 fc44 	bl	800604a <memset>
			strncpy(aa,((TCB_t*)(object_item.pvOwner))->pcTaskName,10);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3334      	adds	r3, #52	; 0x34
 80047c6:	220a      	movs	r2, #10
 80047c8:	4619      	mov	r1, r3
 80047ca:	4821      	ldr	r0, [pc, #132]	; (8004850 <showTask+0xe0>)
 80047cc:	f001 fc5e 	bl	800608c <strncpy>
			printf("%10s         %u\n\r",aa,((TCB_t*)(object_item.pvOwner))->uxPriority);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	461a      	mov	r2, r3
 80047d6:	491e      	ldr	r1, [pc, #120]	; (8004850 <showTask+0xe0>)
 80047d8:	481e      	ldr	r0, [pc, #120]	; (8004854 <showTask+0xe4>)
 80047da:	f001 fc3f 	bl	800605c <iprintf>

			for(j=1;j<pxReadyTasksLists[i].uxNumberOfItems;j++){
 80047de:	2301      	movs	r3, #1
 80047e0:	75bb      	strb	r3, [r7, #22]
 80047e2:	e01c      	b.n	800481e <showTask+0xae>
				memset(aa,0,10);
 80047e4:	220a      	movs	r2, #10
 80047e6:	2100      	movs	r1, #0
 80047e8:	4819      	ldr	r0, [pc, #100]	; (8004850 <showTask+0xe0>)
 80047ea:	f001 fc2e 	bl	800604a <memset>
				object_item=*(object_item.pxNext);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	463c      	mov	r4, r7
 80047f2:	461d      	mov	r5, r3
 80047f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	6023      	str	r3, [r4, #0]
//				memcpy(&object_item, object_item.pxPrevious,sizeof(object_item));

				strncpy(aa,((TCB_t*)(object_item.pvOwner))->pcTaskName,10);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3334      	adds	r3, #52	; 0x34
 8004800:	220a      	movs	r2, #10
 8004802:	4619      	mov	r1, r3
 8004804:	4812      	ldr	r0, [pc, #72]	; (8004850 <showTask+0xe0>)
 8004806:	f001 fc41 	bl	800608c <strncpy>
				printf("%10s         %u\n\r",aa,((TCB_t*)(object_item.pvOwner))->uxPriority);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	461a      	mov	r2, r3
 8004810:	490f      	ldr	r1, [pc, #60]	; (8004850 <showTask+0xe0>)
 8004812:	4810      	ldr	r0, [pc, #64]	; (8004854 <showTask+0xe4>)
 8004814:	f001 fc22 	bl	800605c <iprintf>
			for(j=1;j<pxReadyTasksLists[i].uxNumberOfItems;j++){
 8004818:	7dbb      	ldrb	r3, [r7, #22]
 800481a:	3301      	adds	r3, #1
 800481c:	75bb      	strb	r3, [r7, #22]
 800481e:	7db9      	ldrb	r1, [r7, #22]
 8004820:	7dfa      	ldrb	r2, [r7, #23]
 8004822:	480a      	ldr	r0, [pc, #40]	; (800484c <showTask+0xdc>)
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4403      	add	r3, r0
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4299      	cmp	r1, r3
 8004832:	d3d7      	bcc.n	80047e4 <showTask+0x74>
	for(i=0;i<configMAX_PRIORITIES;i++){
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	3301      	adds	r3, #1
 8004838:	75fb      	strb	r3, [r7, #23]
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b0e      	cmp	r3, #14
 800483e:	d9a2      	bls.n	8004786 <showTask+0x16>
	}



//	xTaskResumeAll();
}
 8004840:	bf00      	nop
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bdb0      	pop	{r4, r5, r7, pc}
 8004848:	08006e88 	.word	0x08006e88
 800484c:	20012cb4 	.word	0x20012cb4
 8004850:	20012e24 	.word	0x20012e24
 8004854:	08006ec8 	.word	0x08006ec8

08004858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af04      	add	r7, sp, #16
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe ff8f 	bl	8003790 <pvPortMalloc>
 8004872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00e      	beq.n	8004898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800487a:	2058      	movs	r0, #88	; 0x58
 800487c:	f7fe ff88 	bl	8003790 <pvPortMalloc>
 8004880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
 800488e:	e005      	b.n	800489c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004890:	6978      	ldr	r0, [r7, #20]
 8004892:	f7ff f83f 	bl	8003914 <vPortFree>
 8004896:	e001      	b.n	800489c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d013      	beq.n	80048ca <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048a2:	88fa      	ldrh	r2, [r7, #6]
 80048a4:	2300      	movs	r3, #0
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f80e 	bl	80048da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048be:	69f8      	ldr	r0, [r7, #28]
 80048c0:	f000 f89a 	bl	80049f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048c4:	2301      	movs	r3, #1
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	e002      	b.n	80048d0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048d0:	69bb      	ldr	r3, [r7, #24]
	}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b088      	sub	sp, #32
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	461a      	mov	r2, r3
 80048f2:	21a5      	movs	r1, #165	; 0xa5
 80048f4:	f001 fba9 	bl	800604a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004902:	3b01      	subs	r3, #1
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f023 0307 	bic.w	r3, r3, #7
 8004910:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	2b00      	cmp	r3, #0
 800491a:	d009      	beq.n	8004930 <prvInitialiseNewTask+0x56>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e7fe      	b.n	800492e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01f      	beq.n	8004976 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e012      	b.n	8004962 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4413      	add	r3, r2
 8004942:	7819      	ldrb	r1, [r3, #0]
 8004944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	3334      	adds	r3, #52	; 0x34
 800494c:	460a      	mov	r2, r1
 800494e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d006      	beq.n	800496a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	3301      	adds	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	2b09      	cmp	r3, #9
 8004966:	d9e9      	bls.n	800493c <prvInitialiseNewTask+0x62>
 8004968:	e000      	b.n	800496c <prvInitialiseNewTask+0x92>
			{
				break;
 800496a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004974:	e003      	b.n	800497e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	2b0e      	cmp	r3, #14
 8004982:	d901      	bls.n	8004988 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004984:	230e      	movs	r3, #14
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004992:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	2200      	movs	r2, #0
 8004998:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	3304      	adds	r3, #4
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff f8ec 	bl	8003b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	3318      	adds	r3, #24
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff f8e7 	bl	8003b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	f1c3 020f 	rsb	r2, r3, #15
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	2200      	movs	r2, #0
 80049c8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68f9      	ldr	r1, [r7, #12]
 80049d6:	69b8      	ldr	r0, [r7, #24]
 80049d8:	f001 f8c4 	bl	8005b64 <pxPortInitialiseStack>
 80049dc:	4602      	mov	r2, r0
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ee:	bf00      	nop
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a00:	f001 f9d4 	bl	8005dac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a04:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <prvAddNewTaskToReadyList+0xc0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	4a2b      	ldr	r2, [pc, #172]	; (8004ab8 <prvAddNewTaskToReadyList+0xc0>)
 8004a0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <prvAddNewTaskToReadyList+0xc4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a16:	4a29      	ldr	r2, [pc, #164]	; (8004abc <prvAddNewTaskToReadyList+0xc4>)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <prvAddNewTaskToReadyList+0xc0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d110      	bne.n	8004a46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a24:	f000 fbec 	bl	8005200 <prvInitialiseTaskLists>
 8004a28:	e00d      	b.n	8004a46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a2a:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <prvAddNewTaskToReadyList+0xc8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a32:	4b22      	ldr	r3, [pc, #136]	; (8004abc <prvAddNewTaskToReadyList+0xc4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d802      	bhi.n	8004a46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a40:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <prvAddNewTaskToReadyList+0xc4>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a46:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <prvAddNewTaskToReadyList+0xcc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <prvAddNewTaskToReadyList+0xcc>)
 8004a4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a50:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <prvAddNewTaskToReadyList+0xcc>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <prvAddNewTaskToReadyList+0xd0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <prvAddNewTaskToReadyList+0xd0>)
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4a15      	ldr	r2, [pc, #84]	; (8004acc <prvAddNewTaskToReadyList+0xd4>)
 8004a78:	441a      	add	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f7ff f888 	bl	8003b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a86:	f001 f9bf 	bl	8005e08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <prvAddNewTaskToReadyList+0xc8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00e      	beq.n	8004ab0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <prvAddNewTaskToReadyList+0xc4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d207      	bcs.n	8004ab0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <prvAddNewTaskToReadyList+0xd8>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20012e5c 	.word	0x20012e5c
 8004abc:	20012cb0 	.word	0x20012cb0
 8004ac0:	20012e68 	.word	0x20012e68
 8004ac4:	20012e78 	.word	0x20012e78
 8004ac8:	20012e64 	.word	0x20012e64
 8004acc:	20012cb4 	.word	0x20012cb4
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <vTaskDelay+0x60>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <vTaskDelay+0x2e>
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	e7fe      	b.n	8004b00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004b02:	f000 f867 	bl	8004bd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b06:	2100      	movs	r1, #0
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fcb7 	bl	800547c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b0e:	f000 f86f 	bl	8004bf0 <xTaskResumeAll>
 8004b12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <vTaskDelay+0x64>)
 8004b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20012e84 	.word	0x20012e84
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004b42:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <vTaskStartScheduler+0x80>)
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	2300      	movs	r3, #0
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2282      	movs	r2, #130	; 0x82
 8004b4e:	491c      	ldr	r1, [pc, #112]	; (8004bc0 <vTaskStartScheduler+0x84>)
 8004b50:	481c      	ldr	r0, [pc, #112]	; (8004bc4 <vTaskStartScheduler+0x88>)
 8004b52:	f7ff fe81 	bl	8004858 <xTaskCreate>
 8004b56:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d102      	bne.n	8004b64 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004b5e:	f000 fcf3 	bl	8005548 <xTimerCreateTimerTask>
 8004b62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d115      	bne.n	8004b96 <vTaskStartScheduler+0x5a>
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <vTaskStartScheduler+0x8c>)
 8004b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <vTaskStartScheduler+0x90>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <vTaskStartScheduler+0x94>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b90:	f001 f86e 	bl	8005c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b94:	e00d      	b.n	8004bb2 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b9c:	d109      	bne.n	8004bb2 <vTaskStartScheduler+0x76>
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	607b      	str	r3, [r7, #4]
 8004bb0:	e7fe      	b.n	8004bb0 <vTaskStartScheduler+0x74>
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20012e80 	.word	0x20012e80
 8004bc0:	08006edc 	.word	0x08006edc
 8004bc4:	080051d1 	.word	0x080051d1
 8004bc8:	20012e7c 	.word	0x20012e7c
 8004bcc:	20012e68 	.word	0x20012e68
 8004bd0:	20012e60 	.word	0x20012e60

08004bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <vTaskSuspendAll+0x18>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	4a03      	ldr	r2, [pc, #12]	; (8004bec <vTaskSuspendAll+0x18>)
 8004be0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20012e84 	.word	0x20012e84

08004bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bfe:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <xTaskResumeAll+0x114>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <xTaskResumeAll+0x2a>
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	e7fe      	b.n	8004c18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c1a:	f001 f8c7 	bl	8005dac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c1e:	4b39      	ldr	r3, [pc, #228]	; (8004d04 <xTaskResumeAll+0x114>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	4a37      	ldr	r2, [pc, #220]	; (8004d04 <xTaskResumeAll+0x114>)
 8004c26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c28:	4b36      	ldr	r3, [pc, #216]	; (8004d04 <xTaskResumeAll+0x114>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d161      	bne.n	8004cf4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c30:	4b35      	ldr	r3, [pc, #212]	; (8004d08 <xTaskResumeAll+0x118>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05d      	beq.n	8004cf4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c38:	e02e      	b.n	8004c98 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c3a:	4b34      	ldr	r3, [pc, #208]	; (8004d0c <xTaskResumeAll+0x11c>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3318      	adds	r3, #24
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff f802 	bl	8003c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe fffd 	bl	8003c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <xTaskResumeAll+0x120>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	4a2a      	ldr	r2, [pc, #168]	; (8004d10 <xTaskResumeAll+0x120>)
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4a27      	ldr	r2, [pc, #156]	; (8004d14 <xTaskResumeAll+0x124>)
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f7fe ff89 	bl	8003b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <xTaskResumeAll+0x128>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d302      	bcc.n	8004c98 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004c92:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <xTaskResumeAll+0x12c>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c98:	4b1c      	ldr	r3, [pc, #112]	; (8004d0c <xTaskResumeAll+0x11c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1cc      	bne.n	8004c3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ca6:	f000 fb27 	bl	80052f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004caa:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <xTaskResumeAll+0x130>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d010      	beq.n	8004cd8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cb6:	f000 f847 	bl	8004d48 <xTaskIncrementTick>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004cc0:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <xTaskResumeAll+0x12c>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f1      	bne.n	8004cb6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <xTaskResumeAll+0x130>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <xTaskResumeAll+0x12c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <xTaskResumeAll+0x134>)
 8004ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cf4:	f001 f888 	bl	8005e08 <vPortExitCritical>

	return xAlreadyYielded;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20012e84 	.word	0x20012e84
 8004d08:	20012e5c 	.word	0x20012e5c
 8004d0c:	20012e10 	.word	0x20012e10
 8004d10:	20012e64 	.word	0x20012e64
 8004d14:	20012cb4 	.word	0x20012cb4
 8004d18:	20012cb0 	.word	0x20012cb0
 8004d1c:	20012e70 	.word	0x20012e70
 8004d20:	20012e6c 	.word	0x20012e6c
 8004d24:	e000ed04 	.word	0xe000ed04

08004d28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <xTaskGetTickCount+0x1c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d34:	687b      	ldr	r3, [r7, #4]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20012e60 	.word	0x20012e60

08004d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d52:	4b4e      	ldr	r3, [pc, #312]	; (8004e8c <xTaskIncrementTick+0x144>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 8087 	bne.w	8004e6a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d5c:	4b4c      	ldr	r3, [pc, #304]	; (8004e90 <xTaskIncrementTick+0x148>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3301      	adds	r3, #1
 8004d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d64:	4a4a      	ldr	r2, [pc, #296]	; (8004e90 <xTaskIncrementTick+0x148>)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11f      	bne.n	8004db0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d70:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <xTaskIncrementTick+0x14c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <xTaskIncrementTick+0x46>
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	e7fe      	b.n	8004d8c <xTaskIncrementTick+0x44>
 8004d8e:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <xTaskIncrementTick+0x14c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	4b40      	ldr	r3, [pc, #256]	; (8004e98 <xTaskIncrementTick+0x150>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a3e      	ldr	r2, [pc, #248]	; (8004e94 <xTaskIncrementTick+0x14c>)
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4a3e      	ldr	r2, [pc, #248]	; (8004e98 <xTaskIncrementTick+0x150>)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b3e      	ldr	r3, [pc, #248]	; (8004e9c <xTaskIncrementTick+0x154>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a3c      	ldr	r2, [pc, #240]	; (8004e9c <xTaskIncrementTick+0x154>)
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	f000 faa4 	bl	80052f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004db0:	4b3b      	ldr	r3, [pc, #236]	; (8004ea0 <xTaskIncrementTick+0x158>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d348      	bcc.n	8004e4c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dba:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <xTaskIncrementTick+0x14c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc4:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <xTaskIncrementTick+0x158>)
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dca:	601a      	str	r2, [r3, #0]
					break;
 8004dcc:	e03e      	b.n	8004e4c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dce:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <xTaskIncrementTick+0x14c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d203      	bcs.n	8004dee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004de6:	4a2e      	ldr	r2, [pc, #184]	; (8004ea0 <xTaskIncrementTick+0x158>)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dec:	e02e      	b.n	8004e4c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	3304      	adds	r3, #4
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe ff2c 	bl	8003c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d004      	beq.n	8004e0a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	3318      	adds	r3, #24
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe ff23 	bl	8003c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	2201      	movs	r2, #1
 8004e10:	409a      	lsls	r2, r3
 8004e12:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <xTaskIncrementTick+0x15c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	4a22      	ldr	r2, [pc, #136]	; (8004ea4 <xTaskIncrementTick+0x15c>)
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <xTaskIncrementTick+0x160>)
 8004e2a:	441a      	add	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7fe feaf 	bl	8003b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <xTaskIncrementTick+0x164>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3b9      	bcc.n	8004dba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004e46:	2301      	movs	r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e4a:	e7b6      	b.n	8004dba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e4c:	4b17      	ldr	r3, [pc, #92]	; (8004eac <xTaskIncrementTick+0x164>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	4915      	ldr	r1, [pc, #84]	; (8004ea8 <xTaskIncrementTick+0x160>)
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d907      	bls.n	8004e74 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e004      	b.n	8004e74 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e6a:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <xTaskIncrementTick+0x168>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	4a0f      	ldr	r2, [pc, #60]	; (8004eb0 <xTaskIncrementTick+0x168>)
 8004e72:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <xTaskIncrementTick+0x16c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e80:	697b      	ldr	r3, [r7, #20]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20012e84 	.word	0x20012e84
 8004e90:	20012e60 	.word	0x20012e60
 8004e94:	20012e08 	.word	0x20012e08
 8004e98:	20012e0c 	.word	0x20012e0c
 8004e9c:	20012e74 	.word	0x20012e74
 8004ea0:	20012e7c 	.word	0x20012e7c
 8004ea4:	20012e64 	.word	0x20012e64
 8004ea8:	20012cb4 	.word	0x20012cb4
 8004eac:	20012cb0 	.word	0x20012cb0
 8004eb0:	20012e6c 	.word	0x20012e6c
 8004eb4:	20012e70 	.word	0x20012e70

08004eb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ebe:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <vTaskSwitchContext+0xa0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ec6:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <vTaskSwitchContext+0xa4>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ecc:	e03e      	b.n	8004f4c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <vTaskSwitchContext+0xa4>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed4:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <vTaskSwitchContext+0xa8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	fab3 f383 	clz	r3, r3
 8004ee0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ee2:	7afb      	ldrb	r3, [r7, #11]
 8004ee4:	f1c3 031f 	rsb	r3, r3, #31
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	491e      	ldr	r1, [pc, #120]	; (8004f64 <vTaskSwitchContext+0xac>)
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	e7fe      	b.n	8004f10 <vTaskSwitchContext+0x58>
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <vTaskSwitchContext+0xac>)
 8004f1e:	4413      	add	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	3308      	adds	r3, #8
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d104      	bne.n	8004f42 <vTaskSwitchContext+0x8a>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <vTaskSwitchContext+0xb0>)
 8004f4a:	6013      	str	r3, [r2, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	20012e84 	.word	0x20012e84
 8004f5c:	20012e70 	.word	0x20012e70
 8004f60:	20012e64 	.word	0x20012e64
 8004f64:	20012cb4 	.word	0x20012cb4
 8004f68:	20012cb0 	.word	0x20012cb0

08004f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <vTaskPlaceOnEventList+0x24>
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e7fe      	b.n	8004f8e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <vTaskPlaceOnEventList+0x44>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3318      	adds	r3, #24
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fe fe20 	bl	8003bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	6838      	ldr	r0, [r7, #0]
 8004fa2:	f000 fa6b 	bl	800547c <prvAddCurrentTaskToDelayedList>
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20012cb0 	.word	0x20012cb0

08004fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <vTaskPlaceOnEventListRestricted+0x26>
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e7fe      	b.n	8004fd8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <vTaskPlaceOnEventListRestricted+0x50>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3318      	adds	r3, #24
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7fe fdd7 	bl	8003b96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ff2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	68b8      	ldr	r0, [r7, #8]
 8004ff8:	f000 fa40 	bl	800547c <prvAddCurrentTaskToDelayedList>
	}
 8004ffc:	bf00      	nop
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20012cb0 	.word	0x20012cb0

08005008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <xTaskRemoveFromEventList+0x2a>
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e7fe      	b.n	8005030 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3318      	adds	r3, #24
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fe0a 	bl	8003c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800503c:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <xTaskRemoveFromEventList+0xac>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11c      	bne.n	800507e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3304      	adds	r3, #4
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe fe01 	bl	8003c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	2201      	movs	r2, #1
 8005054:	409a      	lsls	r2, r3
 8005056:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <xTaskRemoveFromEventList+0xb0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <xTaskRemoveFromEventList+0xb0>)
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <xTaskRemoveFromEventList+0xb4>)
 800506e:	441a      	add	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fe fd8d 	bl	8003b96 <vListInsertEnd>
 800507c:	e005      	b.n	800508a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3318      	adds	r3, #24
 8005082:	4619      	mov	r1, r3
 8005084:	480e      	ldr	r0, [pc, #56]	; (80050c0 <xTaskRemoveFromEventList+0xb8>)
 8005086:	f7fe fd86 	bl	8003b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508e:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <xTaskRemoveFromEventList+0xbc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	429a      	cmp	r2, r3
 8005096:	d905      	bls.n	80050a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <xTaskRemoveFromEventList+0xc0>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e001      	b.n	80050a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050a8:	697b      	ldr	r3, [r7, #20]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20012e84 	.word	0x20012e84
 80050b8:	20012e64 	.word	0x20012e64
 80050bc:	20012cb4 	.word	0x20012cb4
 80050c0:	20012e10 	.word	0x20012e10
 80050c4:	20012cb0 	.word	0x20012cb0
 80050c8:	20012e70 	.word	0x20012e70

080050cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <vTaskInternalSetTimeOutState+0x24>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <vTaskInternalSetTimeOutState+0x28>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	605a      	str	r2, [r3, #4]
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	20012e74 	.word	0x20012e74
 80050f4:	20012e60 	.word	0x20012e60

080050f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <xTaskCheckForTimeOut+0x24>
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e7fe      	b.n	800511a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <xTaskCheckForTimeOut+0x3e>
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e7fe      	b.n	8005134 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005136:	f000 fe39 	bl	8005dac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800513a:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <xTaskCheckForTimeOut+0xb8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005152:	d102      	bne.n	800515a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005154:	2300      	movs	r3, #0
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e023      	b.n	80051a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <xTaskCheckForTimeOut+0xbc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d007      	beq.n	8005176 <xTaskCheckForTimeOut+0x7e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	e015      	b.n	80051a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	429a      	cmp	r2, r3
 800517e:	d20b      	bcs.n	8005198 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	1ad2      	subs	r2, r2, r3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff ff9d 	bl	80050cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e004      	b.n	80051a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800519e:	2301      	movs	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051a2:	f000 fe31 	bl	8005e08 <vPortExitCritical>

	return xReturn;
 80051a6:	69fb      	ldr	r3, [r7, #28]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20012e60 	.word	0x20012e60
 80051b4:	20012e74 	.word	0x20012e74

080051b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <vTaskMissedYield+0x14>)
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	20012e70 	.word	0x20012e70

080051d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051d8:	f000 f852 	bl	8005280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <prvIdleTask+0x28>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d9f9      	bls.n	80051d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <prvIdleTask+0x2c>)
 80051e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051f4:	e7f0      	b.n	80051d8 <prvIdleTask+0x8>
 80051f6:	bf00      	nop
 80051f8:	20012cb4 	.word	0x20012cb4
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005206:	2300      	movs	r3, #0
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	e00c      	b.n	8005226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4a12      	ldr	r2, [pc, #72]	; (8005260 <prvInitialiseTaskLists+0x60>)
 8005218:	4413      	add	r3, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe fc8e 	bl	8003b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3301      	adds	r3, #1
 8005224:	607b      	str	r3, [r7, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b0e      	cmp	r3, #14
 800522a:	d9ef      	bls.n	800520c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800522c:	480d      	ldr	r0, [pc, #52]	; (8005264 <prvInitialiseTaskLists+0x64>)
 800522e:	f7fe fc85 	bl	8003b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005232:	480d      	ldr	r0, [pc, #52]	; (8005268 <prvInitialiseTaskLists+0x68>)
 8005234:	f7fe fc82 	bl	8003b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005238:	480c      	ldr	r0, [pc, #48]	; (800526c <prvInitialiseTaskLists+0x6c>)
 800523a:	f7fe fc7f 	bl	8003b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800523e:	480c      	ldr	r0, [pc, #48]	; (8005270 <prvInitialiseTaskLists+0x70>)
 8005240:	f7fe fc7c 	bl	8003b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005244:	480b      	ldr	r0, [pc, #44]	; (8005274 <prvInitialiseTaskLists+0x74>)
 8005246:	f7fe fc79 	bl	8003b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800524a:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <prvInitialiseTaskLists+0x78>)
 800524c:	4a05      	ldr	r2, [pc, #20]	; (8005264 <prvInitialiseTaskLists+0x64>)
 800524e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <prvInitialiseTaskLists+0x7c>)
 8005252:	4a05      	ldr	r2, [pc, #20]	; (8005268 <prvInitialiseTaskLists+0x68>)
 8005254:	601a      	str	r2, [r3, #0]
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20012cb4 	.word	0x20012cb4
 8005264:	20012de0 	.word	0x20012de0
 8005268:	20012df4 	.word	0x20012df4
 800526c:	20012e10 	.word	0x20012e10
 8005270:	20012e30 	.word	0x20012e30
 8005274:	20012e48 	.word	0x20012e48
 8005278:	20012e08 	.word	0x20012e08
 800527c:	20012e0c 	.word	0x20012e0c

08005280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005286:	e019      	b.n	80052bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005288:	f000 fd90 	bl	8005dac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <prvCheckTasksWaitingTermination+0x4c>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe fcd9 	bl	8003c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <prvCheckTasksWaitingTermination+0x50>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <prvCheckTasksWaitingTermination+0x50>)
 80052a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <prvCheckTasksWaitingTermination+0x54>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <prvCheckTasksWaitingTermination+0x54>)
 80052b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052b2:	f000 fda9 	bl	8005e08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f80e 	bl	80052d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <prvCheckTasksWaitingTermination+0x54>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e1      	bne.n	8005288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20012e30 	.word	0x20012e30
 80052d0:	20012e5c 	.word	0x20012e5c
 80052d4:	20012e44 	.word	0x20012e44

080052d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fe fb15 	bl	8003914 <vPortFree>
			vPortFree( pxTCB );
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fe fb12 	bl	8003914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <prvResetNextTaskUnblockTime+0x38>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <prvResetNextTaskUnblockTime+0x3c>)
 800530a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800530e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005310:	e008      	b.n	8005324 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <prvResetNextTaskUnblockTime+0x38>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a04      	ldr	r2, [pc, #16]	; (8005334 <prvResetNextTaskUnblockTime+0x3c>)
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20012e08 	.word	0x20012e08
 8005334:	20012e7c 	.word	0x20012e7c

08005338 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <xTaskGetSchedulerState+0x34>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005346:	2301      	movs	r3, #1
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	e008      	b.n	800535e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534c:	4b08      	ldr	r3, [pc, #32]	; (8005370 <xTaskGetSchedulerState+0x38>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005354:	2302      	movs	r3, #2
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	e001      	b.n	800535e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800535e:	687b      	ldr	r3, [r7, #4]
	}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	20012e68 	.word	0x20012e68
 8005370:	20012e84 	.word	0x20012e84

08005374 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06c      	beq.n	8005464 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800538a:	4b39      	ldr	r3, [pc, #228]	; (8005470 <xTaskPriorityDisinherit+0xfc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	d009      	beq.n	80053a8 <xTaskPriorityDisinherit+0x34>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	e7fe      	b.n	80053a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <xTaskPriorityDisinherit+0x50>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	e7fe      	b.n	80053c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c8:	1e5a      	subs	r2, r3, #1
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d044      	beq.n	8005464 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d140      	bne.n	8005464 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fc32 	bl	8003c50 <uxListRemove>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d115      	bne.n	800541e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f6:	491f      	ldr	r1, [pc, #124]	; (8005474 <xTaskPriorityDisinherit+0x100>)
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <xTaskPriorityDisinherit+0xaa>
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	2201      	movs	r2, #1
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	43da      	mvns	r2, r3
 8005414:	4b18      	ldr	r3, [pc, #96]	; (8005478 <xTaskPriorityDisinherit+0x104>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4013      	ands	r3, r2
 800541a:	4a17      	ldr	r2, [pc, #92]	; (8005478 <xTaskPriorityDisinherit+0x104>)
 800541c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	f1c3 020f 	rsb	r2, r3, #15
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	2201      	movs	r2, #1
 8005438:	409a      	lsls	r2, r3
 800543a:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <xTaskPriorityDisinherit+0x104>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4313      	orrs	r3, r2
 8005440:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <xTaskPriorityDisinherit+0x104>)
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a08      	ldr	r2, [pc, #32]	; (8005474 <xTaskPriorityDisinherit+0x100>)
 8005452:	441a      	add	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f7fe fb9b 	bl	8003b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005464:	697b      	ldr	r3, [r7, #20]
	}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20012cb0 	.word	0x20012cb0
 8005474:	20012cb4 	.word	0x20012cb4
 8005478:	20012e64 	.word	0x20012e64

0800547c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005486:	4b29      	ldr	r3, [pc, #164]	; (800552c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800548c:	4b28      	ldr	r3, [pc, #160]	; (8005530 <prvAddCurrentTaskToDelayedList+0xb4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe fbdc 	bl	8003c50 <uxListRemove>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800549e:	4b24      	ldr	r3, [pc, #144]	; (8005530 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	2201      	movs	r2, #1
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43da      	mvns	r2, r3
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4013      	ands	r3, r2
 80054b2:	4a20      	ldr	r2, [pc, #128]	; (8005534 <prvAddCurrentTaskToDelayedList+0xb8>)
 80054b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054bc:	d10a      	bne.n	80054d4 <prvAddCurrentTaskToDelayedList+0x58>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054c4:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3304      	adds	r3, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	481a      	ldr	r0, [pc, #104]	; (8005538 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054ce:	f7fe fb62 	bl	8003b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054d2:	e026      	b.n	8005522 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d209      	bcs.n	8005500 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ec:	4b13      	ldr	r3, [pc, #76]	; (800553c <prvAddCurrentTaskToDelayedList+0xc0>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fe fb70 	bl	8003bde <vListInsert>
}
 80054fe:	e010      	b.n	8005522 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3304      	adds	r3, #4
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7fe fb66 	bl	8003bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	429a      	cmp	r2, r3
 800551a:	d202      	bcs.n	8005522 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800551c:	4a09      	ldr	r2, [pc, #36]	; (8005544 <prvAddCurrentTaskToDelayedList+0xc8>)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6013      	str	r3, [r2, #0]
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20012e60 	.word	0x20012e60
 8005530:	20012cb0 	.word	0x20012cb0
 8005534:	20012e64 	.word	0x20012e64
 8005538:	20012e48 	.word	0x20012e48
 800553c:	20012e0c 	.word	0x20012e0c
 8005540:	20012e08 	.word	0x20012e08
 8005544:	20012e7c 	.word	0x20012e7c

08005548 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005552:	f000 fad1 	bl	8005af8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <xTimerCreateTimerTask+0x54>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <xTimerCreateTimerTask+0x58>)
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	2302      	movs	r3, #2
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800556c:	490d      	ldr	r1, [pc, #52]	; (80055a4 <xTimerCreateTimerTask+0x5c>)
 800556e:	480e      	ldr	r0, [pc, #56]	; (80055a8 <xTimerCreateTimerTask+0x60>)
 8005570:	f7ff f972 	bl	8004858 <xTaskCreate>
 8005574:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <xTimerCreateTimerTask+0x48>
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	e7fe      	b.n	800558e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005590:	687b      	ldr	r3, [r7, #4]
    }
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20012eb8 	.word	0x20012eb8
 80055a0:	20012ebc 	.word	0x20012ebc
 80055a4:	08006ee4 	.word	0x08006ee4
 80055a8:	080056dd 	.word	0x080056dd

080055ac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	; 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <xTimerGenericCommand+0x2c>
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	e7fe      	b.n	80055d6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <xTimerGenericCommand+0x94>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02a      	beq.n	8005636 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	dc18      	bgt.n	8005624 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055f2:	f7ff fea1 	bl	8005338 <xTaskGetSchedulerState>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d109      	bne.n	8005610 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055fc:	4b10      	ldr	r3, [pc, #64]	; (8005640 <xTimerGenericCommand+0x94>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	f107 0114 	add.w	r1, r7, #20
 8005604:	2300      	movs	r3, #0
 8005606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005608:	f7fe fc34 	bl	8003e74 <xQueueGenericSend>
 800560c:	6278      	str	r0, [r7, #36]	; 0x24
 800560e:	e012      	b.n	8005636 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <xTimerGenericCommand+0x94>)
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	f107 0114 	add.w	r1, r7, #20
 8005618:	2300      	movs	r3, #0
 800561a:	2200      	movs	r2, #0
 800561c:	f7fe fc2a 	bl	8003e74 <xQueueGenericSend>
 8005620:	6278      	str	r0, [r7, #36]	; 0x24
 8005622:	e008      	b.n	8005636 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <xTimerGenericCommand+0x94>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	f107 0114 	add.w	r1, r7, #20
 800562c:	2300      	movs	r3, #0
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	f7fe fd1a 	bl	8004068 <xQueueGenericSendFromISR>
 8005634:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005638:	4618      	mov	r0, r3
 800563a:	3728      	adds	r7, #40	; 0x28
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20012eb8 	.word	0x20012eb8

08005644 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af02      	add	r7, sp, #8
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564e:	4b22      	ldr	r3, [pc, #136]	; (80056d8 <prvProcessExpiredTimer+0x94>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3304      	adds	r3, #4
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe faf7 	bl	8003c50 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d021      	beq.n	80056b4 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	18d1      	adds	r1, r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	6978      	ldr	r0, [r7, #20]
 800567e:	f000 f8d1 	bl	8005824 <prvInsertTimerInActiveList>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01e      	beq.n	80056c6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005688:	2300      	movs	r3, #0
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2300      	movs	r3, #0
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	2100      	movs	r1, #0
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	f7ff ff8a 	bl	80055ac <xTimerGenericCommand>
 8005698:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d112      	bne.n	80056c6 <prvProcessExpiredTimer+0x82>
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	e7fe      	b.n	80056b2 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	6978      	ldr	r0, [r7, #20]
 80056cc:	4798      	blx	r3
    }
 80056ce:	bf00      	nop
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20012eb0 	.word	0x20012eb0

080056dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056e4:	f107 0308 	add.w	r3, r7, #8
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f857 	bl	800579c <prvGetNextExpireTime>
 80056ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4619      	mov	r1, r3
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f803 	bl	8005700 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80056fa:	f000 f8d5 	bl	80058a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056fe:	e7f1      	b.n	80056e4 <prvTimerTask+0x8>

08005700 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800570a:	f7ff fa63 	bl	8004bd4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800570e:	f107 0308 	add.w	r3, r7, #8
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f866 	bl	80057e4 <prvSampleTimeNow>
 8005718:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d130      	bne.n	8005782 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <prvProcessTimerOrBlockTask+0x3c>
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	429a      	cmp	r2, r3
 800572c:	d806      	bhi.n	800573c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800572e:	f7ff fa5f 	bl	8004bf0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ff85 	bl	8005644 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800573a:	e024      	b.n	8005786 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005742:	4b13      	ldr	r3, [pc, #76]	; (8005790 <prvProcessTimerOrBlockTask+0x90>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <prvProcessTimerOrBlockTask+0x50>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <prvProcessTimerOrBlockTask+0x52>
 8005750:	2300      	movs	r3, #0
 8005752:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005754:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <prvProcessTimerOrBlockTask+0x94>)
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	4619      	mov	r1, r3
 8005762:	f7fe ffd1 	bl	8004708 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005766:	f7ff fa43 	bl	8004bf0 <xTaskResumeAll>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <prvProcessTimerOrBlockTask+0x98>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
    }
 8005780:	e001      	b.n	8005786 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005782:	f7ff fa35 	bl	8004bf0 <xTaskResumeAll>
    }
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20012eb4 	.word	0x20012eb4
 8005794:	20012eb8 	.word	0x20012eb8
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <prvGetNextExpireTime+0x44>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <prvGetNextExpireTime+0x16>
 80057ae:	2201      	movs	r2, #1
 80057b0:	e000      	b.n	80057b4 <prvGetNextExpireTime+0x18>
 80057b2:	2200      	movs	r2, #0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <prvGetNextExpireTime+0x44>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e001      	b.n	80057d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80057d0:	68fb      	ldr	r3, [r7, #12]
    }
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20012eb0 	.word	0x20012eb0

080057e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80057ec:	f7ff fa9c 	bl	8004d28 <xTaskGetTickCount>
 80057f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <prvSampleTimeNow+0x3c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d205      	bcs.n	8005808 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80057fc:	f000 f918 	bl	8005a30 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e002      	b.n	800580e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800580e:	4a04      	ldr	r2, [pc, #16]	; (8005820 <prvSampleTimeNow+0x3c>)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005814:	68fb      	ldr	r3, [r7, #12]
    }
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20012ec0 	.word	0x20012ec0

08005824 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d812      	bhi.n	8005870 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	429a      	cmp	r2, r3
 8005856:	d302      	bcc.n	800585e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005858:	2301      	movs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	e01b      	b.n	8005896 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <prvInsertTimerInActiveList+0x7c>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3304      	adds	r3, #4
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f7fe f9b8 	bl	8003bde <vListInsert>
 800586e:	e012      	b.n	8005896 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d206      	bcs.n	8005886 <prvInsertTimerInActiveList+0x62>
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d302      	bcc.n	8005886 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005880:	2301      	movs	r3, #1
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	e007      	b.n	8005896 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005886:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <prvInsertTimerInActiveList+0x80>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3304      	adds	r3, #4
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f7fe f9a4 	bl	8003bde <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005896:	697b      	ldr	r3, [r7, #20]
    }
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20012eb4 	.word	0x20012eb4
 80058a4:	20012eb0 	.word	0x20012eb0

080058a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	; 0x30
 80058ac:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ae:	e0ac      	b.n	8005a0a <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f2c0 80a8 	blt.w	8005a08 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	3304      	adds	r3, #4
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe f9c1 	bl	8003c50 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff ff87 	bl	80057e4 <prvSampleTimeNow>
 80058d6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b09      	cmp	r3, #9
 80058dc:	f200 8095 	bhi.w	8005a0a <prvProcessReceivedCommands+0x162>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <prvProcessReceivedCommands+0x40>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005911 	.word	0x08005911
 80058f4:	08005983 	.word	0x08005983
 80058f8:	08005997 	.word	0x08005997
 80058fc:	080059df 	.word	0x080059df
 8005900:	08005911 	.word	0x08005911
 8005904:	08005911 	.word	0x08005911
 8005908:	08005983 	.word	0x08005983
 800590c:	08005997 	.word	0x08005997
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	18d1      	adds	r1, r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005930:	f7ff ff78 	bl	8005824 <prvInsertTimerInActiveList>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d067      	beq.n	8005a0a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005940:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d05c      	beq.n	8005a0a <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	441a      	add	r2, r3
 8005958:	2300      	movs	r3, #0
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	2300      	movs	r3, #0
 800595e:	2100      	movs	r1, #0
 8005960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005962:	f7ff fe23 	bl	80055ac <xTimerGenericCommand>
 8005966:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d14d      	bne.n	8005a0a <prvProcessReceivedCommands+0x162>
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e7fe      	b.n	8005980 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	b2da      	uxtb	r2, r3
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005994:	e039      	b.n	8005a0a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <prvProcessReceivedCommands+0x122>
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e7fe      	b.n	80059c8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	18d1      	adds	r1, r2, r3
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	6a3a      	ldr	r2, [r7, #32]
 80059d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059d8:	f7ff ff24 	bl	8005824 <prvInsertTimerInActiveList>
                        break;
 80059dc:	e015      	b.n	8005a0a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 80059ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059ee:	f7fd ff91 	bl	8003914 <vPortFree>
 80059f2:	e00a      	b.n	8005a0a <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005a06:	e000      	b.n	8005a0a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005a08:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <prvProcessReceivedCommands+0x184>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f107 0108 	add.w	r1, r7, #8
 8005a12:	2200      	movs	r2, #0
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe fc63 	bl	80042e0 <xQueueReceive>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f47f af47 	bne.w	80058b0 <prvProcessReceivedCommands+0x8>
        }
    }
 8005a22:	bf00      	nop
 8005a24:	3728      	adds	r7, #40	; 0x28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20012eb8 	.word	0x20012eb8

08005a30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a36:	e047      	b.n	8005ac8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a38:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a42:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe f8fd 	bl	8003c50 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02d      	beq.n	8005ac8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d90e      	bls.n	8005a9c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a8a:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fe f8a2 	bl	8003bde <vListInsert>
 8005a9a:	e015      	b.n	8005ac8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fd80 	bl	80055ac <xTimerGenericCommand>
 8005aac:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <prvSwitchTimerLists+0x98>
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	e7fe      	b.n	8005ac6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ac8:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1b2      	bne.n	8005a38 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005ad2:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <prvSwitchTimerLists+0xc4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a04      	ldr	r2, [pc, #16]	; (8005af0 <prvSwitchTimerLists+0xc0>)
 8005ade:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005ae0:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <prvSwitchTimerLists+0xc4>)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6013      	str	r3, [r2, #0]
    }
 8005ae6:	bf00      	nop
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20012eb0 	.word	0x20012eb0
 8005af4:	20012eb4 	.word	0x20012eb4

08005af8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005afc:	f000 f956 	bl	8005dac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005b00:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <prvCheckForValidListAndQueue+0x54>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d11d      	bne.n	8005b44 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005b08:	4811      	ldr	r0, [pc, #68]	; (8005b50 <prvCheckForValidListAndQueue+0x58>)
 8005b0a:	f7fe f817 	bl	8003b3c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005b0e:	4811      	ldr	r0, [pc, #68]	; (8005b54 <prvCheckForValidListAndQueue+0x5c>)
 8005b10:	f7fe f814 	bl	8003b3c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005b14:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <prvCheckForValidListAndQueue+0x60>)
 8005b16:	4a0e      	ldr	r2, [pc, #56]	; (8005b50 <prvCheckForValidListAndQueue+0x58>)
 8005b18:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005b1a:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <prvCheckForValidListAndQueue+0x64>)
 8005b1c:	4a0d      	ldr	r2, [pc, #52]	; (8005b54 <prvCheckForValidListAndQueue+0x5c>)
 8005b1e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005b20:	2200      	movs	r2, #0
 8005b22:	210c      	movs	r1, #12
 8005b24:	200a      	movs	r0, #10
 8005b26:	f7fe f925 	bl	8003d74 <xQueueGenericCreate>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <prvCheckForValidListAndQueue+0x54>)
 8005b2e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <prvCheckForValidListAndQueue+0x54>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b38:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <prvCheckForValidListAndQueue+0x54>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4908      	ldr	r1, [pc, #32]	; (8005b60 <prvCheckForValidListAndQueue+0x68>)
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe fdba 	bl	80046b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005b44:	f000 f960 	bl	8005e08 <vPortExitCritical>
    }
 8005b48:	bf00      	nop
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20012eb8 	.word	0x20012eb8
 8005b50:	20012e88 	.word	0x20012e88
 8005b54:	20012e9c 	.word	0x20012e9c
 8005b58:	20012eb0 	.word	0x20012eb0
 8005b5c:	20012eb4 	.word	0x20012eb4
 8005b60:	08006eec 	.word	0x08006eec

08005b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3b04      	subs	r3, #4
 8005b74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b04      	subs	r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f023 0201 	bic.w	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3b04      	subs	r3, #4
 8005b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b94:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <pxPortInitialiseStack+0x64>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3b14      	subs	r3, #20
 8005b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3b04      	subs	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f06f 0202 	mvn.w	r2, #2
 8005bb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3b20      	subs	r3, #32
 8005bb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bba:	68fb      	ldr	r3, [r7, #12]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	08005bcd 	.word	0x08005bcd

08005bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <prvTaskExitError+0x50>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bde:	d009      	beq.n	8005bf4 <prvTaskExitError+0x28>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e7fe      	b.n	8005bf2 <prvTaskExitError+0x26>
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c06:	bf00      	nop
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0fc      	beq.n	8005c08 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000010 	.word	0x20000010

08005c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <pxCurrentTCBConst2>)
 8005c22:	6819      	ldr	r1, [r3, #0]
 8005c24:	6808      	ldr	r0, [r1, #0]
 8005c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2a:	f380 8809 	msr	PSP, r0
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f04f 0000 	mov.w	r0, #0
 8005c36:	f380 8811 	msr	BASEPRI, r0
 8005c3a:	4770      	bx	lr
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst2>:
 8005c40:	20012cb0 	.word	0x20012cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c48:	4808      	ldr	r0, [pc, #32]	; (8005c6c <prvPortStartFirstTask+0x24>)
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	6800      	ldr	r0, [r0, #0]
 8005c4e:	f380 8808 	msr	MSP, r0
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f380 8814 	msr	CONTROL, r0
 8005c5a:	b662      	cpsie	i
 8005c5c:	b661      	cpsie	f
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	df00      	svc	0
 8005c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c6a:	bf00      	nop
 8005c6c:	e000ed08 	.word	0xe000ed08

08005c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c76:	4b44      	ldr	r3, [pc, #272]	; (8005d88 <xPortStartScheduler+0x118>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a44      	ldr	r2, [pc, #272]	; (8005d8c <xPortStartScheduler+0x11c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d109      	bne.n	8005c94 <xPortStartScheduler+0x24>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e7fe      	b.n	8005c92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c94:	4b3c      	ldr	r3, [pc, #240]	; (8005d88 <xPortStartScheduler+0x118>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a3d      	ldr	r2, [pc, #244]	; (8005d90 <xPortStartScheduler+0x120>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d109      	bne.n	8005cb2 <xPortStartScheduler+0x42>
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e7fe      	b.n	8005cb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cb2:	4b38      	ldr	r3, [pc, #224]	; (8005d94 <xPortStartScheduler+0x124>)
 8005cb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	22ff      	movs	r2, #255	; 0xff
 8005cc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <xPortStartScheduler+0x128>)
 8005cd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cda:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005cdc:	2207      	movs	r2, #7
 8005cde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ce0:	e009      	b.n	8005cf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005ce2:	4b2e      	ldr	r3, [pc, #184]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005cea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b80      	cmp	r3, #128	; 0x80
 8005d00:	d0ef      	beq.n	8005ce2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d02:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1c3 0307 	rsb	r3, r3, #7
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d009      	beq.n	8005d22 <xPortStartScheduler+0xb2>
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	e7fe      	b.n	8005d20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d22:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d40:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <xPortStartScheduler+0x130>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <xPortStartScheduler+0x130>)
 8005d46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d4c:	4b14      	ldr	r3, [pc, #80]	; (8005da0 <xPortStartScheduler+0x130>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <xPortStartScheduler+0x130>)
 8005d52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d58:	f000 f8d6 	bl	8005f08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <xPortStartScheduler+0x134>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d62:	f000 f8f5 	bl	8005f50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <xPortStartScheduler+0x138>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a0f      	ldr	r2, [pc, #60]	; (8005da8 <xPortStartScheduler+0x138>)
 8005d6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d72:	f7ff ff69 	bl	8005c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d76:	f7ff f89f 	bl	8004eb8 <vTaskSwitchContext>
	prvTaskExitError();
 8005d7a:	f7ff ff27 	bl	8005bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	e000ed00 	.word	0xe000ed00
 8005d8c:	410fc271 	.word	0x410fc271
 8005d90:	410fc270 	.word	0x410fc270
 8005d94:	e000e400 	.word	0xe000e400
 8005d98:	20012ec4 	.word	0x20012ec4
 8005d9c:	20012ec8 	.word	0x20012ec8
 8005da0:	e000ed20 	.word	0xe000ed20
 8005da4:	20000010 	.word	0x20000010
 8005da8:	e000ef34 	.word	0xe000ef34

08005dac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <vPortEnterCritical+0x54>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <vPortEnterCritical+0x54>)
 8005dcc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <vPortEnterCritical+0x54>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10e      	bne.n	8005df4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <vPortEnterCritical+0x58>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <vPortEnterCritical+0x48>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	603b      	str	r3, [r7, #0]
 8005df2:	e7fe      	b.n	8005df2 <vPortEnterCritical+0x46>
	}
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000010 	.word	0x20000010
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e0e:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <vPortExitCritical+0x4c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <vPortExitCritical+0x22>
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	e7fe      	b.n	8005e28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <vPortExitCritical+0x4c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <vPortExitCritical+0x4c>)
 8005e32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e34:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <vPortExitCritical+0x4c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <vPortExitCritical+0x3e>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000010 	.word	0x20000010
	...

08005e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e60:	f3ef 8009 	mrs	r0, PSP
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <pxCurrentTCBConst>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f01e 0f10 	tst.w	lr, #16
 8005e70:	bf08      	it	eq
 8005e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7a:	6010      	str	r0, [r2, #0]
 8005e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e84:	f380 8811 	msr	BASEPRI, r0
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f7ff f812 	bl	8004eb8 <vTaskSwitchContext>
 8005e94:	f04f 0000 	mov.w	r0, #0
 8005e98:	f380 8811 	msr	BASEPRI, r0
 8005e9c:	bc09      	pop	{r0, r3}
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	6808      	ldr	r0, [r1, #0]
 8005ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea6:	f01e 0f10 	tst.w	lr, #16
 8005eaa:	bf08      	it	eq
 8005eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005eb0:	f380 8809 	msr	PSP, r0
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w

08005ec0 <pxCurrentTCBConst>:
 8005ec0:	20012cb0 	.word	0x20012cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ee0:	f7fe ff32 	bl	8004d48 <xTaskIncrementTick>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eea:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <SysTick_Handler+0x3c>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <vPortSetupTimerInterrupt+0x34>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <vPortSetupTimerInterrupt+0x38>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <vPortSetupTimerInterrupt+0x3c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <vPortSetupTimerInterrupt+0x40>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <vPortSetupTimerInterrupt+0x44>)
 8005f26:	3b01      	subs	r3, #1
 8005f28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f2a:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <vPortSetupTimerInterrupt+0x34>)
 8005f2c:	2207      	movs	r2, #7
 8005f2e:	601a      	str	r2, [r3, #0]
}
 8005f30:	bf00      	nop
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	e000e010 	.word	0xe000e010
 8005f40:	e000e018 	.word	0xe000e018
 8005f44:	20000004 	.word	0x20000004
 8005f48:	10624dd3 	.word	0x10624dd3
 8005f4c:	e000e014 	.word	0xe000e014

08005f50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f60 <vPortEnableVFP+0x10>
 8005f54:	6801      	ldr	r1, [r0, #0]
 8005f56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f5a:	6001      	str	r1, [r0, #0]
 8005f5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f5e:	bf00      	nop
 8005f60:	e000ed88 	.word	0xe000ed88

08005f64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f6a:	f3ef 8305 	mrs	r3, IPSR
 8005f6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d913      	bls.n	8005f9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f76:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <vPortValidateInterruptPriority+0x6c>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f80:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <vPortValidateInterruptPriority+0x70>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	7afa      	ldrb	r2, [r7, #11]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d209      	bcs.n	8005f9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	e7fe      	b.n	8005f9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f9e:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <vPortValidateInterruptPriority+0x74>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <vPortValidateInterruptPriority+0x78>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d909      	bls.n	8005fc2 <vPortValidateInterruptPriority+0x5e>
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	e7fe      	b.n	8005fc0 <vPortValidateInterruptPriority+0x5c>
	}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	e000e3f0 	.word	0xe000e3f0
 8005fd4:	20012ec4 	.word	0x20012ec4
 8005fd8:	e000ed0c 	.word	0xe000ed0c
 8005fdc:	20012ec8 	.word	0x20012ec8

08005fe0 <__errno>:
 8005fe0:	4b01      	ldr	r3, [pc, #4]	; (8005fe8 <__errno+0x8>)
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000014 	.word	0x20000014

08005fec <__libc_init_array>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4e0d      	ldr	r6, [pc, #52]	; (8006024 <__libc_init_array+0x38>)
 8005ff0:	4c0d      	ldr	r4, [pc, #52]	; (8006028 <__libc_init_array+0x3c>)
 8005ff2:	1ba4      	subs	r4, r4, r6
 8005ff4:	10a4      	asrs	r4, r4, #2
 8005ff6:	2500      	movs	r5, #0
 8005ff8:	42a5      	cmp	r5, r4
 8005ffa:	d109      	bne.n	8006010 <__libc_init_array+0x24>
 8005ffc:	4e0b      	ldr	r6, [pc, #44]	; (800602c <__libc_init_array+0x40>)
 8005ffe:	4c0c      	ldr	r4, [pc, #48]	; (8006030 <__libc_init_array+0x44>)
 8006000:	f000 ff26 	bl	8006e50 <_init>
 8006004:	1ba4      	subs	r4, r4, r6
 8006006:	10a4      	asrs	r4, r4, #2
 8006008:	2500      	movs	r5, #0
 800600a:	42a5      	cmp	r5, r4
 800600c:	d105      	bne.n	800601a <__libc_init_array+0x2e>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006014:	4798      	blx	r3
 8006016:	3501      	adds	r5, #1
 8006018:	e7ee      	b.n	8005ff8 <__libc_init_array+0xc>
 800601a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800601e:	4798      	blx	r3
 8006020:	3501      	adds	r5, #1
 8006022:	e7f2      	b.n	800600a <__libc_init_array+0x1e>
 8006024:	08006fac 	.word	0x08006fac
 8006028:	08006fac 	.word	0x08006fac
 800602c:	08006fac 	.word	0x08006fac
 8006030:	08006fb0 	.word	0x08006fb0

08006034 <memcpy>:
 8006034:	b510      	push	{r4, lr}
 8006036:	1e43      	subs	r3, r0, #1
 8006038:	440a      	add	r2, r1
 800603a:	4291      	cmp	r1, r2
 800603c:	d100      	bne.n	8006040 <memcpy+0xc>
 800603e:	bd10      	pop	{r4, pc}
 8006040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006048:	e7f7      	b.n	800603a <memcpy+0x6>

0800604a <memset>:
 800604a:	4402      	add	r2, r0
 800604c:	4603      	mov	r3, r0
 800604e:	4293      	cmp	r3, r2
 8006050:	d100      	bne.n	8006054 <memset+0xa>
 8006052:	4770      	bx	lr
 8006054:	f803 1b01 	strb.w	r1, [r3], #1
 8006058:	e7f9      	b.n	800604e <memset+0x4>
	...

0800605c <iprintf>:
 800605c:	b40f      	push	{r0, r1, r2, r3}
 800605e:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <iprintf+0x2c>)
 8006060:	b513      	push	{r0, r1, r4, lr}
 8006062:	681c      	ldr	r4, [r3, #0]
 8006064:	b124      	cbz	r4, 8006070 <iprintf+0x14>
 8006066:	69a3      	ldr	r3, [r4, #24]
 8006068:	b913      	cbnz	r3, 8006070 <iprintf+0x14>
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f864 	bl	8006138 <__sinit>
 8006070:	ab05      	add	r3, sp, #20
 8006072:	9a04      	ldr	r2, [sp, #16]
 8006074:	68a1      	ldr	r1, [r4, #8]
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f96b 	bl	8006354 <_vfiprintf_r>
 800607e:	b002      	add	sp, #8
 8006080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr
 8006088:	20000014 	.word	0x20000014

0800608c <strncpy>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	3901      	subs	r1, #1
 8006090:	4604      	mov	r4, r0
 8006092:	b902      	cbnz	r2, 8006096 <strncpy+0xa>
 8006094:	bd70      	pop	{r4, r5, r6, pc}
 8006096:	4623      	mov	r3, r4
 8006098:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800609c:	f803 5b01 	strb.w	r5, [r3], #1
 80060a0:	1e56      	subs	r6, r2, #1
 80060a2:	b92d      	cbnz	r5, 80060b0 <strncpy+0x24>
 80060a4:	4414      	add	r4, r2
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	d0f4      	beq.n	8006094 <strncpy+0x8>
 80060aa:	f803 5b01 	strb.w	r5, [r3], #1
 80060ae:	e7fa      	b.n	80060a6 <strncpy+0x1a>
 80060b0:	461c      	mov	r4, r3
 80060b2:	4632      	mov	r2, r6
 80060b4:	e7ed      	b.n	8006092 <strncpy+0x6>
	...

080060b8 <std>:
 80060b8:	2300      	movs	r3, #0
 80060ba:	b510      	push	{r4, lr}
 80060bc:	4604      	mov	r4, r0
 80060be:	e9c0 3300 	strd	r3, r3, [r0]
 80060c2:	6083      	str	r3, [r0, #8]
 80060c4:	8181      	strh	r1, [r0, #12]
 80060c6:	6643      	str	r3, [r0, #100]	; 0x64
 80060c8:	81c2      	strh	r2, [r0, #14]
 80060ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ce:	6183      	str	r3, [r0, #24]
 80060d0:	4619      	mov	r1, r3
 80060d2:	2208      	movs	r2, #8
 80060d4:	305c      	adds	r0, #92	; 0x5c
 80060d6:	f7ff ffb8 	bl	800604a <memset>
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <std+0x38>)
 80060dc:	6263      	str	r3, [r4, #36]	; 0x24
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <std+0x3c>)
 80060e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <std+0x40>)
 80060e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <std+0x44>)
 80060e8:	6224      	str	r4, [r4, #32]
 80060ea:	6323      	str	r3, [r4, #48]	; 0x30
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	bf00      	nop
 80060f0:	080068b1 	.word	0x080068b1
 80060f4:	080068d3 	.word	0x080068d3
 80060f8:	0800690b 	.word	0x0800690b
 80060fc:	0800692f 	.word	0x0800692f

08006100 <_cleanup_r>:
 8006100:	4901      	ldr	r1, [pc, #4]	; (8006108 <_cleanup_r+0x8>)
 8006102:	f000 b885 	b.w	8006210 <_fwalk_reent>
 8006106:	bf00      	nop
 8006108:	08006c09 	.word	0x08006c09

0800610c <__sfmoreglue>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	1e4a      	subs	r2, r1, #1
 8006110:	2568      	movs	r5, #104	; 0x68
 8006112:	4355      	muls	r5, r2
 8006114:	460e      	mov	r6, r1
 8006116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800611a:	f000 f897 	bl	800624c <_malloc_r>
 800611e:	4604      	mov	r4, r0
 8006120:	b140      	cbz	r0, 8006134 <__sfmoreglue+0x28>
 8006122:	2100      	movs	r1, #0
 8006124:	e9c0 1600 	strd	r1, r6, [r0]
 8006128:	300c      	adds	r0, #12
 800612a:	60a0      	str	r0, [r4, #8]
 800612c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006130:	f7ff ff8b 	bl	800604a <memset>
 8006134:	4620      	mov	r0, r4
 8006136:	bd70      	pop	{r4, r5, r6, pc}

08006138 <__sinit>:
 8006138:	6983      	ldr	r3, [r0, #24]
 800613a:	b510      	push	{r4, lr}
 800613c:	4604      	mov	r4, r0
 800613e:	bb33      	cbnz	r3, 800618e <__sinit+0x56>
 8006140:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006144:	6503      	str	r3, [r0, #80]	; 0x50
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <__sinit+0x58>)
 8006148:	4a12      	ldr	r2, [pc, #72]	; (8006194 <__sinit+0x5c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6282      	str	r2, [r0, #40]	; 0x28
 800614e:	4298      	cmp	r0, r3
 8006150:	bf04      	itt	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	6183      	streq	r3, [r0, #24]
 8006156:	f000 f81f 	bl	8006198 <__sfp>
 800615a:	6060      	str	r0, [r4, #4]
 800615c:	4620      	mov	r0, r4
 800615e:	f000 f81b 	bl	8006198 <__sfp>
 8006162:	60a0      	str	r0, [r4, #8]
 8006164:	4620      	mov	r0, r4
 8006166:	f000 f817 	bl	8006198 <__sfp>
 800616a:	2200      	movs	r2, #0
 800616c:	60e0      	str	r0, [r4, #12]
 800616e:	2104      	movs	r1, #4
 8006170:	6860      	ldr	r0, [r4, #4]
 8006172:	f7ff ffa1 	bl	80060b8 <std>
 8006176:	2201      	movs	r2, #1
 8006178:	2109      	movs	r1, #9
 800617a:	68a0      	ldr	r0, [r4, #8]
 800617c:	f7ff ff9c 	bl	80060b8 <std>
 8006180:	2202      	movs	r2, #2
 8006182:	2112      	movs	r1, #18
 8006184:	68e0      	ldr	r0, [r4, #12]
 8006186:	f7ff ff97 	bl	80060b8 <std>
 800618a:	2301      	movs	r3, #1
 800618c:	61a3      	str	r3, [r4, #24]
 800618e:	bd10      	pop	{r4, pc}
 8006190:	08006f0c 	.word	0x08006f0c
 8006194:	08006101 	.word	0x08006101

08006198 <__sfp>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <__sfp+0x70>)
 800619c:	681e      	ldr	r6, [r3, #0]
 800619e:	69b3      	ldr	r3, [r6, #24]
 80061a0:	4607      	mov	r7, r0
 80061a2:	b913      	cbnz	r3, 80061aa <__sfp+0x12>
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff ffc7 	bl	8006138 <__sinit>
 80061aa:	3648      	adds	r6, #72	; 0x48
 80061ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	d503      	bpl.n	80061bc <__sfp+0x24>
 80061b4:	6833      	ldr	r3, [r6, #0]
 80061b6:	b133      	cbz	r3, 80061c6 <__sfp+0x2e>
 80061b8:	6836      	ldr	r6, [r6, #0]
 80061ba:	e7f7      	b.n	80061ac <__sfp+0x14>
 80061bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061c0:	b16d      	cbz	r5, 80061de <__sfp+0x46>
 80061c2:	3468      	adds	r4, #104	; 0x68
 80061c4:	e7f4      	b.n	80061b0 <__sfp+0x18>
 80061c6:	2104      	movs	r1, #4
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff ff9f 	bl	800610c <__sfmoreglue>
 80061ce:	6030      	str	r0, [r6, #0]
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d1f1      	bne.n	80061b8 <__sfp+0x20>
 80061d4:	230c      	movs	r3, #12
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	4604      	mov	r4, r0
 80061da:	4620      	mov	r0, r4
 80061dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061de:	4b0b      	ldr	r3, [pc, #44]	; (800620c <__sfp+0x74>)
 80061e0:	6665      	str	r5, [r4, #100]	; 0x64
 80061e2:	e9c4 5500 	strd	r5, r5, [r4]
 80061e6:	60a5      	str	r5, [r4, #8]
 80061e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80061ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80061f0:	2208      	movs	r2, #8
 80061f2:	4629      	mov	r1, r5
 80061f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061f8:	f7ff ff27 	bl	800604a <memset>
 80061fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006204:	e7e9      	b.n	80061da <__sfp+0x42>
 8006206:	bf00      	nop
 8006208:	08006f0c 	.word	0x08006f0c
 800620c:	ffff0001 	.word	0xffff0001

08006210 <_fwalk_reent>:
 8006210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006214:	4680      	mov	r8, r0
 8006216:	4689      	mov	r9, r1
 8006218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800621c:	2600      	movs	r6, #0
 800621e:	b914      	cbnz	r4, 8006226 <_fwalk_reent+0x16>
 8006220:	4630      	mov	r0, r6
 8006222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006226:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800622a:	3f01      	subs	r7, #1
 800622c:	d501      	bpl.n	8006232 <_fwalk_reent+0x22>
 800622e:	6824      	ldr	r4, [r4, #0]
 8006230:	e7f5      	b.n	800621e <_fwalk_reent+0xe>
 8006232:	89ab      	ldrh	r3, [r5, #12]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d907      	bls.n	8006248 <_fwalk_reent+0x38>
 8006238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800623c:	3301      	adds	r3, #1
 800623e:	d003      	beq.n	8006248 <_fwalk_reent+0x38>
 8006240:	4629      	mov	r1, r5
 8006242:	4640      	mov	r0, r8
 8006244:	47c8      	blx	r9
 8006246:	4306      	orrs	r6, r0
 8006248:	3568      	adds	r5, #104	; 0x68
 800624a:	e7ee      	b.n	800622a <_fwalk_reent+0x1a>

0800624c <_malloc_r>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	1ccd      	adds	r5, r1, #3
 8006250:	f025 0503 	bic.w	r5, r5, #3
 8006254:	3508      	adds	r5, #8
 8006256:	2d0c      	cmp	r5, #12
 8006258:	bf38      	it	cc
 800625a:	250c      	movcc	r5, #12
 800625c:	2d00      	cmp	r5, #0
 800625e:	4606      	mov	r6, r0
 8006260:	db01      	blt.n	8006266 <_malloc_r+0x1a>
 8006262:	42a9      	cmp	r1, r5
 8006264:	d903      	bls.n	800626e <_malloc_r+0x22>
 8006266:	230c      	movs	r3, #12
 8006268:	6033      	str	r3, [r6, #0]
 800626a:	2000      	movs	r0, #0
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	f000 fd6b 	bl	8006d48 <__malloc_lock>
 8006272:	4a21      	ldr	r2, [pc, #132]	; (80062f8 <_malloc_r+0xac>)
 8006274:	6814      	ldr	r4, [r2, #0]
 8006276:	4621      	mov	r1, r4
 8006278:	b991      	cbnz	r1, 80062a0 <_malloc_r+0x54>
 800627a:	4c20      	ldr	r4, [pc, #128]	; (80062fc <_malloc_r+0xb0>)
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	b91b      	cbnz	r3, 8006288 <_malloc_r+0x3c>
 8006280:	4630      	mov	r0, r6
 8006282:	f000 fb05 	bl	8006890 <_sbrk_r>
 8006286:	6020      	str	r0, [r4, #0]
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f000 fb00 	bl	8006890 <_sbrk_r>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d124      	bne.n	80062de <_malloc_r+0x92>
 8006294:	230c      	movs	r3, #12
 8006296:	6033      	str	r3, [r6, #0]
 8006298:	4630      	mov	r0, r6
 800629a:	f000 fd56 	bl	8006d4a <__malloc_unlock>
 800629e:	e7e4      	b.n	800626a <_malloc_r+0x1e>
 80062a0:	680b      	ldr	r3, [r1, #0]
 80062a2:	1b5b      	subs	r3, r3, r5
 80062a4:	d418      	bmi.n	80062d8 <_malloc_r+0x8c>
 80062a6:	2b0b      	cmp	r3, #11
 80062a8:	d90f      	bls.n	80062ca <_malloc_r+0x7e>
 80062aa:	600b      	str	r3, [r1, #0]
 80062ac:	50cd      	str	r5, [r1, r3]
 80062ae:	18cc      	adds	r4, r1, r3
 80062b0:	4630      	mov	r0, r6
 80062b2:	f000 fd4a 	bl	8006d4a <__malloc_unlock>
 80062b6:	f104 000b 	add.w	r0, r4, #11
 80062ba:	1d23      	adds	r3, r4, #4
 80062bc:	f020 0007 	bic.w	r0, r0, #7
 80062c0:	1ac3      	subs	r3, r0, r3
 80062c2:	d0d3      	beq.n	800626c <_malloc_r+0x20>
 80062c4:	425a      	negs	r2, r3
 80062c6:	50e2      	str	r2, [r4, r3]
 80062c8:	e7d0      	b.n	800626c <_malloc_r+0x20>
 80062ca:	428c      	cmp	r4, r1
 80062cc:	684b      	ldr	r3, [r1, #4]
 80062ce:	bf16      	itet	ne
 80062d0:	6063      	strne	r3, [r4, #4]
 80062d2:	6013      	streq	r3, [r2, #0]
 80062d4:	460c      	movne	r4, r1
 80062d6:	e7eb      	b.n	80062b0 <_malloc_r+0x64>
 80062d8:	460c      	mov	r4, r1
 80062da:	6849      	ldr	r1, [r1, #4]
 80062dc:	e7cc      	b.n	8006278 <_malloc_r+0x2c>
 80062de:	1cc4      	adds	r4, r0, #3
 80062e0:	f024 0403 	bic.w	r4, r4, #3
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d005      	beq.n	80062f4 <_malloc_r+0xa8>
 80062e8:	1a21      	subs	r1, r4, r0
 80062ea:	4630      	mov	r0, r6
 80062ec:	f000 fad0 	bl	8006890 <_sbrk_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d0cf      	beq.n	8006294 <_malloc_r+0x48>
 80062f4:	6025      	str	r5, [r4, #0]
 80062f6:	e7db      	b.n	80062b0 <_malloc_r+0x64>
 80062f8:	20012ecc 	.word	0x20012ecc
 80062fc:	20012ed0 	.word	0x20012ed0

08006300 <__sfputc_r>:
 8006300:	6893      	ldr	r3, [r2, #8]
 8006302:	3b01      	subs	r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	b410      	push	{r4}
 8006308:	6093      	str	r3, [r2, #8]
 800630a:	da08      	bge.n	800631e <__sfputc_r+0x1e>
 800630c:	6994      	ldr	r4, [r2, #24]
 800630e:	42a3      	cmp	r3, r4
 8006310:	db01      	blt.n	8006316 <__sfputc_r+0x16>
 8006312:	290a      	cmp	r1, #10
 8006314:	d103      	bne.n	800631e <__sfputc_r+0x1e>
 8006316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800631a:	f000 bb0d 	b.w	8006938 <__swbuf_r>
 800631e:	6813      	ldr	r3, [r2, #0]
 8006320:	1c58      	adds	r0, r3, #1
 8006322:	6010      	str	r0, [r2, #0]
 8006324:	7019      	strb	r1, [r3, #0]
 8006326:	4608      	mov	r0, r1
 8006328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800632c:	4770      	bx	lr

0800632e <__sfputs_r>:
 800632e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006330:	4606      	mov	r6, r0
 8006332:	460f      	mov	r7, r1
 8006334:	4614      	mov	r4, r2
 8006336:	18d5      	adds	r5, r2, r3
 8006338:	42ac      	cmp	r4, r5
 800633a:	d101      	bne.n	8006340 <__sfputs_r+0x12>
 800633c:	2000      	movs	r0, #0
 800633e:	e007      	b.n	8006350 <__sfputs_r+0x22>
 8006340:	463a      	mov	r2, r7
 8006342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006346:	4630      	mov	r0, r6
 8006348:	f7ff ffda 	bl	8006300 <__sfputc_r>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d1f3      	bne.n	8006338 <__sfputs_r+0xa>
 8006350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006354 <_vfiprintf_r>:
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	460c      	mov	r4, r1
 800635a:	b09d      	sub	sp, #116	; 0x74
 800635c:	4617      	mov	r7, r2
 800635e:	461d      	mov	r5, r3
 8006360:	4606      	mov	r6, r0
 8006362:	b118      	cbz	r0, 800636c <_vfiprintf_r+0x18>
 8006364:	6983      	ldr	r3, [r0, #24]
 8006366:	b90b      	cbnz	r3, 800636c <_vfiprintf_r+0x18>
 8006368:	f7ff fee6 	bl	8006138 <__sinit>
 800636c:	4b7c      	ldr	r3, [pc, #496]	; (8006560 <_vfiprintf_r+0x20c>)
 800636e:	429c      	cmp	r4, r3
 8006370:	d158      	bne.n	8006424 <_vfiprintf_r+0xd0>
 8006372:	6874      	ldr	r4, [r6, #4]
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	0718      	lsls	r0, r3, #28
 8006378:	d55e      	bpl.n	8006438 <_vfiprintf_r+0xe4>
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d05b      	beq.n	8006438 <_vfiprintf_r+0xe4>
 8006380:	2300      	movs	r3, #0
 8006382:	9309      	str	r3, [sp, #36]	; 0x24
 8006384:	2320      	movs	r3, #32
 8006386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800638a:	2330      	movs	r3, #48	; 0x30
 800638c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006390:	9503      	str	r5, [sp, #12]
 8006392:	f04f 0b01 	mov.w	fp, #1
 8006396:	46b8      	mov	r8, r7
 8006398:	4645      	mov	r5, r8
 800639a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800639e:	b10b      	cbz	r3, 80063a4 <_vfiprintf_r+0x50>
 80063a0:	2b25      	cmp	r3, #37	; 0x25
 80063a2:	d154      	bne.n	800644e <_vfiprintf_r+0xfa>
 80063a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80063a8:	d00b      	beq.n	80063c2 <_vfiprintf_r+0x6e>
 80063aa:	4653      	mov	r3, sl
 80063ac:	463a      	mov	r2, r7
 80063ae:	4621      	mov	r1, r4
 80063b0:	4630      	mov	r0, r6
 80063b2:	f7ff ffbc 	bl	800632e <__sfputs_r>
 80063b6:	3001      	adds	r0, #1
 80063b8:	f000 80c2 	beq.w	8006540 <_vfiprintf_r+0x1ec>
 80063bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063be:	4453      	add	r3, sl
 80063c0:	9309      	str	r3, [sp, #36]	; 0x24
 80063c2:	f898 3000 	ldrb.w	r3, [r8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 80ba 	beq.w	8006540 <_vfiprintf_r+0x1ec>
 80063cc:	2300      	movs	r3, #0
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	9307      	str	r3, [sp, #28]
 80063da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063de:	931a      	str	r3, [sp, #104]	; 0x68
 80063e0:	46a8      	mov	r8, r5
 80063e2:	2205      	movs	r2, #5
 80063e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80063e8:	485e      	ldr	r0, [pc, #376]	; (8006564 <_vfiprintf_r+0x210>)
 80063ea:	f7f9 fef1 	bl	80001d0 <memchr>
 80063ee:	9b04      	ldr	r3, [sp, #16]
 80063f0:	bb78      	cbnz	r0, 8006452 <_vfiprintf_r+0xfe>
 80063f2:	06d9      	lsls	r1, r3, #27
 80063f4:	bf44      	itt	mi
 80063f6:	2220      	movmi	r2, #32
 80063f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063fc:	071a      	lsls	r2, r3, #28
 80063fe:	bf44      	itt	mi
 8006400:	222b      	movmi	r2, #43	; 0x2b
 8006402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006406:	782a      	ldrb	r2, [r5, #0]
 8006408:	2a2a      	cmp	r2, #42	; 0x2a
 800640a:	d02a      	beq.n	8006462 <_vfiprintf_r+0x10e>
 800640c:	9a07      	ldr	r2, [sp, #28]
 800640e:	46a8      	mov	r8, r5
 8006410:	2000      	movs	r0, #0
 8006412:	250a      	movs	r5, #10
 8006414:	4641      	mov	r1, r8
 8006416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800641a:	3b30      	subs	r3, #48	; 0x30
 800641c:	2b09      	cmp	r3, #9
 800641e:	d969      	bls.n	80064f4 <_vfiprintf_r+0x1a0>
 8006420:	b360      	cbz	r0, 800647c <_vfiprintf_r+0x128>
 8006422:	e024      	b.n	800646e <_vfiprintf_r+0x11a>
 8006424:	4b50      	ldr	r3, [pc, #320]	; (8006568 <_vfiprintf_r+0x214>)
 8006426:	429c      	cmp	r4, r3
 8006428:	d101      	bne.n	800642e <_vfiprintf_r+0xda>
 800642a:	68b4      	ldr	r4, [r6, #8]
 800642c:	e7a2      	b.n	8006374 <_vfiprintf_r+0x20>
 800642e:	4b4f      	ldr	r3, [pc, #316]	; (800656c <_vfiprintf_r+0x218>)
 8006430:	429c      	cmp	r4, r3
 8006432:	bf08      	it	eq
 8006434:	68f4      	ldreq	r4, [r6, #12]
 8006436:	e79d      	b.n	8006374 <_vfiprintf_r+0x20>
 8006438:	4621      	mov	r1, r4
 800643a:	4630      	mov	r0, r6
 800643c:	f000 fae0 	bl	8006a00 <__swsetup_r>
 8006440:	2800      	cmp	r0, #0
 8006442:	d09d      	beq.n	8006380 <_vfiprintf_r+0x2c>
 8006444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006448:	b01d      	add	sp, #116	; 0x74
 800644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644e:	46a8      	mov	r8, r5
 8006450:	e7a2      	b.n	8006398 <_vfiprintf_r+0x44>
 8006452:	4a44      	ldr	r2, [pc, #272]	; (8006564 <_vfiprintf_r+0x210>)
 8006454:	1a80      	subs	r0, r0, r2
 8006456:	fa0b f000 	lsl.w	r0, fp, r0
 800645a:	4318      	orrs	r0, r3
 800645c:	9004      	str	r0, [sp, #16]
 800645e:	4645      	mov	r5, r8
 8006460:	e7be      	b.n	80063e0 <_vfiprintf_r+0x8c>
 8006462:	9a03      	ldr	r2, [sp, #12]
 8006464:	1d11      	adds	r1, r2, #4
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	9103      	str	r1, [sp, #12]
 800646a:	2a00      	cmp	r2, #0
 800646c:	db01      	blt.n	8006472 <_vfiprintf_r+0x11e>
 800646e:	9207      	str	r2, [sp, #28]
 8006470:	e004      	b.n	800647c <_vfiprintf_r+0x128>
 8006472:	4252      	negs	r2, r2
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	9207      	str	r2, [sp, #28]
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	f898 3000 	ldrb.w	r3, [r8]
 8006480:	2b2e      	cmp	r3, #46	; 0x2e
 8006482:	d10e      	bne.n	80064a2 <_vfiprintf_r+0x14e>
 8006484:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006488:	2b2a      	cmp	r3, #42	; 0x2a
 800648a:	d138      	bne.n	80064fe <_vfiprintf_r+0x1aa>
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	1d1a      	adds	r2, r3, #4
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	9203      	str	r2, [sp, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	bfb8      	it	lt
 8006498:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800649c:	f108 0802 	add.w	r8, r8, #2
 80064a0:	9305      	str	r3, [sp, #20]
 80064a2:	4d33      	ldr	r5, [pc, #204]	; (8006570 <_vfiprintf_r+0x21c>)
 80064a4:	f898 1000 	ldrb.w	r1, [r8]
 80064a8:	2203      	movs	r2, #3
 80064aa:	4628      	mov	r0, r5
 80064ac:	f7f9 fe90 	bl	80001d0 <memchr>
 80064b0:	b140      	cbz	r0, 80064c4 <_vfiprintf_r+0x170>
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	1b40      	subs	r0, r0, r5
 80064b6:	fa03 f000 	lsl.w	r0, r3, r0
 80064ba:	9b04      	ldr	r3, [sp, #16]
 80064bc:	4303      	orrs	r3, r0
 80064be:	f108 0801 	add.w	r8, r8, #1
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	f898 1000 	ldrb.w	r1, [r8]
 80064c8:	482a      	ldr	r0, [pc, #168]	; (8006574 <_vfiprintf_r+0x220>)
 80064ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064ce:	2206      	movs	r2, #6
 80064d0:	f108 0701 	add.w	r7, r8, #1
 80064d4:	f7f9 fe7c 	bl	80001d0 <memchr>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d037      	beq.n	800654c <_vfiprintf_r+0x1f8>
 80064dc:	4b26      	ldr	r3, [pc, #152]	; (8006578 <_vfiprintf_r+0x224>)
 80064de:	bb1b      	cbnz	r3, 8006528 <_vfiprintf_r+0x1d4>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	3307      	adds	r3, #7
 80064e4:	f023 0307 	bic.w	r3, r3, #7
 80064e8:	3308      	adds	r3, #8
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ee:	444b      	add	r3, r9
 80064f0:	9309      	str	r3, [sp, #36]	; 0x24
 80064f2:	e750      	b.n	8006396 <_vfiprintf_r+0x42>
 80064f4:	fb05 3202 	mla	r2, r5, r2, r3
 80064f8:	2001      	movs	r0, #1
 80064fa:	4688      	mov	r8, r1
 80064fc:	e78a      	b.n	8006414 <_vfiprintf_r+0xc0>
 80064fe:	2300      	movs	r3, #0
 8006500:	f108 0801 	add.w	r8, r8, #1
 8006504:	9305      	str	r3, [sp, #20]
 8006506:	4619      	mov	r1, r3
 8006508:	250a      	movs	r5, #10
 800650a:	4640      	mov	r0, r8
 800650c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006510:	3a30      	subs	r2, #48	; 0x30
 8006512:	2a09      	cmp	r2, #9
 8006514:	d903      	bls.n	800651e <_vfiprintf_r+0x1ca>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0c3      	beq.n	80064a2 <_vfiprintf_r+0x14e>
 800651a:	9105      	str	r1, [sp, #20]
 800651c:	e7c1      	b.n	80064a2 <_vfiprintf_r+0x14e>
 800651e:	fb05 2101 	mla	r1, r5, r1, r2
 8006522:	2301      	movs	r3, #1
 8006524:	4680      	mov	r8, r0
 8006526:	e7f0      	b.n	800650a <_vfiprintf_r+0x1b6>
 8006528:	ab03      	add	r3, sp, #12
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	4622      	mov	r2, r4
 800652e:	4b13      	ldr	r3, [pc, #76]	; (800657c <_vfiprintf_r+0x228>)
 8006530:	a904      	add	r1, sp, #16
 8006532:	4630      	mov	r0, r6
 8006534:	f3af 8000 	nop.w
 8006538:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800653c:	4681      	mov	r9, r0
 800653e:	d1d5      	bne.n	80064ec <_vfiprintf_r+0x198>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	065b      	lsls	r3, r3, #25
 8006544:	f53f af7e 	bmi.w	8006444 <_vfiprintf_r+0xf0>
 8006548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800654a:	e77d      	b.n	8006448 <_vfiprintf_r+0xf4>
 800654c:	ab03      	add	r3, sp, #12
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	4622      	mov	r2, r4
 8006552:	4b0a      	ldr	r3, [pc, #40]	; (800657c <_vfiprintf_r+0x228>)
 8006554:	a904      	add	r1, sp, #16
 8006556:	4630      	mov	r0, r6
 8006558:	f000 f888 	bl	800666c <_printf_i>
 800655c:	e7ec      	b.n	8006538 <_vfiprintf_r+0x1e4>
 800655e:	bf00      	nop
 8006560:	08006f30 	.word	0x08006f30
 8006564:	08006f70 	.word	0x08006f70
 8006568:	08006f50 	.word	0x08006f50
 800656c:	08006f10 	.word	0x08006f10
 8006570:	08006f76 	.word	0x08006f76
 8006574:	08006f7a 	.word	0x08006f7a
 8006578:	00000000 	.word	0x00000000
 800657c:	0800632f 	.word	0x0800632f

08006580 <_printf_common>:
 8006580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	4691      	mov	r9, r2
 8006586:	461f      	mov	r7, r3
 8006588:	688a      	ldr	r2, [r1, #8]
 800658a:	690b      	ldr	r3, [r1, #16]
 800658c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006590:	4293      	cmp	r3, r2
 8006592:	bfb8      	it	lt
 8006594:	4613      	movlt	r3, r2
 8006596:	f8c9 3000 	str.w	r3, [r9]
 800659a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800659e:	4606      	mov	r6, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	b112      	cbz	r2, 80065aa <_printf_common+0x2a>
 80065a4:	3301      	adds	r3, #1
 80065a6:	f8c9 3000 	str.w	r3, [r9]
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	0699      	lsls	r1, r3, #26
 80065ae:	bf42      	ittt	mi
 80065b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065b4:	3302      	addmi	r3, #2
 80065b6:	f8c9 3000 	strmi.w	r3, [r9]
 80065ba:	6825      	ldr	r5, [r4, #0]
 80065bc:	f015 0506 	ands.w	r5, r5, #6
 80065c0:	d107      	bne.n	80065d2 <_printf_common+0x52>
 80065c2:	f104 0a19 	add.w	sl, r4, #25
 80065c6:	68e3      	ldr	r3, [r4, #12]
 80065c8:	f8d9 2000 	ldr.w	r2, [r9]
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	42ab      	cmp	r3, r5
 80065d0:	dc28      	bgt.n	8006624 <_printf_common+0xa4>
 80065d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	3300      	adds	r3, #0
 80065da:	bf18      	it	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	0692      	lsls	r2, r2, #26
 80065e0:	d42d      	bmi.n	800663e <_printf_common+0xbe>
 80065e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e6:	4639      	mov	r1, r7
 80065e8:	4630      	mov	r0, r6
 80065ea:	47c0      	blx	r8
 80065ec:	3001      	adds	r0, #1
 80065ee:	d020      	beq.n	8006632 <_printf_common+0xb2>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	68e5      	ldr	r5, [r4, #12]
 80065f4:	f8d9 2000 	ldr.w	r2, [r9]
 80065f8:	f003 0306 	and.w	r3, r3, #6
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	bf08      	it	eq
 8006600:	1aad      	subeq	r5, r5, r2
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	6922      	ldr	r2, [r4, #16]
 8006606:	bf0c      	ite	eq
 8006608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800660c:	2500      	movne	r5, #0
 800660e:	4293      	cmp	r3, r2
 8006610:	bfc4      	itt	gt
 8006612:	1a9b      	subgt	r3, r3, r2
 8006614:	18ed      	addgt	r5, r5, r3
 8006616:	f04f 0900 	mov.w	r9, #0
 800661a:	341a      	adds	r4, #26
 800661c:	454d      	cmp	r5, r9
 800661e:	d11a      	bne.n	8006656 <_printf_common+0xd6>
 8006620:	2000      	movs	r0, #0
 8006622:	e008      	b.n	8006636 <_printf_common+0xb6>
 8006624:	2301      	movs	r3, #1
 8006626:	4652      	mov	r2, sl
 8006628:	4639      	mov	r1, r7
 800662a:	4630      	mov	r0, r6
 800662c:	47c0      	blx	r8
 800662e:	3001      	adds	r0, #1
 8006630:	d103      	bne.n	800663a <_printf_common+0xba>
 8006632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	3501      	adds	r5, #1
 800663c:	e7c3      	b.n	80065c6 <_printf_common+0x46>
 800663e:	18e1      	adds	r1, r4, r3
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	2030      	movs	r0, #48	; 0x30
 8006644:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006648:	4422      	add	r2, r4
 800664a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800664e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006652:	3302      	adds	r3, #2
 8006654:	e7c5      	b.n	80065e2 <_printf_common+0x62>
 8006656:	2301      	movs	r3, #1
 8006658:	4622      	mov	r2, r4
 800665a:	4639      	mov	r1, r7
 800665c:	4630      	mov	r0, r6
 800665e:	47c0      	blx	r8
 8006660:	3001      	adds	r0, #1
 8006662:	d0e6      	beq.n	8006632 <_printf_common+0xb2>
 8006664:	f109 0901 	add.w	r9, r9, #1
 8006668:	e7d8      	b.n	800661c <_printf_common+0x9c>
	...

0800666c <_printf_i>:
 800666c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006670:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006674:	460c      	mov	r4, r1
 8006676:	7e09      	ldrb	r1, [r1, #24]
 8006678:	b085      	sub	sp, #20
 800667a:	296e      	cmp	r1, #110	; 0x6e
 800667c:	4617      	mov	r7, r2
 800667e:	4606      	mov	r6, r0
 8006680:	4698      	mov	r8, r3
 8006682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006684:	f000 80b3 	beq.w	80067ee <_printf_i+0x182>
 8006688:	d822      	bhi.n	80066d0 <_printf_i+0x64>
 800668a:	2963      	cmp	r1, #99	; 0x63
 800668c:	d036      	beq.n	80066fc <_printf_i+0x90>
 800668e:	d80a      	bhi.n	80066a6 <_printf_i+0x3a>
 8006690:	2900      	cmp	r1, #0
 8006692:	f000 80b9 	beq.w	8006808 <_printf_i+0x19c>
 8006696:	2958      	cmp	r1, #88	; 0x58
 8006698:	f000 8083 	beq.w	80067a2 <_printf_i+0x136>
 800669c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80066a4:	e032      	b.n	800670c <_printf_i+0xa0>
 80066a6:	2964      	cmp	r1, #100	; 0x64
 80066a8:	d001      	beq.n	80066ae <_printf_i+0x42>
 80066aa:	2969      	cmp	r1, #105	; 0x69
 80066ac:	d1f6      	bne.n	800669c <_printf_i+0x30>
 80066ae:	6820      	ldr	r0, [r4, #0]
 80066b0:	6813      	ldr	r3, [r2, #0]
 80066b2:	0605      	lsls	r5, r0, #24
 80066b4:	f103 0104 	add.w	r1, r3, #4
 80066b8:	d52a      	bpl.n	8006710 <_printf_i+0xa4>
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6011      	str	r1, [r2, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	da03      	bge.n	80066ca <_printf_i+0x5e>
 80066c2:	222d      	movs	r2, #45	; 0x2d
 80066c4:	425b      	negs	r3, r3
 80066c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066ca:	486f      	ldr	r0, [pc, #444]	; (8006888 <_printf_i+0x21c>)
 80066cc:	220a      	movs	r2, #10
 80066ce:	e039      	b.n	8006744 <_printf_i+0xd8>
 80066d0:	2973      	cmp	r1, #115	; 0x73
 80066d2:	f000 809d 	beq.w	8006810 <_printf_i+0x1a4>
 80066d6:	d808      	bhi.n	80066ea <_printf_i+0x7e>
 80066d8:	296f      	cmp	r1, #111	; 0x6f
 80066da:	d020      	beq.n	800671e <_printf_i+0xb2>
 80066dc:	2970      	cmp	r1, #112	; 0x70
 80066de:	d1dd      	bne.n	800669c <_printf_i+0x30>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	f043 0320 	orr.w	r3, r3, #32
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	e003      	b.n	80066f2 <_printf_i+0x86>
 80066ea:	2975      	cmp	r1, #117	; 0x75
 80066ec:	d017      	beq.n	800671e <_printf_i+0xb2>
 80066ee:	2978      	cmp	r1, #120	; 0x78
 80066f0:	d1d4      	bne.n	800669c <_printf_i+0x30>
 80066f2:	2378      	movs	r3, #120	; 0x78
 80066f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066f8:	4864      	ldr	r0, [pc, #400]	; (800688c <_printf_i+0x220>)
 80066fa:	e055      	b.n	80067a8 <_printf_i+0x13c>
 80066fc:	6813      	ldr	r3, [r2, #0]
 80066fe:	1d19      	adds	r1, r3, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6011      	str	r1, [r2, #0]
 8006704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800670c:	2301      	movs	r3, #1
 800670e:	e08c      	b.n	800682a <_printf_i+0x1be>
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6011      	str	r1, [r2, #0]
 8006714:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006718:	bf18      	it	ne
 800671a:	b21b      	sxthne	r3, r3
 800671c:	e7cf      	b.n	80066be <_printf_i+0x52>
 800671e:	6813      	ldr	r3, [r2, #0]
 8006720:	6825      	ldr	r5, [r4, #0]
 8006722:	1d18      	adds	r0, r3, #4
 8006724:	6010      	str	r0, [r2, #0]
 8006726:	0628      	lsls	r0, r5, #24
 8006728:	d501      	bpl.n	800672e <_printf_i+0xc2>
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	e002      	b.n	8006734 <_printf_i+0xc8>
 800672e:	0668      	lsls	r0, r5, #25
 8006730:	d5fb      	bpl.n	800672a <_printf_i+0xbe>
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	4854      	ldr	r0, [pc, #336]	; (8006888 <_printf_i+0x21c>)
 8006736:	296f      	cmp	r1, #111	; 0x6f
 8006738:	bf14      	ite	ne
 800673a:	220a      	movne	r2, #10
 800673c:	2208      	moveq	r2, #8
 800673e:	2100      	movs	r1, #0
 8006740:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006744:	6865      	ldr	r5, [r4, #4]
 8006746:	60a5      	str	r5, [r4, #8]
 8006748:	2d00      	cmp	r5, #0
 800674a:	f2c0 8095 	blt.w	8006878 <_printf_i+0x20c>
 800674e:	6821      	ldr	r1, [r4, #0]
 8006750:	f021 0104 	bic.w	r1, r1, #4
 8006754:	6021      	str	r1, [r4, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d13d      	bne.n	80067d6 <_printf_i+0x16a>
 800675a:	2d00      	cmp	r5, #0
 800675c:	f040 808e 	bne.w	800687c <_printf_i+0x210>
 8006760:	4665      	mov	r5, ip
 8006762:	2a08      	cmp	r2, #8
 8006764:	d10b      	bne.n	800677e <_printf_i+0x112>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	07db      	lsls	r3, r3, #31
 800676a:	d508      	bpl.n	800677e <_printf_i+0x112>
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	6862      	ldr	r2, [r4, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	bfde      	ittt	le
 8006774:	2330      	movle	r3, #48	; 0x30
 8006776:	f805 3c01 	strble.w	r3, [r5, #-1]
 800677a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800677e:	ebac 0305 	sub.w	r3, ip, r5
 8006782:	6123      	str	r3, [r4, #16]
 8006784:	f8cd 8000 	str.w	r8, [sp]
 8006788:	463b      	mov	r3, r7
 800678a:	aa03      	add	r2, sp, #12
 800678c:	4621      	mov	r1, r4
 800678e:	4630      	mov	r0, r6
 8006790:	f7ff fef6 	bl	8006580 <_printf_common>
 8006794:	3001      	adds	r0, #1
 8006796:	d14d      	bne.n	8006834 <_printf_i+0x1c8>
 8006798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800679c:	b005      	add	sp, #20
 800679e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067a2:	4839      	ldr	r0, [pc, #228]	; (8006888 <_printf_i+0x21c>)
 80067a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80067a8:	6813      	ldr	r3, [r2, #0]
 80067aa:	6821      	ldr	r1, [r4, #0]
 80067ac:	1d1d      	adds	r5, r3, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6015      	str	r5, [r2, #0]
 80067b2:	060a      	lsls	r2, r1, #24
 80067b4:	d50b      	bpl.n	80067ce <_printf_i+0x162>
 80067b6:	07ca      	lsls	r2, r1, #31
 80067b8:	bf44      	itt	mi
 80067ba:	f041 0120 	orrmi.w	r1, r1, #32
 80067be:	6021      	strmi	r1, [r4, #0]
 80067c0:	b91b      	cbnz	r3, 80067ca <_printf_i+0x15e>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	f022 0220 	bic.w	r2, r2, #32
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	2210      	movs	r2, #16
 80067cc:	e7b7      	b.n	800673e <_printf_i+0xd2>
 80067ce:	064d      	lsls	r5, r1, #25
 80067d0:	bf48      	it	mi
 80067d2:	b29b      	uxthmi	r3, r3
 80067d4:	e7ef      	b.n	80067b6 <_printf_i+0x14a>
 80067d6:	4665      	mov	r5, ip
 80067d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80067dc:	fb02 3311 	mls	r3, r2, r1, r3
 80067e0:	5cc3      	ldrb	r3, [r0, r3]
 80067e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80067e6:	460b      	mov	r3, r1
 80067e8:	2900      	cmp	r1, #0
 80067ea:	d1f5      	bne.n	80067d8 <_printf_i+0x16c>
 80067ec:	e7b9      	b.n	8006762 <_printf_i+0xf6>
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	6825      	ldr	r5, [r4, #0]
 80067f2:	6961      	ldr	r1, [r4, #20]
 80067f4:	1d18      	adds	r0, r3, #4
 80067f6:	6010      	str	r0, [r2, #0]
 80067f8:	0628      	lsls	r0, r5, #24
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	d501      	bpl.n	8006802 <_printf_i+0x196>
 80067fe:	6019      	str	r1, [r3, #0]
 8006800:	e002      	b.n	8006808 <_printf_i+0x19c>
 8006802:	066a      	lsls	r2, r5, #25
 8006804:	d5fb      	bpl.n	80067fe <_printf_i+0x192>
 8006806:	8019      	strh	r1, [r3, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	4665      	mov	r5, ip
 800680e:	e7b9      	b.n	8006784 <_printf_i+0x118>
 8006810:	6813      	ldr	r3, [r2, #0]
 8006812:	1d19      	adds	r1, r3, #4
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	681d      	ldr	r5, [r3, #0]
 8006818:	6862      	ldr	r2, [r4, #4]
 800681a:	2100      	movs	r1, #0
 800681c:	4628      	mov	r0, r5
 800681e:	f7f9 fcd7 	bl	80001d0 <memchr>
 8006822:	b108      	cbz	r0, 8006828 <_printf_i+0x1bc>
 8006824:	1b40      	subs	r0, r0, r5
 8006826:	6060      	str	r0, [r4, #4]
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	2300      	movs	r3, #0
 800682e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006832:	e7a7      	b.n	8006784 <_printf_i+0x118>
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	462a      	mov	r2, r5
 8006838:	4639      	mov	r1, r7
 800683a:	4630      	mov	r0, r6
 800683c:	47c0      	blx	r8
 800683e:	3001      	adds	r0, #1
 8006840:	d0aa      	beq.n	8006798 <_printf_i+0x12c>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	079b      	lsls	r3, r3, #30
 8006846:	d413      	bmi.n	8006870 <_printf_i+0x204>
 8006848:	68e0      	ldr	r0, [r4, #12]
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	4298      	cmp	r0, r3
 800684e:	bfb8      	it	lt
 8006850:	4618      	movlt	r0, r3
 8006852:	e7a3      	b.n	800679c <_printf_i+0x130>
 8006854:	2301      	movs	r3, #1
 8006856:	464a      	mov	r2, r9
 8006858:	4639      	mov	r1, r7
 800685a:	4630      	mov	r0, r6
 800685c:	47c0      	blx	r8
 800685e:	3001      	adds	r0, #1
 8006860:	d09a      	beq.n	8006798 <_printf_i+0x12c>
 8006862:	3501      	adds	r5, #1
 8006864:	68e3      	ldr	r3, [r4, #12]
 8006866:	9a03      	ldr	r2, [sp, #12]
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	42ab      	cmp	r3, r5
 800686c:	dcf2      	bgt.n	8006854 <_printf_i+0x1e8>
 800686e:	e7eb      	b.n	8006848 <_printf_i+0x1dc>
 8006870:	2500      	movs	r5, #0
 8006872:	f104 0919 	add.w	r9, r4, #25
 8006876:	e7f5      	b.n	8006864 <_printf_i+0x1f8>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1ac      	bne.n	80067d6 <_printf_i+0x16a>
 800687c:	7803      	ldrb	r3, [r0, #0]
 800687e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006882:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006886:	e76c      	b.n	8006762 <_printf_i+0xf6>
 8006888:	08006f81 	.word	0x08006f81
 800688c:	08006f92 	.word	0x08006f92

08006890 <_sbrk_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4c06      	ldr	r4, [pc, #24]	; (80068ac <_sbrk_r+0x1c>)
 8006894:	2300      	movs	r3, #0
 8006896:	4605      	mov	r5, r0
 8006898:	4608      	mov	r0, r1
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	f7fa fb2a 	bl	8000ef4 <_sbrk>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_sbrk_r+0x1a>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_sbrk_r+0x1a>
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	20012ff4 	.word	0x20012ff4

080068b0 <__sread>:
 80068b0:	b510      	push	{r4, lr}
 80068b2:	460c      	mov	r4, r1
 80068b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b8:	f000 fa96 	bl	8006de8 <_read_r>
 80068bc:	2800      	cmp	r0, #0
 80068be:	bfab      	itete	ge
 80068c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068c2:	89a3      	ldrhlt	r3, [r4, #12]
 80068c4:	181b      	addge	r3, r3, r0
 80068c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068ca:	bfac      	ite	ge
 80068cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ce:	81a3      	strhlt	r3, [r4, #12]
 80068d0:	bd10      	pop	{r4, pc}

080068d2 <__swrite>:
 80068d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d6:	461f      	mov	r7, r3
 80068d8:	898b      	ldrh	r3, [r1, #12]
 80068da:	05db      	lsls	r3, r3, #23
 80068dc:	4605      	mov	r5, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	4616      	mov	r6, r2
 80068e2:	d505      	bpl.n	80068f0 <__swrite+0x1e>
 80068e4:	2302      	movs	r3, #2
 80068e6:	2200      	movs	r2, #0
 80068e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ec:	f000 f9b6 	bl	8006c5c <_lseek_r>
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	4628      	mov	r0, r5
 8006902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006906:	f000 b869 	b.w	80069dc <_write_r>

0800690a <__sseek>:
 800690a:	b510      	push	{r4, lr}
 800690c:	460c      	mov	r4, r1
 800690e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006912:	f000 f9a3 	bl	8006c5c <_lseek_r>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	bf15      	itete	ne
 800691c:	6560      	strne	r0, [r4, #84]	; 0x54
 800691e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006926:	81a3      	strheq	r3, [r4, #12]
 8006928:	bf18      	it	ne
 800692a:	81a3      	strhne	r3, [r4, #12]
 800692c:	bd10      	pop	{r4, pc}

0800692e <__sclose>:
 800692e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006932:	f000 b8d3 	b.w	8006adc <_close_r>
	...

08006938 <__swbuf_r>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	460e      	mov	r6, r1
 800693c:	4614      	mov	r4, r2
 800693e:	4605      	mov	r5, r0
 8006940:	b118      	cbz	r0, 800694a <__swbuf_r+0x12>
 8006942:	6983      	ldr	r3, [r0, #24]
 8006944:	b90b      	cbnz	r3, 800694a <__swbuf_r+0x12>
 8006946:	f7ff fbf7 	bl	8006138 <__sinit>
 800694a:	4b21      	ldr	r3, [pc, #132]	; (80069d0 <__swbuf_r+0x98>)
 800694c:	429c      	cmp	r4, r3
 800694e:	d12a      	bne.n	80069a6 <__swbuf_r+0x6e>
 8006950:	686c      	ldr	r4, [r5, #4]
 8006952:	69a3      	ldr	r3, [r4, #24]
 8006954:	60a3      	str	r3, [r4, #8]
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	071a      	lsls	r2, r3, #28
 800695a:	d52e      	bpl.n	80069ba <__swbuf_r+0x82>
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	b363      	cbz	r3, 80069ba <__swbuf_r+0x82>
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	6820      	ldr	r0, [r4, #0]
 8006964:	1ac0      	subs	r0, r0, r3
 8006966:	6963      	ldr	r3, [r4, #20]
 8006968:	b2f6      	uxtb	r6, r6
 800696a:	4283      	cmp	r3, r0
 800696c:	4637      	mov	r7, r6
 800696e:	dc04      	bgt.n	800697a <__swbuf_r+0x42>
 8006970:	4621      	mov	r1, r4
 8006972:	4628      	mov	r0, r5
 8006974:	f000 f948 	bl	8006c08 <_fflush_r>
 8006978:	bb28      	cbnz	r0, 80069c6 <__swbuf_r+0x8e>
 800697a:	68a3      	ldr	r3, [r4, #8]
 800697c:	3b01      	subs	r3, #1
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	6022      	str	r2, [r4, #0]
 8006986:	701e      	strb	r6, [r3, #0]
 8006988:	6963      	ldr	r3, [r4, #20]
 800698a:	3001      	adds	r0, #1
 800698c:	4283      	cmp	r3, r0
 800698e:	d004      	beq.n	800699a <__swbuf_r+0x62>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	07db      	lsls	r3, r3, #31
 8006994:	d519      	bpl.n	80069ca <__swbuf_r+0x92>
 8006996:	2e0a      	cmp	r6, #10
 8006998:	d117      	bne.n	80069ca <__swbuf_r+0x92>
 800699a:	4621      	mov	r1, r4
 800699c:	4628      	mov	r0, r5
 800699e:	f000 f933 	bl	8006c08 <_fflush_r>
 80069a2:	b190      	cbz	r0, 80069ca <__swbuf_r+0x92>
 80069a4:	e00f      	b.n	80069c6 <__swbuf_r+0x8e>
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <__swbuf_r+0x9c>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d101      	bne.n	80069b0 <__swbuf_r+0x78>
 80069ac:	68ac      	ldr	r4, [r5, #8]
 80069ae:	e7d0      	b.n	8006952 <__swbuf_r+0x1a>
 80069b0:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <__swbuf_r+0xa0>)
 80069b2:	429c      	cmp	r4, r3
 80069b4:	bf08      	it	eq
 80069b6:	68ec      	ldreq	r4, [r5, #12]
 80069b8:	e7cb      	b.n	8006952 <__swbuf_r+0x1a>
 80069ba:	4621      	mov	r1, r4
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 f81f 	bl	8006a00 <__swsetup_r>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d0cc      	beq.n	8006960 <__swbuf_r+0x28>
 80069c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80069ca:	4638      	mov	r0, r7
 80069cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ce:	bf00      	nop
 80069d0:	08006f30 	.word	0x08006f30
 80069d4:	08006f50 	.word	0x08006f50
 80069d8:	08006f10 	.word	0x08006f10

080069dc <_write_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4c07      	ldr	r4, [pc, #28]	; (80069fc <_write_r+0x20>)
 80069e0:	4605      	mov	r5, r0
 80069e2:	4608      	mov	r0, r1
 80069e4:	4611      	mov	r1, r2
 80069e6:	2200      	movs	r2, #0
 80069e8:	6022      	str	r2, [r4, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f7fa fa31 	bl	8000e52 <_write>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_write_r+0x1e>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_write_r+0x1e>
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	20012ff4 	.word	0x20012ff4

08006a00 <__swsetup_r>:
 8006a00:	4b32      	ldr	r3, [pc, #200]	; (8006acc <__swsetup_r+0xcc>)
 8006a02:	b570      	push	{r4, r5, r6, lr}
 8006a04:	681d      	ldr	r5, [r3, #0]
 8006a06:	4606      	mov	r6, r0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	b125      	cbz	r5, 8006a16 <__swsetup_r+0x16>
 8006a0c:	69ab      	ldr	r3, [r5, #24]
 8006a0e:	b913      	cbnz	r3, 8006a16 <__swsetup_r+0x16>
 8006a10:	4628      	mov	r0, r5
 8006a12:	f7ff fb91 	bl	8006138 <__sinit>
 8006a16:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <__swsetup_r+0xd0>)
 8006a18:	429c      	cmp	r4, r3
 8006a1a:	d10f      	bne.n	8006a3c <__swsetup_r+0x3c>
 8006a1c:	686c      	ldr	r4, [r5, #4]
 8006a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	0715      	lsls	r5, r2, #28
 8006a26:	d42c      	bmi.n	8006a82 <__swsetup_r+0x82>
 8006a28:	06d0      	lsls	r0, r2, #27
 8006a2a:	d411      	bmi.n	8006a50 <__swsetup_r+0x50>
 8006a2c:	2209      	movs	r2, #9
 8006a2e:	6032      	str	r2, [r6, #0]
 8006a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a3a:	e03e      	b.n	8006aba <__swsetup_r+0xba>
 8006a3c:	4b25      	ldr	r3, [pc, #148]	; (8006ad4 <__swsetup_r+0xd4>)
 8006a3e:	429c      	cmp	r4, r3
 8006a40:	d101      	bne.n	8006a46 <__swsetup_r+0x46>
 8006a42:	68ac      	ldr	r4, [r5, #8]
 8006a44:	e7eb      	b.n	8006a1e <__swsetup_r+0x1e>
 8006a46:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <__swsetup_r+0xd8>)
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	bf08      	it	eq
 8006a4c:	68ec      	ldreq	r4, [r5, #12]
 8006a4e:	e7e6      	b.n	8006a1e <__swsetup_r+0x1e>
 8006a50:	0751      	lsls	r1, r2, #29
 8006a52:	d512      	bpl.n	8006a7a <__swsetup_r+0x7a>
 8006a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a56:	b141      	cbz	r1, 8006a6a <__swsetup_r+0x6a>
 8006a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	d002      	beq.n	8006a66 <__swsetup_r+0x66>
 8006a60:	4630      	mov	r0, r6
 8006a62:	f000 f973 	bl	8006d4c <_free_r>
 8006a66:	2300      	movs	r3, #0
 8006a68:	6363      	str	r3, [r4, #52]	; 0x34
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	2300      	movs	r3, #0
 8006a74:	6063      	str	r3, [r4, #4]
 8006a76:	6923      	ldr	r3, [r4, #16]
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	f043 0308 	orr.w	r3, r3, #8
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	b94b      	cbnz	r3, 8006a9a <__swsetup_r+0x9a>
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a90:	d003      	beq.n	8006a9a <__swsetup_r+0x9a>
 8006a92:	4621      	mov	r1, r4
 8006a94:	4630      	mov	r0, r6
 8006a96:	f000 f917 	bl	8006cc8 <__smakebuf_r>
 8006a9a:	89a2      	ldrh	r2, [r4, #12]
 8006a9c:	f012 0301 	ands.w	r3, r2, #1
 8006aa0:	d00c      	beq.n	8006abc <__swsetup_r+0xbc>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60a3      	str	r3, [r4, #8]
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	425b      	negs	r3, r3
 8006aaa:	61a3      	str	r3, [r4, #24]
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	b953      	cbnz	r3, 8006ac6 <__swsetup_r+0xc6>
 8006ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ab8:	d1ba      	bne.n	8006a30 <__swsetup_r+0x30>
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	0792      	lsls	r2, r2, #30
 8006abe:	bf58      	it	pl
 8006ac0:	6963      	ldrpl	r3, [r4, #20]
 8006ac2:	60a3      	str	r3, [r4, #8]
 8006ac4:	e7f2      	b.n	8006aac <__swsetup_r+0xac>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e7f7      	b.n	8006aba <__swsetup_r+0xba>
 8006aca:	bf00      	nop
 8006acc:	20000014 	.word	0x20000014
 8006ad0:	08006f30 	.word	0x08006f30
 8006ad4:	08006f50 	.word	0x08006f50
 8006ad8:	08006f10 	.word	0x08006f10

08006adc <_close_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4c06      	ldr	r4, [pc, #24]	; (8006af8 <_close_r+0x1c>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	f7fa f9cf 	bl	8000e8a <_close>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_close_r+0x1a>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_close_r+0x1a>
 8006af4:	602b      	str	r3, [r5, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20012ff4 	.word	0x20012ff4

08006afc <__sflush_r>:
 8006afc:	898a      	ldrh	r2, [r1, #12]
 8006afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b02:	4605      	mov	r5, r0
 8006b04:	0710      	lsls	r0, r2, #28
 8006b06:	460c      	mov	r4, r1
 8006b08:	d458      	bmi.n	8006bbc <__sflush_r+0xc0>
 8006b0a:	684b      	ldr	r3, [r1, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dc05      	bgt.n	8006b1c <__sflush_r+0x20>
 8006b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dc02      	bgt.n	8006b1c <__sflush_r+0x20>
 8006b16:	2000      	movs	r0, #0
 8006b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b1e:	2e00      	cmp	r6, #0
 8006b20:	d0f9      	beq.n	8006b16 <__sflush_r+0x1a>
 8006b22:	2300      	movs	r3, #0
 8006b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b28:	682f      	ldr	r7, [r5, #0]
 8006b2a:	6a21      	ldr	r1, [r4, #32]
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	d032      	beq.n	8006b96 <__sflush_r+0x9a>
 8006b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	075a      	lsls	r2, r3, #29
 8006b36:	d505      	bpl.n	8006b44 <__sflush_r+0x48>
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	1ac0      	subs	r0, r0, r3
 8006b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b3e:	b10b      	cbz	r3, 8006b44 <__sflush_r+0x48>
 8006b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b42:	1ac0      	subs	r0, r0, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	4602      	mov	r2, r0
 8006b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b4a:	6a21      	ldr	r1, [r4, #32]
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b0      	blx	r6
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	d106      	bne.n	8006b64 <__sflush_r+0x68>
 8006b56:	6829      	ldr	r1, [r5, #0]
 8006b58:	291d      	cmp	r1, #29
 8006b5a:	d848      	bhi.n	8006bee <__sflush_r+0xf2>
 8006b5c:	4a29      	ldr	r2, [pc, #164]	; (8006c04 <__sflush_r+0x108>)
 8006b5e:	40ca      	lsrs	r2, r1
 8006b60:	07d6      	lsls	r6, r2, #31
 8006b62:	d544      	bpl.n	8006bee <__sflush_r+0xf2>
 8006b64:	2200      	movs	r2, #0
 8006b66:	6062      	str	r2, [r4, #4]
 8006b68:	04d9      	lsls	r1, r3, #19
 8006b6a:	6922      	ldr	r2, [r4, #16]
 8006b6c:	6022      	str	r2, [r4, #0]
 8006b6e:	d504      	bpl.n	8006b7a <__sflush_r+0x7e>
 8006b70:	1c42      	adds	r2, r0, #1
 8006b72:	d101      	bne.n	8006b78 <__sflush_r+0x7c>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b903      	cbnz	r3, 8006b7a <__sflush_r+0x7e>
 8006b78:	6560      	str	r0, [r4, #84]	; 0x54
 8006b7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b7c:	602f      	str	r7, [r5, #0]
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	d0c9      	beq.n	8006b16 <__sflush_r+0x1a>
 8006b82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b86:	4299      	cmp	r1, r3
 8006b88:	d002      	beq.n	8006b90 <__sflush_r+0x94>
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 f8de 	bl	8006d4c <_free_r>
 8006b90:	2000      	movs	r0, #0
 8006b92:	6360      	str	r0, [r4, #52]	; 0x34
 8006b94:	e7c0      	b.n	8006b18 <__sflush_r+0x1c>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b0      	blx	r6
 8006b9c:	1c41      	adds	r1, r0, #1
 8006b9e:	d1c8      	bne.n	8006b32 <__sflush_r+0x36>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0c5      	beq.n	8006b32 <__sflush_r+0x36>
 8006ba6:	2b1d      	cmp	r3, #29
 8006ba8:	d001      	beq.n	8006bae <__sflush_r+0xb2>
 8006baa:	2b16      	cmp	r3, #22
 8006bac:	d101      	bne.n	8006bb2 <__sflush_r+0xb6>
 8006bae:	602f      	str	r7, [r5, #0]
 8006bb0:	e7b1      	b.n	8006b16 <__sflush_r+0x1a>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	e7ad      	b.n	8006b18 <__sflush_r+0x1c>
 8006bbc:	690f      	ldr	r7, [r1, #16]
 8006bbe:	2f00      	cmp	r7, #0
 8006bc0:	d0a9      	beq.n	8006b16 <__sflush_r+0x1a>
 8006bc2:	0793      	lsls	r3, r2, #30
 8006bc4:	680e      	ldr	r6, [r1, #0]
 8006bc6:	bf08      	it	eq
 8006bc8:	694b      	ldreq	r3, [r1, #20]
 8006bca:	600f      	str	r7, [r1, #0]
 8006bcc:	bf18      	it	ne
 8006bce:	2300      	movne	r3, #0
 8006bd0:	eba6 0807 	sub.w	r8, r6, r7
 8006bd4:	608b      	str	r3, [r1, #8]
 8006bd6:	f1b8 0f00 	cmp.w	r8, #0
 8006bda:	dd9c      	ble.n	8006b16 <__sflush_r+0x1a>
 8006bdc:	4643      	mov	r3, r8
 8006bde:	463a      	mov	r2, r7
 8006be0:	6a21      	ldr	r1, [r4, #32]
 8006be2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006be4:	4628      	mov	r0, r5
 8006be6:	47b0      	blx	r6
 8006be8:	2800      	cmp	r0, #0
 8006bea:	dc06      	bgt.n	8006bfa <__sflush_r+0xfe>
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf8:	e78e      	b.n	8006b18 <__sflush_r+0x1c>
 8006bfa:	4407      	add	r7, r0
 8006bfc:	eba8 0800 	sub.w	r8, r8, r0
 8006c00:	e7e9      	b.n	8006bd6 <__sflush_r+0xda>
 8006c02:	bf00      	nop
 8006c04:	20400001 	.word	0x20400001

08006c08 <_fflush_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	690b      	ldr	r3, [r1, #16]
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	b1db      	cbz	r3, 8006c4a <_fflush_r+0x42>
 8006c12:	b118      	cbz	r0, 8006c1c <_fflush_r+0x14>
 8006c14:	6983      	ldr	r3, [r0, #24]
 8006c16:	b90b      	cbnz	r3, 8006c1c <_fflush_r+0x14>
 8006c18:	f7ff fa8e 	bl	8006138 <__sinit>
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <_fflush_r+0x48>)
 8006c1e:	429c      	cmp	r4, r3
 8006c20:	d109      	bne.n	8006c36 <_fflush_r+0x2e>
 8006c22:	686c      	ldr	r4, [r5, #4]
 8006c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c28:	b17b      	cbz	r3, 8006c4a <_fflush_r+0x42>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c32:	f7ff bf63 	b.w	8006afc <__sflush_r>
 8006c36:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <_fflush_r+0x4c>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	d101      	bne.n	8006c40 <_fflush_r+0x38>
 8006c3c:	68ac      	ldr	r4, [r5, #8]
 8006c3e:	e7f1      	b.n	8006c24 <_fflush_r+0x1c>
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <_fflush_r+0x50>)
 8006c42:	429c      	cmp	r4, r3
 8006c44:	bf08      	it	eq
 8006c46:	68ec      	ldreq	r4, [r5, #12]
 8006c48:	e7ec      	b.n	8006c24 <_fflush_r+0x1c>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	bd38      	pop	{r3, r4, r5, pc}
 8006c4e:	bf00      	nop
 8006c50:	08006f30 	.word	0x08006f30
 8006c54:	08006f50 	.word	0x08006f50
 8006c58:	08006f10 	.word	0x08006f10

08006c5c <_lseek_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4c07      	ldr	r4, [pc, #28]	; (8006c7c <_lseek_r+0x20>)
 8006c60:	4605      	mov	r5, r0
 8006c62:	4608      	mov	r0, r1
 8006c64:	4611      	mov	r1, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	6022      	str	r2, [r4, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7fa f934 	bl	8000ed8 <_lseek>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_lseek_r+0x1e>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_lseek_r+0x1e>
 8006c78:	602b      	str	r3, [r5, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	20012ff4 	.word	0x20012ff4

08006c80 <__swhatbuf_r>:
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	460e      	mov	r6, r1
 8006c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	b096      	sub	sp, #88	; 0x58
 8006c8c:	4614      	mov	r4, r2
 8006c8e:	461d      	mov	r5, r3
 8006c90:	da07      	bge.n	8006ca2 <__swhatbuf_r+0x22>
 8006c92:	2300      	movs	r3, #0
 8006c94:	602b      	str	r3, [r5, #0]
 8006c96:	89b3      	ldrh	r3, [r6, #12]
 8006c98:	061a      	lsls	r2, r3, #24
 8006c9a:	d410      	bmi.n	8006cbe <__swhatbuf_r+0x3e>
 8006c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca0:	e00e      	b.n	8006cc0 <__swhatbuf_r+0x40>
 8006ca2:	466a      	mov	r2, sp
 8006ca4:	f000 f8b2 	bl	8006e0c <_fstat_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	dbf2      	blt.n	8006c92 <__swhatbuf_r+0x12>
 8006cac:	9a01      	ldr	r2, [sp, #4]
 8006cae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cb6:	425a      	negs	r2, r3
 8006cb8:	415a      	adcs	r2, r3
 8006cba:	602a      	str	r2, [r5, #0]
 8006cbc:	e7ee      	b.n	8006c9c <__swhatbuf_r+0x1c>
 8006cbe:	2340      	movs	r3, #64	; 0x40
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	b016      	add	sp, #88	; 0x58
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}

08006cc8 <__smakebuf_r>:
 8006cc8:	898b      	ldrh	r3, [r1, #12]
 8006cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ccc:	079d      	lsls	r5, r3, #30
 8006cce:	4606      	mov	r6, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	d507      	bpl.n	8006ce4 <__smakebuf_r+0x1c>
 8006cd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	2301      	movs	r3, #1
 8006cde:	6163      	str	r3, [r4, #20]
 8006ce0:	b002      	add	sp, #8
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	ab01      	add	r3, sp, #4
 8006ce6:	466a      	mov	r2, sp
 8006ce8:	f7ff ffca 	bl	8006c80 <__swhatbuf_r>
 8006cec:	9900      	ldr	r1, [sp, #0]
 8006cee:	4605      	mov	r5, r0
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7ff faab 	bl	800624c <_malloc_r>
 8006cf6:	b948      	cbnz	r0, 8006d0c <__smakebuf_r+0x44>
 8006cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cfc:	059a      	lsls	r2, r3, #22
 8006cfe:	d4ef      	bmi.n	8006ce0 <__smakebuf_r+0x18>
 8006d00:	f023 0303 	bic.w	r3, r3, #3
 8006d04:	f043 0302 	orr.w	r3, r3, #2
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	e7e3      	b.n	8006cd4 <__smakebuf_r+0xc>
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <__smakebuf_r+0x7c>)
 8006d0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	6020      	str	r0, [r4, #0]
 8006d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	9b00      	ldr	r3, [sp, #0]
 8006d1c:	6163      	str	r3, [r4, #20]
 8006d1e:	9b01      	ldr	r3, [sp, #4]
 8006d20:	6120      	str	r0, [r4, #16]
 8006d22:	b15b      	cbz	r3, 8006d3c <__smakebuf_r+0x74>
 8006d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f000 f881 	bl	8006e30 <_isatty_r>
 8006d2e:	b128      	cbz	r0, 8006d3c <__smakebuf_r+0x74>
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	f023 0303 	bic.w	r3, r3, #3
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	81a3      	strh	r3, [r4, #12]
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	431d      	orrs	r5, r3
 8006d40:	81a5      	strh	r5, [r4, #12]
 8006d42:	e7cd      	b.n	8006ce0 <__smakebuf_r+0x18>
 8006d44:	08006101 	.word	0x08006101

08006d48 <__malloc_lock>:
 8006d48:	4770      	bx	lr

08006d4a <__malloc_unlock>:
 8006d4a:	4770      	bx	lr

08006d4c <_free_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4605      	mov	r5, r0
 8006d50:	2900      	cmp	r1, #0
 8006d52:	d045      	beq.n	8006de0 <_free_r+0x94>
 8006d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d58:	1f0c      	subs	r4, r1, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bfb8      	it	lt
 8006d5e:	18e4      	addlt	r4, r4, r3
 8006d60:	f7ff fff2 	bl	8006d48 <__malloc_lock>
 8006d64:	4a1f      	ldr	r2, [pc, #124]	; (8006de4 <_free_r+0x98>)
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	4610      	mov	r0, r2
 8006d6a:	b933      	cbnz	r3, 8006d7a <_free_r+0x2e>
 8006d6c:	6063      	str	r3, [r4, #4]
 8006d6e:	6014      	str	r4, [r2, #0]
 8006d70:	4628      	mov	r0, r5
 8006d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d76:	f7ff bfe8 	b.w	8006d4a <__malloc_unlock>
 8006d7a:	42a3      	cmp	r3, r4
 8006d7c:	d90c      	bls.n	8006d98 <_free_r+0x4c>
 8006d7e:	6821      	ldr	r1, [r4, #0]
 8006d80:	1862      	adds	r2, r4, r1
 8006d82:	4293      	cmp	r3, r2
 8006d84:	bf04      	itt	eq
 8006d86:	681a      	ldreq	r2, [r3, #0]
 8006d88:	685b      	ldreq	r3, [r3, #4]
 8006d8a:	6063      	str	r3, [r4, #4]
 8006d8c:	bf04      	itt	eq
 8006d8e:	1852      	addeq	r2, r2, r1
 8006d90:	6022      	streq	r2, [r4, #0]
 8006d92:	6004      	str	r4, [r0, #0]
 8006d94:	e7ec      	b.n	8006d70 <_free_r+0x24>
 8006d96:	4613      	mov	r3, r2
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	b10a      	cbz	r2, 8006da0 <_free_r+0x54>
 8006d9c:	42a2      	cmp	r2, r4
 8006d9e:	d9fa      	bls.n	8006d96 <_free_r+0x4a>
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	1858      	adds	r0, r3, r1
 8006da4:	42a0      	cmp	r0, r4
 8006da6:	d10b      	bne.n	8006dc0 <_free_r+0x74>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	4401      	add	r1, r0
 8006dac:	1858      	adds	r0, r3, r1
 8006dae:	4282      	cmp	r2, r0
 8006db0:	6019      	str	r1, [r3, #0]
 8006db2:	d1dd      	bne.n	8006d70 <_free_r+0x24>
 8006db4:	6810      	ldr	r0, [r2, #0]
 8006db6:	6852      	ldr	r2, [r2, #4]
 8006db8:	605a      	str	r2, [r3, #4]
 8006dba:	4401      	add	r1, r0
 8006dbc:	6019      	str	r1, [r3, #0]
 8006dbe:	e7d7      	b.n	8006d70 <_free_r+0x24>
 8006dc0:	d902      	bls.n	8006dc8 <_free_r+0x7c>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	e7d3      	b.n	8006d70 <_free_r+0x24>
 8006dc8:	6820      	ldr	r0, [r4, #0]
 8006dca:	1821      	adds	r1, r4, r0
 8006dcc:	428a      	cmp	r2, r1
 8006dce:	bf04      	itt	eq
 8006dd0:	6811      	ldreq	r1, [r2, #0]
 8006dd2:	6852      	ldreq	r2, [r2, #4]
 8006dd4:	6062      	str	r2, [r4, #4]
 8006dd6:	bf04      	itt	eq
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	605c      	str	r4, [r3, #4]
 8006dde:	e7c7      	b.n	8006d70 <_free_r+0x24>
 8006de0:	bd38      	pop	{r3, r4, r5, pc}
 8006de2:	bf00      	nop
 8006de4:	20012ecc 	.word	0x20012ecc

08006de8 <_read_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	4c07      	ldr	r4, [pc, #28]	; (8006e08 <_read_r+0x20>)
 8006dec:	4605      	mov	r5, r0
 8006dee:	4608      	mov	r0, r1
 8006df0:	4611      	mov	r1, r2
 8006df2:	2200      	movs	r2, #0
 8006df4:	6022      	str	r2, [r4, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f7fa f80e 	bl	8000e18 <_read>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_read_r+0x1e>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_read_r+0x1e>
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	20012ff4 	.word	0x20012ff4

08006e0c <_fstat_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4c07      	ldr	r4, [pc, #28]	; (8006e2c <_fstat_r+0x20>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	4605      	mov	r5, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	f7fa f842 	bl	8000ea2 <_fstat>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d102      	bne.n	8006e28 <_fstat_r+0x1c>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	b103      	cbz	r3, 8006e28 <_fstat_r+0x1c>
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	bd38      	pop	{r3, r4, r5, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20012ff4 	.word	0x20012ff4

08006e30 <_isatty_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4c06      	ldr	r4, [pc, #24]	; (8006e4c <_isatty_r+0x1c>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4605      	mov	r5, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	f7fa f841 	bl	8000ec2 <_isatty>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_isatty_r+0x1a>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_isatty_r+0x1a>
 8006e48:	602b      	str	r3, [r5, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	20012ff4 	.word	0x20012ff4

08006e50 <_init>:
 8006e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e52:	bf00      	nop
 8006e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e56:	bc08      	pop	{r3}
 8006e58:	469e      	mov	lr, r3
 8006e5a:	4770      	bx	lr

08006e5c <_fini>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	bf00      	nop
 8006e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e62:	bc08      	pop	{r3}
 8006e64:	469e      	mov	lr, r3
 8006e66:	4770      	bx	lr
