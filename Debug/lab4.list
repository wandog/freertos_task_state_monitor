
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d64  08005d64  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d6c  08005d6c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d6c  08005d6c  00015d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016f4  2000007c  08005df0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001770  08005df0  00021770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001485a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bd7  00000000  00000000  00034906  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  000374e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d8  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c0e  00000000  00000000  000397d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d793  00000000  00000000  0005d3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4039  00000000  00000000  0006ab79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ebb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005284  00000000  00000000  0013ec30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b4c 	.word	0x08005b4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005b4c 	.word	0x08005b4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f002 fcc0 	bl	8002f06 <HAL_UART_Transmit>

  return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20001690 	.word	0x20001690

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fd5d 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 800059e:	f000 f865 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  	MX_GPIO_Init();
 80005a2:	f000 f921 	bl	80007e8 <MX_GPIO_Init>
  	MX_SPI1_Init();
 80005a6:	f000 f8bf 	bl	8000728 <MX_SPI1_Init>
  	MX_UART4_Init();
 80005aa:	f000 f8f3 	bl	8000794 <MX_UART4_Init>
  	initMEMS();
 80005ae:	f000 f9db 	bl	8000968 <initMEMS>
  /* USER CODE BEGIN 2 */

  	printf("**********************************\n\r");
 80005b2:	4821      	ldr	r0, [pc, #132]	; (8000638 <main+0xa4>)
 80005b4:	f004 fbde 	bl	8004d74 <iprintf>


  	xTaskCreate(RedLEDTask,"RedLEDTask",100,NULL,0,NULL);
 80005b8:	2300      	movs	r3, #0
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2300      	movs	r3, #0
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	2264      	movs	r2, #100	; 0x64
 80005c4:	491d      	ldr	r1, [pc, #116]	; (800063c <main+0xa8>)
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <main+0xac>)
 80005c8:	f003 fbd4 	bl	8003d74 <xTaskCreate>
	xTaskCreate(Task1,"Task1",50,NULL,0,NULL);
 80005cc:	2300      	movs	r3, #0
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2300      	movs	r3, #0
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	2232      	movs	r2, #50	; 0x32
 80005d8:	491a      	ldr	r1, [pc, #104]	; (8000644 <main+0xb0>)
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0xb4>)
 80005dc:	f003 fbca 	bl	8003d74 <xTaskCreate>
	xTaskCreate(Task2,"Task2",30,NULL,0,NULL);
 80005e0:	2300      	movs	r3, #0
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	2300      	movs	r3, #0
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	221e      	movs	r2, #30
 80005ec:	4917      	ldr	r1, [pc, #92]	; (800064c <main+0xb8>)
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <main+0xbc>)
 80005f0:	f003 fbc0 	bl	8003d74 <xTaskCreate>
	xTaskCreate(GreenLEDTask,"GreenLEDTask",130,NULL,0,NULL);
 80005f4:	2300      	movs	r3, #0
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2300      	movs	r3, #0
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	2282      	movs	r2, #130	; 0x82
 8000600:	4914      	ldr	r1, [pc, #80]	; (8000654 <main+0xc0>)
 8000602:	4815      	ldr	r0, [pc, #84]	; (8000658 <main+0xc4>)
 8000604:	f003 fbb6 	bl	8003d74 <xTaskCreate>
	xTaskCreate(Task3,"Task3",40,NULL,0,NULL);
 8000608:	2300      	movs	r3, #0
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2300      	movs	r3, #0
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	4911      	ldr	r1, [pc, #68]	; (800065c <main+0xc8>)
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <main+0xcc>)
 8000618:	f003 fbac 	bl	8003d74 <xTaskCreate>
	xTaskCreate(PrintTask,"PrintTask",130,NULL,0,NULL);
 800061c:	2300      	movs	r3, #0
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2300      	movs	r3, #0
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	2282      	movs	r2, #130	; 0x82
 8000628:	490e      	ldr	r1, [pc, #56]	; (8000664 <main+0xd0>)
 800062a:	480f      	ldr	r0, [pc, #60]	; (8000668 <main+0xd4>)
 800062c:	f003 fba2 	bl	8003d74 <xTaskCreate>
//	gg=xQueueCreate(1,1);
	vTaskStartScheduler();
 8000630:	f003 fdae 	bl	8004190 <vTaskStartScheduler>
	/* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8000634:	e7fe      	b.n	8000634 <main+0xa0>
 8000636:	bf00      	nop
 8000638:	08005b64 	.word	0x08005b64
 800063c:	08005b8c 	.word	0x08005b8c
 8000640:	080008e5 	.word	0x080008e5
 8000644:	08005b98 	.word	0x08005b98
 8000648:	08000925 	.word	0x08000925
 800064c:	08005ba0 	.word	0x08005ba0
 8000650:	08000935 	.word	0x08000935
 8000654:	08005ba8 	.word	0x08005ba8
 8000658:	08000905 	.word	0x08000905
 800065c:	08005bb8 	.word	0x08005bb8
 8000660:	08000945 	.word	0x08000945
 8000664:	08005bc0 	.word	0x08005bc0
 8000668:	08000955 	.word	0x08000955

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fb72 	bl	8004d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xb4>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xb4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <SystemClock_Config+0xb8>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <SystemClock_Config+0xb8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 ffc5 	bl	800166c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006e8:	f000 fa96 	bl	8000c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fa20 	bl	8001b4c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000712:	f000 fa81 	bl	8000c18 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI1_Init+0x64>)
 800077a:	f001 fbe5 	bl	8001f48 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 fa48 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200016d0 	.word	0x200016d0
 8000790:	40013000 	.word	0x40013000

08000794 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_UART4_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_UART4_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_UART4_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_UART4_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_UART4_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_UART4_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_UART4_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_UART4_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_UART4_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_UART4_Init+0x4c>)
 80007cc:	f002 fb4e 	bl	8002e6c <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 fa1f 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20001690 	.word	0x20001690
 80007e4:	40004c00 	.word	0x40004c00

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <MX_GPIO_Init+0xec>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a33      	ldr	r2, [pc, #204]	; (80008d4 <MX_GPIO_Init+0xec>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <MX_GPIO_Init+0xec>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_GPIO_Init+0xec>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <MX_GPIO_Init+0xec>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_GPIO_Init+0xec>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_GPIO_Init+0xec>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <MX_GPIO_Init+0xec>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <MX_GPIO_Init+0xec>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4820      	ldr	r0, [pc, #128]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000858:	f000 febc 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000862:	481e      	ldr	r0, [pc, #120]	; (80008dc <MX_GPIO_Init+0xf4>)
 8000864:	f000 feb6 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000868:	2308      	movs	r3, #8
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4816      	ldr	r0, [pc, #88]	; (80008d8 <MX_GPIO_Init+0xf0>)
 8000880:	f000 fd0e 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000884:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4619      	mov	r1, r3
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <MX_GPIO_Init+0xf4>)
 800089e:	f000 fcff 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_GPIO_Init+0xf8>)
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MX_GPIO_Init+0xf0>)
 80008b6:	f000 fcf3 	bl	80012a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	210a      	movs	r1, #10
 80008be:	2006      	movs	r0, #6
 80008c0:	f000 fcc4 	bl	800124c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008c4:	2006      	movs	r0, #6
 80008c6:	f000 fcdd 	bl	8001284 <HAL_NVIC_EnableIRQ>

}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	10110000 	.word	0x10110000

080008e4 <RedLEDTask>:

/* USER CODE BEGIN 4 */
void RedLEDTask(void const * argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <RedLEDTask+0x1c>)
 80008f2:	f000 fe88 	bl	8001606 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 80008f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fa:	f003 fc15 	bl	8004128 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80008fe:	e7f5      	b.n	80008ec <RedLEDTask+0x8>
 8000900:	40020c00 	.word	0x40020c00

08000904 <GreenLEDTask>:
	}
}
void GreenLEDTask(void const * argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800090c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <GreenLEDTask+0x1c>)
 8000912:	f000 fe78 	bl	8001606 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f003 fc05 	bl	8004128 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800091e:	e7f5      	b.n	800090c <GreenLEDTask+0x8>
 8000920:	40020c00 	.word	0x40020c00

08000924 <Task1>:
	}
}
void Task1(void const * argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 800092c:	2000      	movs	r0, #0
 800092e:	f003 fb6d 	bl	800400c <vTaskDelete>
 8000932:	e7fb      	b.n	800092c <Task1+0x8>

08000934 <Task2>:
	}
}
void Task2(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 800093c:	2000      	movs	r0, #0
 800093e:	f003 fb65 	bl	800400c <vTaskDelete>
 8000942:	e7fb      	b.n	800093c <Task2+0x8>

08000944 <Task3>:
	}
}

void Task3(void const * argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		vTaskDelete( NULL );
 800094c:	2000      	movs	r0, #0
 800094e:	f003 fb5d 	bl	800400c <vTaskDelete>
 8000952:	e7fb      	b.n	800094c <Task3+0x8>

08000954 <PrintTask>:
	}
}

void PrintTask(void){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	for(;;)
	{
		vPrintFreeList();
 8000958:	f003 f89a 	bl	8003a90 <vPrintFreeList>
		vTaskDelay(3000);
 800095c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000960:	f003 fbe2 	bl	8004128 <vTaskDelay>
		vPrintFreeList();
 8000964:	e7f8      	b.n	8000958 <PrintTask+0x4>
	...

08000968 <initMEMS>:
//  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 2);
//  return ch;
//}


void initMEMS(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	uint8_t data[1];
	  	uint8_t ads[1];

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	4876      	ldr	r0, [pc, #472]	; (8000b4c <initMEMS+0x1e4>)
 8000974:	f000 fe2e 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG1_ADDR;
 8000978:	2321      	movs	r3, #33	; 0x21
 800097a:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 800097c:	1d39      	adds	r1, r7, #4
 800097e:	230a      	movs	r3, #10
 8000980:	2201      	movs	r2, #1
 8000982:	4873      	ldr	r0, [pc, #460]	; (8000b50 <initMEMS+0x1e8>)
 8000984:	f001 fb44 	bl	8002010 <HAL_SPI_Transmit>
		ads[0]=0x01;
 8000988:	2301      	movs	r3, #1
 800098a:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 800098c:	4639      	mov	r1, r7
 800098e:	230a      	movs	r3, #10
 8000990:	2201      	movs	r2, #1
 8000992:	486f      	ldr	r0, [pc, #444]	; (8000b50 <initMEMS+0x1e8>)
 8000994:	f001 fb3c 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2108      	movs	r1, #8
 800099c:	486b      	ldr	r0, [pc, #428]	; (8000b4c <initMEMS+0x1e4>)
 800099e:	f000 fe19 	bl	80015d4 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2108      	movs	r1, #8
 80009a6:	4869      	ldr	r0, [pc, #420]	; (8000b4c <initMEMS+0x1e4>)
 80009a8:	f000 fe14 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG3_ADDR;
 80009ac:	2323      	movs	r3, #35	; 0x23
 80009ae:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 80009b0:	1d39      	adds	r1, r7, #4
 80009b2:	230a      	movs	r3, #10
 80009b4:	2201      	movs	r2, #1
 80009b6:	4866      	ldr	r0, [pc, #408]	; (8000b50 <initMEMS+0x1e8>)
 80009b8:	f001 fb2a 	bl	8002010 <HAL_SPI_Transmit>
		ads[0]=0x48;
 80009bc:	2348      	movs	r3, #72	; 0x48
 80009be:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 80009c0:	4639      	mov	r1, r7
 80009c2:	230a      	movs	r3, #10
 80009c4:	2201      	movs	r2, #1
 80009c6:	4862      	ldr	r0, [pc, #392]	; (8000b50 <initMEMS+0x1e8>)
 80009c8:	f001 fb22 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2108      	movs	r1, #8
 80009d0:	485e      	ldr	r0, [pc, #376]	; (8000b4c <initMEMS+0x1e4>)
 80009d2:	f000 fdff 	bl	80015d4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2108      	movs	r1, #8
 80009da:	485c      	ldr	r0, [pc, #368]	; (8000b4c <initMEMS+0x1e4>)
 80009dc:	f000 fdfa 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_CTRL_REG4_ADDR;
 80009e0:	2320      	movs	r3, #32
 80009e2:	713b      	strb	r3, [r7, #4]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 80009e4:	1d39      	adds	r1, r7, #4
 80009e6:	230a      	movs	r3, #10
 80009e8:	2201      	movs	r2, #1
 80009ea:	4859      	ldr	r0, [pc, #356]	; (8000b50 <initMEMS+0x1e8>)
 80009ec:	f001 fb10 	bl	8002010 <HAL_SPI_Transmit>
		ads[0]=0x67;
 80009f0:	2367      	movs	r3, #103	; 0x67
 80009f2:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 80009f4:	4639      	mov	r1, r7
 80009f6:	230a      	movs	r3, #10
 80009f8:	2201      	movs	r2, #1
 80009fa:	4855      	ldr	r0, [pc, #340]	; (8000b50 <initMEMS+0x1e8>)
 80009fc:	f001 fb08 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2108      	movs	r1, #8
 8000a04:	4851      	ldr	r0, [pc, #324]	; (8000b4c <initMEMS+0x1e4>)
 8000a06:	f000 fde5 	bl	80015d4 <HAL_GPIO_WritePin>
	//	HAL_SPI_Transmit(&hspi1,data,1,10);
	//	data[0]=0x00;
	//	HAL_SPI_Transmit(&hspi1,data,1,10);
	//	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	484f      	ldr	r0, [pc, #316]	; (8000b4c <initMEMS+0x1e4>)
 8000a10:	f000 fde0 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_THRS1_1_ADDR;
 8000a14:	2357      	movs	r3, #87	; 0x57
 8000a16:	713b      	strb	r3, [r7, #4]
		ads[0]=0x55;
 8000a18:	2355      	movs	r3, #85	; 0x55
 8000a1a:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a1c:	1d39      	adds	r1, r7, #4
 8000a1e:	230a      	movs	r3, #10
 8000a20:	2201      	movs	r2, #1
 8000a22:	484b      	ldr	r0, [pc, #300]	; (8000b50 <initMEMS+0x1e8>)
 8000a24:	f001 faf4 	bl	8002010 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a28:	4639      	mov	r1, r7
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4848      	ldr	r0, [pc, #288]	; (8000b50 <initMEMS+0x1e8>)
 8000a30:	f001 faee 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2108      	movs	r1, #8
 8000a38:	4844      	ldr	r0, [pc, #272]	; (8000b4c <initMEMS+0x1e4>)
 8000a3a:	f000 fdcb 	bl	80015d4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2108      	movs	r1, #8
 8000a42:	4842      	ldr	r0, [pc, #264]	; (8000b4c <initMEMS+0x1e4>)
 8000a44:	f000 fdc6 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_ST1_1_ADDR;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	713b      	strb	r3, [r7, #4]
		ads[0]=0x05;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a50:	1d39      	adds	r1, r7, #4
 8000a52:	230a      	movs	r3, #10
 8000a54:	2201      	movs	r2, #1
 8000a56:	483e      	ldr	r0, [pc, #248]	; (8000b50 <initMEMS+0x1e8>)
 8000a58:	f001 fada 	bl	8002010 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a5c:	4639      	mov	r1, r7
 8000a5e:	230a      	movs	r3, #10
 8000a60:	2201      	movs	r2, #1
 8000a62:	483b      	ldr	r0, [pc, #236]	; (8000b50 <initMEMS+0x1e8>)
 8000a64:	f001 fad4 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	4837      	ldr	r0, [pc, #220]	; (8000b4c <initMEMS+0x1e4>)
 8000a6e:	f000 fdb1 	bl	80015d4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2108      	movs	r1, #8
 8000a76:	4835      	ldr	r0, [pc, #212]	; (8000b4c <initMEMS+0x1e4>)
 8000a78:	f000 fdac 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_ST1_2_ADDR;
 8000a7c:	2341      	movs	r3, #65	; 0x41
 8000a7e:	713b      	strb	r3, [r7, #4]
		ads[0]=0x11;
 8000a80:	2311      	movs	r3, #17
 8000a82:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000a84:	1d39      	adds	r1, r7, #4
 8000a86:	230a      	movs	r3, #10
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4831      	ldr	r0, [pc, #196]	; (8000b50 <initMEMS+0x1e8>)
 8000a8c:	f001 fac0 	bl	8002010 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000a90:	4639      	mov	r1, r7
 8000a92:	230a      	movs	r3, #10
 8000a94:	2201      	movs	r2, #1
 8000a96:	482e      	ldr	r0, [pc, #184]	; (8000b50 <initMEMS+0x1e8>)
 8000a98:	f001 faba 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	482a      	ldr	r0, [pc, #168]	; (8000b4c <initMEMS+0x1e4>)
 8000aa2:	f000 fd97 	bl	80015d4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	4828      	ldr	r0, [pc, #160]	; (8000b4c <initMEMS+0x1e4>)
 8000aac:	f000 fd92 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_MASK1_B_ADDR;
 8000ab0:	2359      	movs	r3, #89	; 0x59
 8000ab2:	713b      	strb	r3, [r7, #4]
		ads[0]=0xFC;
 8000ab4:	23fc      	movs	r3, #252	; 0xfc
 8000ab6:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000ab8:	1d39      	adds	r1, r7, #4
 8000aba:	230a      	movs	r3, #10
 8000abc:	2201      	movs	r2, #1
 8000abe:	4824      	ldr	r0, [pc, #144]	; (8000b50 <initMEMS+0x1e8>)
 8000ac0:	f001 faa6 	bl	8002010 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4821      	ldr	r0, [pc, #132]	; (8000b50 <initMEMS+0x1e8>)
 8000acc:	f001 faa0 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	481d      	ldr	r0, [pc, #116]	; (8000b4c <initMEMS+0x1e4>)
 8000ad6:	f000 fd7d 	bl	80015d4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2108      	movs	r1, #8
 8000ade:	481b      	ldr	r0, [pc, #108]	; (8000b4c <initMEMS+0x1e4>)
 8000ae0:	f000 fd78 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_MASK1_A_ADDR;
 8000ae4:	235a      	movs	r3, #90	; 0x5a
 8000ae6:	713b      	strb	r3, [r7, #4]
		ads[0]=0xFC;
 8000ae8:	23fc      	movs	r3, #252	; 0xfc
 8000aea:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000aec:	1d39      	adds	r1, r7, #4
 8000aee:	230a      	movs	r3, #10
 8000af0:	2201      	movs	r2, #1
 8000af2:	4817      	ldr	r0, [pc, #92]	; (8000b50 <initMEMS+0x1e8>)
 8000af4:	f001 fa8c 	bl	8002010 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000af8:	4639      	mov	r1, r7
 8000afa:	230a      	movs	r3, #10
 8000afc:	2201      	movs	r2, #1
 8000afe:	4814      	ldr	r0, [pc, #80]	; (8000b50 <initMEMS+0x1e8>)
 8000b00:	f001 fa86 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2108      	movs	r1, #8
 8000b08:	4810      	ldr	r0, [pc, #64]	; (8000b4c <initMEMS+0x1e4>)
 8000b0a:	f000 fd63 	bl	80015d4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <initMEMS+0x1e4>)
 8000b14:	f000 fd5e 	bl	80015d4 <HAL_GPIO_WritePin>
		data[0]=LIS3DSH_SETT1_ADDR;
 8000b18:	235b      	movs	r3, #91	; 0x5b
 8000b1a:	713b      	strb	r3, [r7, #4]
		ads[0]=0x01;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	703b      	strb	r3, [r7, #0]
		HAL_SPI_Transmit(&hspi1,data,1,10);
 8000b20:	1d39      	adds	r1, r7, #4
 8000b22:	230a      	movs	r3, #10
 8000b24:	2201      	movs	r2, #1
 8000b26:	480a      	ldr	r0, [pc, #40]	; (8000b50 <initMEMS+0x1e8>)
 8000b28:	f001 fa72 	bl	8002010 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,ads,1,10);
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	230a      	movs	r3, #10
 8000b30:	2201      	movs	r2, #1
 8000b32:	4807      	ldr	r0, [pc, #28]	; (8000b50 <initMEMS+0x1e8>)
 8000b34:	f001 fa6c 	bl	8002010 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <initMEMS+0x1e4>)
 8000b3e:	f000 fd49 	bl	80015d4 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	200016d0 	.word	0x200016d0

08000b54 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	 if(GPIO_Pin == GPIO_PIN_0)
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d137      	bne.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x80>
	 {
		 xHigherPriorityTaskWoken = pdFALSE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
		 if(flag==pdTRUE){
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_GPIO_EXTI_Callback+0x88>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d107      	bne.n	8000b80 <HAL_GPIO_EXTI_Callback+0x2c>
			 xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f107 020c 	add.w	r2, r7, #12
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 f862 	bl	8003c44 <xQueueGiveFromISR>
		 }else{
			 //do nothing
		 }

		 HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 8000b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b84:	4817      	ldr	r0, [pc, #92]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000b86:	f000 fd3e 	bl	8001606 <HAL_GPIO_TogglePin>
		 uint8_t data_1=0x5f|0x80;
 8000b8a:	23df      	movs	r3, #223	; 0xdf
 8000b8c:	72fb      	strb	r3, [r7, #11]
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2108      	movs	r1, #8
 8000b92:	4815      	ldr	r0, [pc, #84]	; (8000be8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b94:	f000 fd1e 	bl	80015d4 <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi1,&data_1,1,10);
 8000b98:	f107 010b 	add.w	r1, r7, #11
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4812      	ldr	r0, [pc, #72]	; (8000bec <HAL_GPIO_EXTI_Callback+0x98>)
 8000ba2:	f001 fa35 	bl	8002010 <HAL_SPI_Transmit>
		  ////	HAL_Delay(10);
		 HAL_SPI_Receive(&hspi1,&data_1,1,10);
 8000ba6:	f107 010b 	add.w	r1, r7, #11
 8000baa:	230a      	movs	r3, #10
 8000bac:	2201      	movs	r2, #1
 8000bae:	480f      	ldr	r0, [pc, #60]	; (8000bec <HAL_GPIO_EXTI_Callback+0x98>)
 8000bb0:	f001 fb62 	bl	8002278 <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000bba:	f000 fd0b 	bl	80015d4 <HAL_GPIO_WritePin>
		 portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x80>
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	f3bf 8f4f 	dsb	sy
 8000bd0:	f3bf 8f6f 	isb	sy
	 }


}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	2000168c 	.word	0x2000168c
 8000be4:	40020c00 	.word	0x40020c00
 8000be8:	40021000 	.word	0x40021000
 8000bec:	200016d0 	.word	0x200016d0
 8000bf0:	e000ed04 	.word	0xe000ed04

08000bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c06:	f000 fa49 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40001000 	.word	0x40001000

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <Error_Handler+0x6>

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_SPI_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12b      	bne.n	8000cea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000c9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cca:	23e0      	movs	r3, #224	; 0xe0
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_SPI_MspInit+0x8c>)
 8000ce6:	f000 fadb 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_UART_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12b      	bne.n	8000d7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_UART_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_UART_MspInit+0x88>)
 8000d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_UART_MspInit+0x88>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_UART_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_UART_MspInit+0x88>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_UART_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_UART_MspInit+0x8c>)
 8000d76:	f000 fa93 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40004c00 	.word	0x40004c00
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2036      	movs	r0, #54	; 0x36
 8000da6:	f000 fa51 	bl	800124c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000daa:	2036      	movs	r0, #54	; 0x36
 8000dac:	f000 fa6a 	bl	8001284 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <HAL_InitTick+0xa0>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_InitTick+0xa0>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_InitTick+0xa0>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f884 	bl	8001ee4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ddc:	f001 f85a 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8000de0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_InitTick+0xa4>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3b01      	subs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_InitTick+0xa8>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_InitTick+0xac>)
 8000df4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_InitTick+0xa8>)
 8000df8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e12:	f001 fded 	bl	80029f0 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d104      	bne.n	8000e26 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <HAL_InitTick+0xa8>)
 8000e1e:	f001 fe1c 	bl	8002a5a <HAL_TIM_Base_Start_IT>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3730      	adds	r7, #48	; 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	20001728 	.word	0x20001728
 8000e3c:	40001000 	.word	0x40001000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 fbe3 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM6_DAC_IRQHandler+0x10>)
 8000e82:	f001 fe0e 	bl	8002aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20001728 	.word	0x20001728

08000e90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
	}

return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb43 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
	}
	return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_isatty>:

int _isatty(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f003 feb8 	bl	8004d10 <__errno>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20020000 	.word	0x20020000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	20000098 	.word	0x20000098
 8000fd4:	20001770 	.word	0x20001770

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <SystemInit+0x28>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <SystemInit+0x28>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SystemInit+0x28>)
 8000fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800100a:	e003      	b.n	8001014 <LoopCopyDataInit>

0800100c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800100e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001012:	3104      	adds	r1, #4

08001014 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800101a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800101c:	d3f6      	bcc.n	800100c <CopyDataInit>
  ldr  r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001020:	e002      	b.n	8001028 <LoopFillZerobss>

08001022 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001022:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001024:	f842 3b04 	str.w	r3, [r2], #4

08001028 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800102c:	d3f9      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102e:	f7ff ffd3 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f003 fe73 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff faad 	bl	8000594 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001040:	08005d74 	.word	0x08005d74
  ldr  r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001048:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800104c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001050:	20001770 	.word	0x20001770

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f8d8 	bl	8001236 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fe82 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fdc8 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	20001768 	.word	0x20001768

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20001768 	.word	0x20001768

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff4c 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125e:	f7ff ff61 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001262:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f7ff ffb1 	bl	80011d0 <NVIC_EncodePriority>
 800126e:	4602      	mov	r2, r0
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff80 	bl	800117c <__NVIC_SetPriority>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff54 	bl	8001140 <__NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e16b      	b.n	8001594 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 815a 	bne.w	800158e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d00b      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ee:	2b11      	cmp	r3, #17
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b12      	cmp	r3, #18
 80012f8:	d130      	bne.n	800135c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0xfc>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b12      	cmp	r3, #18
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80b4 	beq.w	800158e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_GPIO_Init+0x308>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a5e      	ldr	r2, [pc, #376]	; (80015a8 <HAL_GPIO_Init+0x308>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_GPIO_Init+0x308>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001442:	4a5a      	ldr	r2, [pc, #360]	; (80015ac <HAL_GPIO_Init+0x30c>)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a51      	ldr	r2, [pc, #324]	; (80015b0 <HAL_GPIO_Init+0x310>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d02b      	beq.n	80014c6 <HAL_GPIO_Init+0x226>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <HAL_GPIO_Init+0x314>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x222>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4f      	ldr	r2, [pc, #316]	; (80015b8 <HAL_GPIO_Init+0x318>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x21e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4e      	ldr	r2, [pc, #312]	; (80015bc <HAL_GPIO_Init+0x31c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x21a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4d      	ldr	r2, [pc, #308]	; (80015c0 <HAL_GPIO_Init+0x320>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x216>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4c      	ldr	r2, [pc, #304]	; (80015c4 <HAL_GPIO_Init+0x324>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x212>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4b      	ldr	r2, [pc, #300]	; (80015c8 <HAL_GPIO_Init+0x328>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x20e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4a      	ldr	r2, [pc, #296]	; (80015cc <HAL_GPIO_Init+0x32c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x20a>
 80014a6:	2307      	movs	r3, #7
 80014a8:	e00e      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014aa:	2308      	movs	r3, #8
 80014ac:	e00c      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00a      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014c6:	2300      	movs	r3, #0
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d8:	4934      	ldr	r1, [pc, #208]	; (80015ac <HAL_GPIO_Init+0x30c>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <HAL_GPIO_Init+0x330>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800150a:	4a31      	ldr	r2, [pc, #196]	; (80015d0 <HAL_GPIO_Init+0x330>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <HAL_GPIO_Init+0x330>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_GPIO_Init+0x330>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f67f ae90 	bls.w	80012bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800159c:	bf00      	nop
 800159e:	3724      	adds	r7, #36	; 0x24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40021400 	.word	0x40021400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40021c00 	.word	0x40021c00
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f0:	e003      	b.n	80015fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	041a      	lsls	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	619a      	str	r2, [r3, #24]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	401a      	ands	r2, r3
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	429a      	cmp	r2, r3
 800161e:	d104      	bne.n	800162a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	041a      	lsls	r2, r3, #16
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001628:	e002      	b.n	8001630 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fa7a 	bl	8000b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e25b      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d075      	beq.n	8001776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800168a:	4ba3      	ldr	r3, [pc, #652]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b04      	cmp	r3, #4
 8001694:	d00c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4ba0      	ldr	r3, [pc, #640]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d112      	bne.n	80016c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a2:	4b9d      	ldr	r3, [pc, #628]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ae:	d10b      	bne.n	80016c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	4b99      	ldr	r3, [pc, #612]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d05b      	beq.n	8001774 <HAL_RCC_OscConfig+0x108>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d157      	bne.n	8001774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e236      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d106      	bne.n	80016e0 <HAL_RCC_OscConfig+0x74>
 80016d2:	4b91      	ldr	r3, [pc, #580]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a90      	ldr	r2, [pc, #576]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e01d      	b.n	800171c <HAL_RCC_OscConfig+0xb0>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x98>
 80016ea:	4b8b      	ldr	r3, [pc, #556]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a8a      	ldr	r2, [pc, #552]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a87      	ldr	r2, [pc, #540]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0xb0>
 8001704:	4b84      	ldr	r3, [pc, #528]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a83      	ldr	r2, [pc, #524]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b81      	ldr	r3, [pc, #516]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a80      	ldr	r2, [pc, #512]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fcce 	bl	80010c4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fcca 	bl	80010c4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1fb      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b76      	ldr	r3, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0xc0>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fcba 	bl	80010c4 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fcb6 	bl	80010c4 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1e7      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	4b6c      	ldr	r3, [pc, #432]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0xe8>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d063      	beq.n	800184a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001782:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178e:	4b62      	ldr	r3, [pc, #392]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001796:	2b08      	cmp	r3, #8
 8001798:	d11c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179a:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d116      	bne.n	80017d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x152>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e1bb      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b56      	ldr	r3, [pc, #344]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4952      	ldr	r1, [pc, #328]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	e03a      	b.n	800184a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017dc:	4b4f      	ldr	r3, [pc, #316]	; (800191c <HAL_RCC_OscConfig+0x2b0>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e2:	f7ff fc6f 	bl	80010c4 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ea:	f7ff fc6b 	bl	80010c4 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e19c      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	4b46      	ldr	r3, [pc, #280]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b43      	ldr	r3, [pc, #268]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4940      	ldr	r1, [pc, #256]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
 800181c:	e015      	b.n	800184a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_RCC_OscConfig+0x2b0>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fc4e 	bl	80010c4 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff fc4a 	bl	80010c4 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e17b      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d030      	beq.n	80018b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d016      	beq.n	800188c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_RCC_OscConfig+0x2b4>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fc2e 	bl	80010c4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fc2a 	bl	80010c4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e15b      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x200>
 800188a:	e015      	b.n	80018b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_RCC_OscConfig+0x2b4>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff fc17 	bl	80010c4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189a:	f7ff fc13 	bl	80010c4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e144      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80018ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80a0 	beq.w	8001a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10f      	bne.n	80018f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_OscConfig+0x2b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d121      	bne.n	8001946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_RCC_OscConfig+0x2b8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_RCC_OscConfig+0x2b8>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190e:	f7ff fbd9 	bl	80010c4 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	e011      	b.n	800193a <HAL_RCC_OscConfig+0x2ce>
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	42470000 	.word	0x42470000
 8001920:	42470e80 	.word	0x42470e80
 8001924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001928:	f7ff fbcc 	bl	80010c4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0fd      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193a:	4b81      	ldr	r3, [pc, #516]	; (8001b40 <HAL_RCC_OscConfig+0x4d4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d106      	bne.n	800195c <HAL_RCC_OscConfig+0x2f0>
 800194e:	4b7d      	ldr	r3, [pc, #500]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a7c      	ldr	r2, [pc, #496]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	e01c      	b.n	8001996 <HAL_RCC_OscConfig+0x32a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d10c      	bne.n	800197e <HAL_RCC_OscConfig+0x312>
 8001964:	4b77      	ldr	r3, [pc, #476]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a76      	ldr	r2, [pc, #472]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	4b74      	ldr	r3, [pc, #464]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a73      	ldr	r2, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	e00b      	b.n	8001996 <HAL_RCC_OscConfig+0x32a>
 800197e:	4b71      	ldr	r3, [pc, #452]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a70      	ldr	r2, [pc, #448]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	4b6e      	ldr	r3, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a6d      	ldr	r2, [pc, #436]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d015      	beq.n	80019ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff fb91 	bl	80010c4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fb8d 	bl	80010c4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0bc      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	4b61      	ldr	r3, [pc, #388]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ee      	beq.n	80019a6 <HAL_RCC_OscConfig+0x33a>
 80019c8:	e014      	b.n	80019f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fb7b 	bl	80010c4 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff fb77 	bl	80010c4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0a6      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ee      	bne.n	80019d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fa:	4b52      	ldr	r3, [pc, #328]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a51      	ldr	r2, [pc, #324]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8092 	beq.w	8001b34 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d05c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d141      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b48      	ldr	r3, [pc, #288]	; (8001b48 <HAL_RCC_OscConfig+0x4dc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fb4b 	bl	80010c4 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff fb47 	bl	80010c4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e078      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a44:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69da      	ldr	r2, [r3, #28]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	019b      	lsls	r3, r3, #6
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	041b      	lsls	r3, r3, #16
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	061b      	lsls	r3, r3, #24
 8001a74:	4933      	ldr	r1, [pc, #204]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_RCC_OscConfig+0x4dc>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fb20 	bl	80010c4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff fb1c 	bl	80010c4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e04d      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x41c>
 8001aa6:	e045      	b.n	8001b34 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x4dc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fb09 	bl	80010c4 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff fb05 	bl	80010c4 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e036      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x44a>
 8001ad4:	e02e      	b.n	8001b34 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e029      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_RCC_OscConfig+0x4d8>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d115      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10d      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d106      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40007000 	.word	0x40007000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	42470060 	.word	0x42470060

08001b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0cc      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d90c      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0b8      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba0:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	494d      	ldr	r1, [pc, #308]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d044      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d119      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e07f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e06f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e067      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b37      	ldr	r3, [pc, #220]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4934      	ldr	r1, [pc, #208]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff fa42 	bl	80010c4 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff fa3e 	bl	80010c4 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e04f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d20c      	bcs.n	8001c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e032      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4916      	ldr	r1, [pc, #88]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	490e      	ldr	r1, [pc, #56]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cd2:	f000 f821 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f84c 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	08005cb4 	.word	0x08005cb4
 8001d10:	20000004 	.word	0x20000004
 8001d14:	20000008 	.word	0x20000008

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d2e:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d007      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x32>
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x38>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 808d 	bne.w	8001e5e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d46:	60bb      	str	r3, [r7, #8]
       break;
 8001d48:	e08c      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d4c:	60bb      	str	r3, [r7, #8]
      break;
 8001d4e:	e089      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d50:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5a:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d023      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	ea03 0501 	and.w	r5, r3, r1
 8001d7c:	ea04 0602 	and.w	r6, r4, r2
 8001d80:	4a3d      	ldr	r2, [pc, #244]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d82:	fb02 f106 	mul.w	r1, r2, r6
 8001d86:	2200      	movs	r2, #0
 8001d88:	fb02 f205 	mul.w	r2, r2, r5
 8001d8c:	440a      	add	r2, r1
 8001d8e:	493a      	ldr	r1, [pc, #232]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d90:	fba5 0101 	umull	r0, r1, r5, r1
 8001d94:	1853      	adds	r3, r2, r1
 8001d96:	4619      	mov	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0400 	mov.w	r4, #0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	f7fe fa65 	bl	8000270 <__aeabi_uldivmod>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e049      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	099b      	lsrs	r3, r3, #6
 8001db4:	f04f 0400 	mov.w	r4, #0
 8001db8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	ea03 0501 	and.w	r5, r3, r1
 8001dc4:	ea04 0602 	and.w	r6, r4, r2
 8001dc8:	4629      	mov	r1, r5
 8001dca:	4632      	mov	r2, r6
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	f04f 0400 	mov.w	r4, #0
 8001dd4:	0154      	lsls	r4, r2, #5
 8001dd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dda:	014b      	lsls	r3, r1, #5
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4622      	mov	r2, r4
 8001de0:	1b49      	subs	r1, r1, r5
 8001de2:	eb62 0206 	sbc.w	r2, r2, r6
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	f04f 0400 	mov.w	r4, #0
 8001dee:	0194      	lsls	r4, r2, #6
 8001df0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001df4:	018b      	lsls	r3, r1, #6
 8001df6:	1a5b      	subs	r3, r3, r1
 8001df8:	eb64 0402 	sbc.w	r4, r4, r2
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	00e2      	lsls	r2, r4, #3
 8001e06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e0a:	00d9      	lsls	r1, r3, #3
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	195b      	adds	r3, r3, r5
 8001e12:	eb44 0406 	adc.w	r4, r4, r6
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	02a2      	lsls	r2, r4, #10
 8001e20:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e24:	0299      	lsls	r1, r3, #10
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f04f 0400 	mov.w	r4, #0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4623      	mov	r3, r4
 8001e38:	f7fe fa1a 	bl	8000270 <__aeabi_uldivmod>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	0c1b      	lsrs	r3, r3, #16
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	60bb      	str	r3, [r7, #8]
      break;
 8001e5c:	e002      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e60:	60bb      	str	r3, [r7, #8]
      break;
 8001e62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e64:	68bb      	ldr	r3, [r7, #8]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	017d7840 	.word	0x017d7840

08001e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a9b      	lsrs	r3, r3, #10
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08005cc4 	.word	0x08005cc4

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ec0:	f7ff ffdc 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec4:	4601      	mov	r1, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0b5b      	lsrs	r3, r3, #13
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4a03      	ldr	r2, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08005cc4 	.word	0x08005cc4

08001ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_RCC_GetClockConfig+0x60>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 020f 	and.w	r2, r3, #15
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e056      	b.n	8002008 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fe7b 	bl	8000c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	ea42 0103 	orr.w	r1, r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	0c1b      	lsrs	r3, r3, #16
 8001fd8:	f003 0104 	and.w	r1, r3, #4
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69da      	ldr	r2, [r3, #28]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_SPI_Transmit+0x22>
 800202e:	2302      	movs	r3, #2
 8002030:	e11e      	b.n	8002270 <HAL_SPI_Transmit+0x260>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800203a:	f7ff f843 	bl	80010c4 <HAL_GetTick>
 800203e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d002      	beq.n	8002056 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002050:	2302      	movs	r3, #2
 8002052:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002054:	e103      	b.n	800225e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_SPI_Transmit+0x52>
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002066:	e0fa      	b.n	800225e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2203      	movs	r2, #3
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	88fa      	ldrh	r2, [r7, #6]
 8002080:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ae:	d107      	bne.n	80020c0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	2b40      	cmp	r3, #64	; 0x40
 80020cc:	d007      	beq.n	80020de <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e6:	d14b      	bne.n	8002180 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_SPI_Transmit+0xe6>
 80020f0:	8afb      	ldrh	r3, [r7, #22]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d13e      	bne.n	8002174 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800211a:	e02b      	b.n	8002174 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b02      	cmp	r3, #2
 8002128:	d112      	bne.n	8002150 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	1c9a      	adds	r2, r3, #2
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	86da      	strh	r2, [r3, #54]	; 0x36
 800214e:	e011      	b.n	8002174 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002150:	f7fe ffb8 	bl	80010c4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d803      	bhi.n	8002168 <HAL_SPI_Transmit+0x158>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002166:	d102      	bne.n	800216e <HAL_SPI_Transmit+0x15e>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002172:	e074      	b.n	800225e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ce      	bne.n	800211c <HAL_SPI_Transmit+0x10c>
 800217e:	e04c      	b.n	800221a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_SPI_Transmit+0x17e>
 8002188:	8afb      	ldrh	r3, [r7, #22]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d140      	bne.n	8002210 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	330c      	adds	r3, #12
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021b4:	e02c      	b.n	8002210 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d113      	bne.n	80021ec <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80021ea:	e011      	b.n	8002210 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ec:	f7fe ff6a 	bl	80010c4 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d803      	bhi.n	8002204 <HAL_SPI_Transmit+0x1f4>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002202:	d102      	bne.n	800220a <HAL_SPI_Transmit+0x1fa>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800220e:	e026      	b.n	800225e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1cd      	bne.n	80021b6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	6839      	ldr	r1, [r7, #0]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fba4 	bl	800296c <SPI_EndRxTxTransaction>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	77fb      	strb	r3, [r7, #31]
 800225a:	e000      	b.n	800225e <HAL_SPI_Transmit+0x24e>
  }

error:
 800225c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800226e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002294:	d112      	bne.n	80022bc <HAL_SPI_Receive+0x44>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10e      	bne.n	80022bc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2204      	movs	r2, #4
 80022a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022a6:	88fa      	ldrh	r2, [r7, #6]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f8e9 	bl	800248a <HAL_SPI_TransmitReceive>
 80022b8:	4603      	mov	r3, r0
 80022ba:	e0e2      	b.n	8002482 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_SPI_Receive+0x52>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e0db      	b.n	8002482 <HAL_SPI_Receive+0x20a>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022d2:	f7fe fef7 	bl	80010c4 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d002      	beq.n	80022ea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
 80022e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022e8:	e0c2      	b.n	8002470 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_SPI_Receive+0x7e>
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022fa:	e0b9      	b.n	8002470 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2204      	movs	r2, #4
 8002300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	88fa      	ldrh	r2, [r7, #6]
 800231a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002342:	d107      	bne.n	8002354 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b40      	cmp	r3, #64	; 0x40
 8002360:	d007      	beq.n	8002372 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d162      	bne.n	8002440 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800237a:	e02e      	b.n	80023da <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d115      	bne.n	80023b6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f103 020c 	add.w	r2, r3, #12
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023b4:	e011      	b.n	80023da <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b6:	f7fe fe85 	bl	80010c4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d803      	bhi.n	80023ce <HAL_SPI_Receive+0x156>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023cc:	d102      	bne.n	80023d4 <HAL_SPI_Receive+0x15c>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023d8:	e04a      	b.n	8002470 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1cb      	bne.n	800237c <HAL_SPI_Receive+0x104>
 80023e4:	e031      	b.n	800244a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d113      	bne.n	800241c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	b292      	uxth	r2, r2
 8002400:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	1c9a      	adds	r2, r3, #2
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	87da      	strh	r2, [r3, #62]	; 0x3e
 800241a:	e011      	b.n	8002440 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800241c:	f7fe fe52 	bl	80010c4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d803      	bhi.n	8002434 <HAL_SPI_Receive+0x1bc>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002432:	d102      	bne.n	800243a <HAL_SPI_Receive+0x1c2>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800243e:	e017      	b.n	8002470 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1cd      	bne.n	80023e6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	6839      	ldr	r1, [r7, #0]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa27 	bl	80028a2 <SPI_EndRxTransaction>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	75fb      	strb	r3, [r7, #23]
 800246c:	e000      	b.n	8002470 <HAL_SPI_Receive+0x1f8>
  }

error :
 800246e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002480:	7dfb      	ldrb	r3, [r7, #23]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b08c      	sub	sp, #48	; 0x30
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002498:	2301      	movs	r3, #1
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x26>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e18a      	b.n	80027c6 <HAL_SPI_TransmitReceive+0x33c>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024b8:	f7fe fe04 	bl	80010c4 <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d00f      	beq.n	80024fa <HAL_SPI_TransmitReceive+0x70>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e0:	d107      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x68>
 80024ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d003      	beq.n	80024fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024f8:	e15b      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_SPI_TransmitReceive+0x82>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_SPI_TransmitReceive+0x82>
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d103      	bne.n	8002514 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002512:	e14e      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b04      	cmp	r3, #4
 800251e:	d003      	beq.n	8002528 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2205      	movs	r2, #5
 8002524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	887a      	ldrh	r2, [r7, #2]
 800253e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	887a      	ldrh	r2, [r7, #2]
 800254a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d007      	beq.n	800257c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002584:	d178      	bne.n	8002678 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_SPI_TransmitReceive+0x10a>
 800258e:	8b7b      	ldrh	r3, [r7, #26]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d166      	bne.n	8002662 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b8:	e053      	b.n	8002662 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d11b      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x176>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_SPI_TransmitReceive+0x176>
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d113      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	1c9a      	adds	r2, r3, #2
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d119      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x1b8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d014      	beq.n	8002642 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	b292      	uxth	r2, r2
 8002624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800263e:	2301      	movs	r3, #1
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002642:	f7fe fd3f 	bl	80010c4 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800264e:	429a      	cmp	r2, r3
 8002650:	d807      	bhi.n	8002662 <HAL_SPI_TransmitReceive+0x1d8>
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002658:	d003      	beq.n	8002662 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002660:	e0a7      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1a6      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x130>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1a1      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x130>
 8002676:	e07c      	b.n	8002772 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x1fc>
 8002680:	8b7b      	ldrh	r3, [r7, #26]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d16b      	bne.n	800275e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ac:	e057      	b.n	800275e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d11c      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x26c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d017      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0x26c>
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d114      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d119      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x2ae>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d014      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002734:	2301      	movs	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002738:	f7fe fcc4 	bl	80010c4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002744:	429a      	cmp	r2, r3
 8002746:	d803      	bhi.n	8002750 <HAL_SPI_TransmitReceive+0x2c6>
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274e:	d102      	bne.n	8002756 <HAL_SPI_TransmitReceive+0x2cc>
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800275c:	e029      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1a2      	bne.n	80026ae <HAL_SPI_TransmitReceive+0x224>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d19d      	bne.n	80026ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f8f8 	bl	800296c <SPI_EndRxTxTransaction>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800278e:	e010      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	e000      	b.n	80027b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3730      	adds	r7, #48	; 0x30
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027de:	e04c      	b.n	800287a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e6:	d048      	beq.n	800287a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80027e8:	f7fe fc6c 	bl	80010c4 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d902      	bls.n	80027fe <SPI_WaitFlagStateUntilTimeout+0x30>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d13d      	bne.n	800287a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800280c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002816:	d111      	bne.n	800283c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002820:	d004      	beq.n	800282c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d107      	bne.n	800283c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002844:	d10f      	bne.n	8002866 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e00f      	b.n	800289a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d1a3      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af02      	add	r7, sp, #8
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b6:	d111      	bne.n	80028dc <SPI_EndRxTransaction+0x3a>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c0:	d004      	beq.n	80028cc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ca:	d107      	bne.n	80028dc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028da:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e4:	d12a      	bne.n	800293c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d012      	beq.n	8002916 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2200      	movs	r2, #0
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff ff67 	bl	80027ce <SPI_WaitFlagStateUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02d      	beq.n	8002962 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	f043 0220 	orr.w	r2, r3, #32
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e026      	b.n	8002964 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2200      	movs	r2, #0
 800291e:	2101      	movs	r1, #1
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff ff54 	bl	80027ce <SPI_WaitFlagStateUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01a      	beq.n	8002962 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e013      	b.n	8002964 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	2101      	movs	r1, #1
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ff41 	bl	80027ce <SPI_WaitFlagStateUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e000      	b.n	8002964 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <SPI_EndRxTxTransaction+0x7c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <SPI_EndRxTxTransaction+0x80>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0d5b      	lsrs	r3, r3, #21
 8002984:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002996:	d112      	bne.n	80029be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7ff ff13 	bl	80027ce <SPI_WaitFlagStateUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e00f      	b.n	80029de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d0f2      	beq.n	80029be <SPI_EndRxTxTransaction+0x52>
 80029d8:	e000      	b.n	80029dc <SPI_EndRxTxTransaction+0x70>
        break;
 80029da:	bf00      	nop
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000004 	.word	0x20000004
 80029ec:	165e9f81 	.word	0x165e9f81

080029f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e01d      	b.n	8002a3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f815 	bl	8002a46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f000 f968 	bl	8002d04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d007      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d122      	bne.n	8002afe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d11b      	bne.n	8002afe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0202 	mvn.w	r2, #2
 8002ace:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8ee 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002aea:	e005      	b.n	8002af8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8e0 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8f1 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d122      	bne.n	8002b52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d11b      	bne.n	8002b52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0204 	mvn.w	r2, #4
 8002b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8c4 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002b3e:	e005      	b.n	8002b4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8b6 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8c7 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d122      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0208 	mvn.w	r2, #8
 8002b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f89a 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002b92:	e005      	b.n	8002ba0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f88c 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f89d 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d122      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d11b      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0210 	mvn.w	r2, #16
 8002bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f870 	bl	8002cc6 <HAL_TIM_IC_CaptureCallback>
 8002be6:	e005      	b.n	8002bf4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f862 	bl	8002cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f873 	bl	8002cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10e      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0201 	mvn.w	r2, #1
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fd ffe7 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d10e      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f903 	bl	8002e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d10e      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d107      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f838 	bl	8002cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d10e      	bne.n	8002caa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d107      	bne.n	8002caa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f06f 0220 	mvn.w	r2, #32
 8002ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f8cd 	bl	8002e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d00f      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3d      	ldr	r2, [pc, #244]	; (8002e1c <TIM_Base_SetConfig+0x118>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3c      	ldr	r2, [pc, #240]	; (8002e20 <TIM_Base_SetConfig+0x11c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <TIM_Base_SetConfig+0x120>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d108      	bne.n	8002d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2f      	ldr	r2, [pc, #188]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d027      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <TIM_Base_SetConfig+0x118>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d023      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <TIM_Base_SetConfig+0x11c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <TIM_Base_SetConfig+0x120>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a29      	ldr	r2, [pc, #164]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d017      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a28      	ldr	r2, [pc, #160]	; (8002e2c <TIM_Base_SetConfig+0x128>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <TIM_Base_SetConfig+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00f      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <TIM_Base_SetConfig+0x130>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <TIM_Base_SetConfig+0x134>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <TIM_Base_SetConfig+0x138>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <TIM_Base_SetConfig+0x13c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <TIM_Base_SetConfig+0x114>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0xf8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <TIM_Base_SetConfig+0x124>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d103      	bne.n	8002e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	615a      	str	r2, [r3, #20]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40000c00 	.word	0x40000c00
 8002e28:	40010400 	.word	0x40010400
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40014800 	.word	0x40014800
 8002e38:	40001800 	.word	0x40001800
 8002e3c:	40001c00 	.word	0x40001c00
 8002e40:	40002000 	.word	0x40002000

08002e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e03f      	b.n	8002efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd ff34 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f90b 	bl	80030cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b088      	sub	sp, #32
 8002f0a:	af02      	add	r7, sp, #8
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	f040 8083 	bne.w	800302e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_UART_Transmit+0x2e>
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e07b      	b.n	8003030 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Transmit+0x40>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e074      	b.n	8003030 <HAL_UART_Transmit+0x12a>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2221      	movs	r2, #33	; 0x21
 8002f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe f8b2 	bl	80010c4 <HAL_GetTick>
 8002f60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f76:	e042      	b.n	8002ffe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8e:	d122      	bne.n	8002fd6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f84c 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e042      	b.n	8003030 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	e017      	b.n	8002ffe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	e013      	b.n	8002ffe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f829 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e01f      	b.n	8003030 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	60ba      	str	r2, [r7, #8]
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1b7      	bne.n	8002f78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	2140      	movs	r1, #64	; 0x40
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f810 	bl	8003038 <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e006      	b.n	8003030 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003048:	e02c      	b.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003050:	d028      	beq.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <UART_WaitOnFlagUntilTimeout+0x30>
 8003058:	f7fe f834 	bl	80010c4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	429a      	cmp	r2, r3
 8003066:	d21d      	bcs.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003076:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e00f      	b.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d0c3      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800310e:	f023 030c 	bic.w	r3, r3, #12
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	430b      	orrs	r3, r1
 800311a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313a:	f040 818b 	bne.w	8003454 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4ac1      	ldr	r2, [pc, #772]	; (8003448 <UART_SetConfig+0x37c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d005      	beq.n	8003154 <UART_SetConfig+0x88>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4abf      	ldr	r2, [pc, #764]	; (800344c <UART_SetConfig+0x380>)
 800314e:	4293      	cmp	r3, r2
 8003150:	f040 80bd 	bne.w	80032ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003154:	f7fe feb2 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8003158:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	461d      	mov	r5, r3
 800315e:	f04f 0600 	mov.w	r6, #0
 8003162:	46a8      	mov	r8, r5
 8003164:	46b1      	mov	r9, r6
 8003166:	eb18 0308 	adds.w	r3, r8, r8
 800316a:	eb49 0409 	adc.w	r4, r9, r9
 800316e:	4698      	mov	r8, r3
 8003170:	46a1      	mov	r9, r4
 8003172:	eb18 0805 	adds.w	r8, r8, r5
 8003176:	eb49 0906 	adc.w	r9, r9, r6
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003186:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800318a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800318e:	4688      	mov	r8, r1
 8003190:	4691      	mov	r9, r2
 8003192:	eb18 0005 	adds.w	r0, r8, r5
 8003196:	eb49 0106 	adc.w	r1, r9, r6
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	461d      	mov	r5, r3
 80031a0:	f04f 0600 	mov.w	r6, #0
 80031a4:	196b      	adds	r3, r5, r5
 80031a6:	eb46 0406 	adc.w	r4, r6, r6
 80031aa:	461a      	mov	r2, r3
 80031ac:	4623      	mov	r3, r4
 80031ae:	f7fd f85f 	bl	8000270 <__aeabi_uldivmod>
 80031b2:	4603      	mov	r3, r0
 80031b4:	460c      	mov	r4, r1
 80031b6:	461a      	mov	r2, r3
 80031b8:	4ba5      	ldr	r3, [pc, #660]	; (8003450 <UART_SetConfig+0x384>)
 80031ba:	fba3 2302 	umull	r2, r3, r3, r2
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	461d      	mov	r5, r3
 80031c8:	f04f 0600 	mov.w	r6, #0
 80031cc:	46a9      	mov	r9, r5
 80031ce:	46b2      	mov	sl, r6
 80031d0:	eb19 0309 	adds.w	r3, r9, r9
 80031d4:	eb4a 040a 	adc.w	r4, sl, sl
 80031d8:	4699      	mov	r9, r3
 80031da:	46a2      	mov	sl, r4
 80031dc:	eb19 0905 	adds.w	r9, r9, r5
 80031e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031f8:	4689      	mov	r9, r1
 80031fa:	4692      	mov	sl, r2
 80031fc:	eb19 0005 	adds.w	r0, r9, r5
 8003200:	eb4a 0106 	adc.w	r1, sl, r6
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	461d      	mov	r5, r3
 800320a:	f04f 0600 	mov.w	r6, #0
 800320e:	196b      	adds	r3, r5, r5
 8003210:	eb46 0406 	adc.w	r4, r6, r6
 8003214:	461a      	mov	r2, r3
 8003216:	4623      	mov	r3, r4
 8003218:	f7fd f82a 	bl	8000270 <__aeabi_uldivmod>
 800321c:	4603      	mov	r3, r0
 800321e:	460c      	mov	r4, r1
 8003220:	461a      	mov	r2, r3
 8003222:	4b8b      	ldr	r3, [pc, #556]	; (8003450 <UART_SetConfig+0x384>)
 8003224:	fba3 1302 	umull	r1, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	2164      	movs	r1, #100	; 0x64
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	3332      	adds	r3, #50	; 0x32
 8003236:	4a86      	ldr	r2, [pc, #536]	; (8003450 <UART_SetConfig+0x384>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003244:	4498      	add	r8, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	461d      	mov	r5, r3
 800324a:	f04f 0600 	mov.w	r6, #0
 800324e:	46a9      	mov	r9, r5
 8003250:	46b2      	mov	sl, r6
 8003252:	eb19 0309 	adds.w	r3, r9, r9
 8003256:	eb4a 040a 	adc.w	r4, sl, sl
 800325a:	4699      	mov	r9, r3
 800325c:	46a2      	mov	sl, r4
 800325e:	eb19 0905 	adds.w	r9, r9, r5
 8003262:	eb4a 0a06 	adc.w	sl, sl, r6
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800327a:	4689      	mov	r9, r1
 800327c:	4692      	mov	sl, r2
 800327e:	eb19 0005 	adds.w	r0, r9, r5
 8003282:	eb4a 0106 	adc.w	r1, sl, r6
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	461d      	mov	r5, r3
 800328c:	f04f 0600 	mov.w	r6, #0
 8003290:	196b      	adds	r3, r5, r5
 8003292:	eb46 0406 	adc.w	r4, r6, r6
 8003296:	461a      	mov	r2, r3
 8003298:	4623      	mov	r3, r4
 800329a:	f7fc ffe9 	bl	8000270 <__aeabi_uldivmod>
 800329e:	4603      	mov	r3, r0
 80032a0:	460c      	mov	r4, r1
 80032a2:	461a      	mov	r2, r3
 80032a4:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <UART_SetConfig+0x384>)
 80032a6:	fba3 1302 	umull	r1, r3, r3, r2
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2164      	movs	r1, #100	; 0x64
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	3332      	adds	r3, #50	; 0x32
 80032b8:	4a65      	ldr	r2, [pc, #404]	; (8003450 <UART_SetConfig+0x384>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	f003 0207 	and.w	r2, r3, #7
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4442      	add	r2, r8
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	e26f      	b.n	80037ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ce:	f7fe fde1 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 80032d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	461d      	mov	r5, r3
 80032d8:	f04f 0600 	mov.w	r6, #0
 80032dc:	46a8      	mov	r8, r5
 80032de:	46b1      	mov	r9, r6
 80032e0:	eb18 0308 	adds.w	r3, r8, r8
 80032e4:	eb49 0409 	adc.w	r4, r9, r9
 80032e8:	4698      	mov	r8, r3
 80032ea:	46a1      	mov	r9, r4
 80032ec:	eb18 0805 	adds.w	r8, r8, r5
 80032f0:	eb49 0906 	adc.w	r9, r9, r6
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003300:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003304:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003308:	4688      	mov	r8, r1
 800330a:	4691      	mov	r9, r2
 800330c:	eb18 0005 	adds.w	r0, r8, r5
 8003310:	eb49 0106 	adc.w	r1, r9, r6
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	461d      	mov	r5, r3
 800331a:	f04f 0600 	mov.w	r6, #0
 800331e:	196b      	adds	r3, r5, r5
 8003320:	eb46 0406 	adc.w	r4, r6, r6
 8003324:	461a      	mov	r2, r3
 8003326:	4623      	mov	r3, r4
 8003328:	f7fc ffa2 	bl	8000270 <__aeabi_uldivmod>
 800332c:	4603      	mov	r3, r0
 800332e:	460c      	mov	r4, r1
 8003330:	461a      	mov	r2, r3
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <UART_SetConfig+0x384>)
 8003334:	fba3 2302 	umull	r2, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	461d      	mov	r5, r3
 8003342:	f04f 0600 	mov.w	r6, #0
 8003346:	46a9      	mov	r9, r5
 8003348:	46b2      	mov	sl, r6
 800334a:	eb19 0309 	adds.w	r3, r9, r9
 800334e:	eb4a 040a 	adc.w	r4, sl, sl
 8003352:	4699      	mov	r9, r3
 8003354:	46a2      	mov	sl, r4
 8003356:	eb19 0905 	adds.w	r9, r9, r5
 800335a:	eb4a 0a06 	adc.w	sl, sl, r6
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800336a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800336e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003372:	4689      	mov	r9, r1
 8003374:	4692      	mov	sl, r2
 8003376:	eb19 0005 	adds.w	r0, r9, r5
 800337a:	eb4a 0106 	adc.w	r1, sl, r6
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	461d      	mov	r5, r3
 8003384:	f04f 0600 	mov.w	r6, #0
 8003388:	196b      	adds	r3, r5, r5
 800338a:	eb46 0406 	adc.w	r4, r6, r6
 800338e:	461a      	mov	r2, r3
 8003390:	4623      	mov	r3, r4
 8003392:	f7fc ff6d 	bl	8000270 <__aeabi_uldivmod>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	461a      	mov	r2, r3
 800339c:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <UART_SetConfig+0x384>)
 800339e:	fba3 1302 	umull	r1, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2164      	movs	r1, #100	; 0x64
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	3332      	adds	r3, #50	; 0x32
 80033b0:	4a27      	ldr	r2, [pc, #156]	; (8003450 <UART_SetConfig+0x384>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033be:	4498      	add	r8, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	461d      	mov	r5, r3
 80033c4:	f04f 0600 	mov.w	r6, #0
 80033c8:	46a9      	mov	r9, r5
 80033ca:	46b2      	mov	sl, r6
 80033cc:	eb19 0309 	adds.w	r3, r9, r9
 80033d0:	eb4a 040a 	adc.w	r4, sl, sl
 80033d4:	4699      	mov	r9, r3
 80033d6:	46a2      	mov	sl, r4
 80033d8:	eb19 0905 	adds.w	r9, r9, r5
 80033dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033f4:	4689      	mov	r9, r1
 80033f6:	4692      	mov	sl, r2
 80033f8:	eb19 0005 	adds.w	r0, r9, r5
 80033fc:	eb4a 0106 	adc.w	r1, sl, r6
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	461d      	mov	r5, r3
 8003406:	f04f 0600 	mov.w	r6, #0
 800340a:	196b      	adds	r3, r5, r5
 800340c:	eb46 0406 	adc.w	r4, r6, r6
 8003410:	461a      	mov	r2, r3
 8003412:	4623      	mov	r3, r4
 8003414:	f7fc ff2c 	bl	8000270 <__aeabi_uldivmod>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	461a      	mov	r2, r3
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <UART_SetConfig+0x384>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a07      	ldr	r2, [pc, #28]	; (8003450 <UART_SetConfig+0x384>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 0207 	and.w	r2, r3, #7
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4442      	add	r2, r8
 8003444:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003446:	e1b2      	b.n	80037ae <UART_SetConfig+0x6e2>
 8003448:	40011000 	.word	0x40011000
 800344c:	40011400 	.word	0x40011400
 8003450:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4ad7      	ldr	r2, [pc, #860]	; (80037b8 <UART_SetConfig+0x6ec>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d005      	beq.n	800346a <UART_SetConfig+0x39e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4ad6      	ldr	r2, [pc, #856]	; (80037bc <UART_SetConfig+0x6f0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	f040 80d1 	bne.w	800360c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800346a:	f7fe fd27 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 800346e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	469a      	mov	sl, r3
 8003474:	f04f 0b00 	mov.w	fp, #0
 8003478:	46d0      	mov	r8, sl
 800347a:	46d9      	mov	r9, fp
 800347c:	eb18 0308 	adds.w	r3, r8, r8
 8003480:	eb49 0409 	adc.w	r4, r9, r9
 8003484:	4698      	mov	r8, r3
 8003486:	46a1      	mov	r9, r4
 8003488:	eb18 080a 	adds.w	r8, r8, sl
 800348c:	eb49 090b 	adc.w	r9, r9, fp
 8003490:	f04f 0100 	mov.w	r1, #0
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800349c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034a4:	4688      	mov	r8, r1
 80034a6:	4691      	mov	r9, r2
 80034a8:	eb1a 0508 	adds.w	r5, sl, r8
 80034ac:	eb4b 0609 	adc.w	r6, fp, r9
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4619      	mov	r1, r3
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	f04f 0400 	mov.w	r4, #0
 80034c2:	0094      	lsls	r4, r2, #2
 80034c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034c8:	008b      	lsls	r3, r1, #2
 80034ca:	461a      	mov	r2, r3
 80034cc:	4623      	mov	r3, r4
 80034ce:	4628      	mov	r0, r5
 80034d0:	4631      	mov	r1, r6
 80034d2:	f7fc fecd 	bl	8000270 <__aeabi_uldivmod>
 80034d6:	4603      	mov	r3, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	461a      	mov	r2, r3
 80034dc:	4bb8      	ldr	r3, [pc, #736]	; (80037c0 <UART_SetConfig+0x6f4>)
 80034de:	fba3 2302 	umull	r2, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	469b      	mov	fp, r3
 80034ec:	f04f 0c00 	mov.w	ip, #0
 80034f0:	46d9      	mov	r9, fp
 80034f2:	46e2      	mov	sl, ip
 80034f4:	eb19 0309 	adds.w	r3, r9, r9
 80034f8:	eb4a 040a 	adc.w	r4, sl, sl
 80034fc:	4699      	mov	r9, r3
 80034fe:	46a2      	mov	sl, r4
 8003500:	eb19 090b 	adds.w	r9, r9, fp
 8003504:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003508:	f04f 0100 	mov.w	r1, #0
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003514:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800351c:	4689      	mov	r9, r1
 800351e:	4692      	mov	sl, r2
 8003520:	eb1b 0509 	adds.w	r5, fp, r9
 8003524:	eb4c 060a 	adc.w	r6, ip, sl
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4619      	mov	r1, r3
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	f04f 0400 	mov.w	r4, #0
 800353a:	0094      	lsls	r4, r2, #2
 800353c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003540:	008b      	lsls	r3, r1, #2
 8003542:	461a      	mov	r2, r3
 8003544:	4623      	mov	r3, r4
 8003546:	4628      	mov	r0, r5
 8003548:	4631      	mov	r1, r6
 800354a:	f7fc fe91 	bl	8000270 <__aeabi_uldivmod>
 800354e:	4603      	mov	r3, r0
 8003550:	460c      	mov	r4, r1
 8003552:	461a      	mov	r2, r3
 8003554:	4b9a      	ldr	r3, [pc, #616]	; (80037c0 <UART_SetConfig+0x6f4>)
 8003556:	fba3 1302 	umull	r1, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2164      	movs	r1, #100	; 0x64
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	; 0x32
 8003568:	4a95      	ldr	r2, [pc, #596]	; (80037c0 <UART_SetConfig+0x6f4>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003574:	4498      	add	r8, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	469b      	mov	fp, r3
 800357a:	f04f 0c00 	mov.w	ip, #0
 800357e:	46d9      	mov	r9, fp
 8003580:	46e2      	mov	sl, ip
 8003582:	eb19 0309 	adds.w	r3, r9, r9
 8003586:	eb4a 040a 	adc.w	r4, sl, sl
 800358a:	4699      	mov	r9, r3
 800358c:	46a2      	mov	sl, r4
 800358e:	eb19 090b 	adds.w	r9, r9, fp
 8003592:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035aa:	4689      	mov	r9, r1
 80035ac:	4692      	mov	sl, r2
 80035ae:	eb1b 0509 	adds.w	r5, fp, r9
 80035b2:	eb4c 060a 	adc.w	r6, ip, sl
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	0094      	lsls	r4, r2, #2
 80035ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ce:	008b      	lsls	r3, r1, #2
 80035d0:	461a      	mov	r2, r3
 80035d2:	4623      	mov	r3, r4
 80035d4:	4628      	mov	r0, r5
 80035d6:	4631      	mov	r1, r6
 80035d8:	f7fc fe4a 	bl	8000270 <__aeabi_uldivmod>
 80035dc:	4603      	mov	r3, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b77      	ldr	r3, [pc, #476]	; (80037c0 <UART_SetConfig+0x6f4>)
 80035e4:	fba3 1302 	umull	r1, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	2164      	movs	r1, #100	; 0x64
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	3332      	adds	r3, #50	; 0x32
 80035f6:	4a72      	ldr	r2, [pc, #456]	; (80037c0 <UART_SetConfig+0x6f4>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	f003 020f 	and.w	r2, r3, #15
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4442      	add	r2, r8
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	e0d0      	b.n	80037ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800360c:	f7fe fc42 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003610:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	469a      	mov	sl, r3
 8003616:	f04f 0b00 	mov.w	fp, #0
 800361a:	46d0      	mov	r8, sl
 800361c:	46d9      	mov	r9, fp
 800361e:	eb18 0308 	adds.w	r3, r8, r8
 8003622:	eb49 0409 	adc.w	r4, r9, r9
 8003626:	4698      	mov	r8, r3
 8003628:	46a1      	mov	r9, r4
 800362a:	eb18 080a 	adds.w	r8, r8, sl
 800362e:	eb49 090b 	adc.w	r9, r9, fp
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800363e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003642:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003646:	4688      	mov	r8, r1
 8003648:	4691      	mov	r9, r2
 800364a:	eb1a 0508 	adds.w	r5, sl, r8
 800364e:	eb4b 0609 	adc.w	r6, fp, r9
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4619      	mov	r1, r3
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	f04f 0400 	mov.w	r4, #0
 8003664:	0094      	lsls	r4, r2, #2
 8003666:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800366a:	008b      	lsls	r3, r1, #2
 800366c:	461a      	mov	r2, r3
 800366e:	4623      	mov	r3, r4
 8003670:	4628      	mov	r0, r5
 8003672:	4631      	mov	r1, r6
 8003674:	f7fc fdfc 	bl	8000270 <__aeabi_uldivmod>
 8003678:	4603      	mov	r3, r0
 800367a:	460c      	mov	r4, r1
 800367c:	461a      	mov	r2, r3
 800367e:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <UART_SetConfig+0x6f4>)
 8003680:	fba3 2302 	umull	r2, r3, r3, r2
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	469b      	mov	fp, r3
 800368e:	f04f 0c00 	mov.w	ip, #0
 8003692:	46d9      	mov	r9, fp
 8003694:	46e2      	mov	sl, ip
 8003696:	eb19 0309 	adds.w	r3, r9, r9
 800369a:	eb4a 040a 	adc.w	r4, sl, sl
 800369e:	4699      	mov	r9, r3
 80036a0:	46a2      	mov	sl, r4
 80036a2:	eb19 090b 	adds.w	r9, r9, fp
 80036a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036be:	4689      	mov	r9, r1
 80036c0:	4692      	mov	sl, r2
 80036c2:	eb1b 0509 	adds.w	r5, fp, r9
 80036c6:	eb4c 060a 	adc.w	r6, ip, sl
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4619      	mov	r1, r3
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	f04f 0400 	mov.w	r4, #0
 80036dc:	0094      	lsls	r4, r2, #2
 80036de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036e2:	008b      	lsls	r3, r1, #2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	4628      	mov	r0, r5
 80036ea:	4631      	mov	r1, r6
 80036ec:	f7fc fdc0 	bl	8000270 <__aeabi_uldivmod>
 80036f0:	4603      	mov	r3, r0
 80036f2:	460c      	mov	r4, r1
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <UART_SetConfig+0x6f4>)
 80036f8:	fba3 1302 	umull	r1, r3, r3, r2
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	2164      	movs	r1, #100	; 0x64
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	3332      	adds	r3, #50	; 0x32
 800370a:	4a2d      	ldr	r2, [pc, #180]	; (80037c0 <UART_SetConfig+0x6f4>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003716:	4498      	add	r8, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	469b      	mov	fp, r3
 800371c:	f04f 0c00 	mov.w	ip, #0
 8003720:	46d9      	mov	r9, fp
 8003722:	46e2      	mov	sl, ip
 8003724:	eb19 0309 	adds.w	r3, r9, r9
 8003728:	eb4a 040a 	adc.w	r4, sl, sl
 800372c:	4699      	mov	r9, r3
 800372e:	46a2      	mov	sl, r4
 8003730:	eb19 090b 	adds.w	r9, r9, fp
 8003734:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003744:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003748:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800374c:	4689      	mov	r9, r1
 800374e:	4692      	mov	sl, r2
 8003750:	eb1b 0509 	adds.w	r5, fp, r9
 8003754:	eb4c 060a 	adc.w	r6, ip, sl
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4619      	mov	r1, r3
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	f04f 0400 	mov.w	r4, #0
 800376a:	0094      	lsls	r4, r2, #2
 800376c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003770:	008b      	lsls	r3, r1, #2
 8003772:	461a      	mov	r2, r3
 8003774:	4623      	mov	r3, r4
 8003776:	4628      	mov	r0, r5
 8003778:	4631      	mov	r1, r6
 800377a:	f7fc fd79 	bl	8000270 <__aeabi_uldivmod>
 800377e:	4603      	mov	r3, r0
 8003780:	460c      	mov	r4, r1
 8003782:	461a      	mov	r2, r3
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <UART_SetConfig+0x6f4>)
 8003786:	fba3 1302 	umull	r1, r3, r3, r2
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2164      	movs	r1, #100	; 0x64
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	3332      	adds	r3, #50	; 0x32
 8003798:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <UART_SetConfig+0x6f4>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4442      	add	r2, r8
 80037aa:	609a      	str	r2, [r3, #8]
}
 80037ac:	e7ff      	b.n	80037ae <UART_SetConfig+0x6e2>
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b8:	40011000 	.word	0x40011000
 80037bc:	40011400 	.word	0x40011400
 80037c0:	51eb851f 	.word	0x51eb851f

080037c4 <prvInsertBlockIntoFreeList>:
//	/* Update the list to include the block being inserted in the correct */		\
//	/* position. */																	\
//	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
//	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
//}
void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert) {
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxIterator;
	size_t xBlockSize;
	uint32_t addressboundary;

	BlockLink_t *plowerblockscan = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
	BlockLink_t *phigherblockscan = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
	plowerblockscan->xBlockSize = 0;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2200      	movs	r2, #0
 80037d8:	605a      	str	r2, [r3, #4]
	phigherblockscan->xBlockSize = 0;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]

	xBlockSize = pxBlockToInsert->xBlockSize;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]

	//for higher case detect;block inserted is upon the block exist 連續地

	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock != NULL;) {
 80037e6:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <prvInsertBlockIntoFreeList+0x118>)
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	e015      	b.n	8003818 <prvInsertBlockIntoFreeList+0x54>
		addressboundary = (uint32_t) pxBlockToInsert + xBlockSize;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
		if (addressboundary == (uint32_t) pxIterator->pxNextFreeBlock) {//means merged they are continuous at address
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d108      	bne.n	8003812 <prvInsertBlockIntoFreeList+0x4e>
			//do link list delete
			phigherblockscan = pxIterator->pxNextFreeBlock;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	617b      	str	r3, [r7, #20]
			pxIterator->pxNextFreeBlock = phigherblockscan->pxNextFreeBlock;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	601a      	str	r2, [r3, #0]
			pxIterator = phigherblockscan;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	61fb      	str	r3, [r7, #28]
		}
		pxIterator = pxIterator->pxNextFreeBlock;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	61fb      	str	r3, [r7, #28]
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock != NULL;) {
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <prvInsertBlockIntoFreeList+0x28>
	}

	//for lower case detect;block inserted is below the block exist 連續地
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock != NULL;) {
 8003820:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <prvInsertBlockIntoFreeList+0x118>)
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	e017      	b.n	8003856 <prvInsertBlockIntoFreeList+0x92>
		addressboundary = (uint32_t) pxIterator->pxNextFreeBlock+pxIterator->pxNextFreeBlock->xBlockSize;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
		if (addressboundary == (uint32_t) pxBlockToInsert) {//means merged is possible
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	429a      	cmp	r2, r3
 800383c:	d108      	bne.n	8003850 <prvInsertBlockIntoFreeList+0x8c>
			//do link list delete
			plowerblockscan = pxIterator->pxNextFreeBlock;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61bb      	str	r3, [r7, #24]
			pxIterator->pxNextFreeBlock = plowerblockscan->pxNextFreeBlock;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	601a      	str	r2, [r3, #0]
			pxIterator = plowerblockscan;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	61fb      	str	r3, [r7, #28]
		}
		pxIterator = pxIterator->pxNextFreeBlock;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61fb      	str	r3, [r7, #28]
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock != NULL;) {
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e3      	bne.n	8003826 <prvInsertBlockIntoFreeList+0x62>
	}


	if(plowerblockscan||phigherblockscan){
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <prvInsertBlockIntoFreeList+0xa6>
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01c      	beq.n	80038a4 <prvInsertBlockIntoFreeList+0xe0>
		if(plowerblockscan){
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d012      	beq.n	8003896 <prvInsertBlockIntoFreeList+0xd2>
			pxBlockToInsert=plowerblockscan;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	607b      	str	r3, [r7, #4]
			pxBlockToInsert->xBlockSize=pxBlockToInsert->xBlockSize+xBlockSize;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	441a      	add	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	605a      	str	r2, [r3, #4]

			if(phigherblockscan){
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00e      	beq.n	80038a4 <prvInsertBlockIntoFreeList+0xe0>
				pxBlockToInsert->xBlockSize=pxBlockToInsert->xBlockSize+phigherblockscan->xBlockSize;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	441a      	add	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	e006      	b.n	80038a4 <prvInsertBlockIntoFreeList+0xe0>
			}
		}else{
			pxBlockToInsert->xBlockSize=pxBlockToInsert->xBlockSize+phigherblockscan->xBlockSize;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	441a      	add	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	605a      	str	r2, [r3, #4]
		}
	}



	xBlockSize = pxBlockToInsert->xBlockSize;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]

	/* Iterate through the list until a block is found that has a larger size */
	/* than the block we are inserting. */
	for (pxIterator = &xStart;
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <prvInsertBlockIntoFreeList+0x118>)
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	e002      	b.n	80038b6 <prvInsertBlockIntoFreeList+0xf2>
			pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator =
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
	for (pxIterator = &xStart;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d8f6      	bhi.n	80038b0 <prvInsertBlockIntoFreeList+0xec>
		/* There is nothing to do here - just iterate to the correct position. */
	}

	/* Update the list to include the block being inserted in the correct */
	/* position. */
	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	601a      	str	r2, [r3, #0]
	pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
}
 80038d0:	bf00      	nop
 80038d2:	3724      	adds	r7, #36	; 0x24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	2000149c 	.word	0x2000149c

080038e0 <pvPortMalloc>:

//printf("pxIterator address:%p pxblocksize:%d\n\r",\
//			pxIterator, pxIterator->xBlockSize);\
/*-----------------------------------------------------------*/

void* pvPortMalloc(size_t xWantedSize) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
	static BaseType_t xHeapHasBeenInitialised = pdFALSE;
	void *pvReturn = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
	size_t BlockSize, WantedSize;
//char data[80];
	WantedSize = xWantedSize;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 80038f0:	f000 fc94 	bl	800421c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		 initialisation to setup the list of free blocks. */
		if (xHeapHasBeenInitialised == pdFALSE) {
 80038f4:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <pvPortMalloc+0x100>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <pvPortMalloc+0x26>
			prvHeapInit();
 80038fc:	f000 f89e 	bl	8003a3c <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8003900:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <pvPortMalloc+0x100>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		 structure in addition to the requested amount of bytes. */
		if (xWantedSize > 0) {
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00e      	beq.n	800392a <pvPortMalloc+0x4a>
			xWantedSize += heapSTRUCT_SIZE;
 800390c:	2308      	movs	r3, #8
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0) {
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <pvPortMalloc+0x4a>
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f023 0307 	bic.w	r3, r3, #7
 8003926:	3308      	adds	r3, #8
 8003928:	607b      	str	r3, [r7, #4]
						- (xWantedSize & portBYTE_ALIGNMENT_MASK));
			}
		}

		if ((xWantedSize > 0) && (xWantedSize < configADJUSTED_HEAP_SIZE)) {
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d044      	beq.n	80039ba <pvPortMalloc+0xda>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f241 32f7 	movw	r2, #5111	; 0x13f7
 8003936:	4293      	cmp	r3, r2
 8003938:	d83f      	bhi.n	80039ba <pvPortMalloc+0xda>
			/* Blocks are stored in byte order - traverse the list from the start
			 (smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <pvPortMalloc+0x104>)
 800393c:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <pvPortMalloc+0x104>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	61fb      	str	r3, [r7, #28]
			while ((pxBlock->xBlockSize < xWantedSize)
 8003944:	e004      	b.n	8003950 <pvPortMalloc+0x70>
					&& (pxBlock->pxNextFreeBlock != NULL)) {
				pxPreviousBlock = pxBlock;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61fb      	str	r3, [r7, #28]
			while ((pxBlock->xBlockSize < xWantedSize)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d903      	bls.n	8003962 <pvPortMalloc+0x82>
					&& (pxBlock->pxNextFreeBlock != NULL)) {
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f1      	bne.n	8003946 <pvPortMalloc+0x66>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if (pxBlock != &xEnd) {
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <pvPortMalloc+0x108>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d027      	beq.n	80039ba <pvPortMalloc+0xda>
				/* Return the memory space - jumping over the BlockLink_t structure
				 at its start. */
				pvReturn =
						(void*) (((uint8_t*) pxPreviousBlock->pxNextFreeBlock)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2208      	movs	r2, #8
				pvReturn =
 8003970:	4413      	add	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
								+ heapSTRUCT_SIZE);

				/* This block is being returned for use so must be taken out of the
				 list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2208      	movs	r2, #8
 8003986:	0052      	lsls	r2, r2, #1
 8003988:	4293      	cmp	r3, r2
 800398a:	d90f      	bls.n	80039ac <pvPortMalloc+0xcc>
					/* This block is to be split into two.  Create a new block
					 following the number of bytes requested. The void cast is
					 used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink =
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
							(void*) (((uint8_t*) pxBlock) + xWantedSize);

					/* Calculate the sizes of two blocks split from the single
					 block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	685a      	ldr	r2, [r3, #4]
							- xWantedSize;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad2      	subs	r2, r2, r3
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList((pxNewBlockLink));
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f7ff ff0c 	bl	80037c4 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <pvPortMalloc+0x10c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <pvPortMalloc+0x10c>)
 80039b8:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	(void) xTaskResumeAll();
 80039ba:	f000 fc3d 	bl	8004238 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	BlockSize = xWantedSize;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60bb      	str	r3, [r7, #8]
	printf("pvReturn:%p heapSTRUCT_SIZE:%0d WantedSize:%0d BlockSize:%0d\n\r",
 80039c2:	2308      	movs	r3, #8
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	4808      	ldr	r0, [pc, #32]	; (80039f0 <pvPortMalloc+0x110>)
 80039d0:	f001 f9d0 	bl	8004d74 <iprintf>
			pvReturn, heapSTRUCT_SIZE, WantedSize, BlockSize);

	return pvReturn;
 80039d4:	697b      	ldr	r3, [r7, #20]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200014ac 	.word	0x200014ac
 80039e4:	2000149c 	.word	0x2000149c
 80039e8:	200014a4 	.word	0x200014a4
 80039ec:	20000010 	.word	0x20000010
 80039f0:	08005bcc 	.word	0x08005bcc

080039f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void *pv) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

//printf("free is called\n\r");
	uint8_t *puc = (uint8_t*) pv;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	if (pv != NULL) {
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d014      	beq.n	8003a30 <vPortFree+0x3c>
		/* The memory being freed will have an BlockLink_t structure immediately
		 before it. */
		puc -= heapSTRUCT_SIZE;
 8003a06:	2308      	movs	r3, #8
 8003a08:	425b      	negs	r3, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

		/* This unexpected casting is to keep some compilers from issuing
		 byte alignment warnings. */
		pxLink = (void*) puc;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
 8003a14:	f000 fc02 	bl	800421c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList(((BlockLink_t*) pxLink));
 8003a18:	68b8      	ldr	r0, [r7, #8]
 8003a1a:	f7ff fed3 	bl	80037c4 <prvInsertBlockIntoFreeList>
			xFreeBytesRemaining += pxLink->xBlockSize;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <vPortFree+0x44>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4413      	add	r3, r2
 8003a28:	4a03      	ldr	r2, [pc, #12]	; (8003a38 <vPortFree+0x44>)
 8003a2a:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		(void) xTaskResumeAll();
 8003a2c:	f000 fc04 	bl	8004238 <xTaskResumeAll>
	}
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000010 	.word	0x20000010

08003a3c <prvHeapInit>:
void vPortInitialiseBlocks(void) {
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit(void) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
	BlockLink_t *pxFirstFreeBlock;
	uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap =
			(uint8_t*) ((( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT])
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <prvHeapInit+0x48>)
					& (~(( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK)));
 8003a44:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap =
 8003a48:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	 blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = (void*) pucAlignedHeap;
 8003a4a:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <prvHeapInit+0x4c>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = (size_t) 0;
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <prvHeapInit+0x4c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <prvHeapInit+0x50>)
 8003a58:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003a5c:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <prvHeapInit+0x50>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	 entire heap space. */
	pxFirstFreeBlock = (void*) pucAlignedHeap;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003a6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <prvHeapInit+0x50>)
 8003a74:	601a      	str	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	200000a4 	.word	0x200000a4
 8003a88:	2000149c 	.word	0x2000149c
 8003a8c:	200014a4 	.word	0x200014a4

08003a90 <vPrintFreeList>:
/*-----------------------------------------------------------*/

void vPrintFreeList(void) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
	BlockLink_t *temp;

	temp = xStart.pxNextFreeBlock;
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <vPrintFreeList+0x40>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	607b      	str	r3, [r7, #4]
	while (temp->pxNextFreeBlock != NULL) {
 8003a9c:	e00c      	b.n	8003ab8 <vPrintFreeList+0x28>
		printf("size:%10d start address:%10p end address:%10p\n\r",
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6859      	ldr	r1, [r3, #4]
				temp->xBlockSize, temp, (void*) temp + temp->xBlockSize);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
		printf("size:%10d start address:%10p end address:%10p\n\r",
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <vPrintFreeList+0x44>)
 8003aae:	f001 f961 	bl	8004d74 <iprintf>
		temp = temp->pxNextFreeBlock;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	607b      	str	r3, [r7, #4]
	while (temp->pxNextFreeBlock != NULL) {
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ee      	bne.n	8003a9e <vPrintFreeList+0xe>
	}
	printf("list free ended\n\r");
 8003ac0:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <vPrintFreeList+0x48>)
 8003ac2:	f001 f957 	bl	8004d74 <iprintf>

}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000149c 	.word	0x2000149c
 8003ad4:	08005c0c 	.word	0x08005c0c
 8003ad8:	08005c3c 	.word	0x08005c3c

08003adc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f103 0208 	add.w	r2, r3, #8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f103 0208 	add.w	r2, r3, #8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f103 0208 	add.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b94:	d103      	bne.n	8003b9e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e00c      	b.n	8003bb8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e002      	b.n	8003bac <vListInsert+0x2e>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d2f6      	bcs.n	8003ba6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6892      	ldr	r2, [r2, #8]
 8003c06:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6852      	ldr	r2, [r2, #4]
 8003c10:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d103      	bne.n	8003c24 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	1e5a      	subs	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <xQueueGiveFromISR+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	e7fe      	b.n	8003c6a <xQueueGiveFromISR+0x26>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <xQueueGiveFromISR+0x44>
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	e7fe      	b.n	8003c86 <xQueueGiveFromISR+0x42>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <xQueueGiveFromISR+0x54>
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <xQueueGiveFromISR+0x58>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <xQueueGiveFromISR+0x5a>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <xQueueGiveFromISR+0x72>
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e7fe      	b.n	8003cb4 <xQueueGiveFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cb6:	f000 ffed 	bl	8004c94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cba:	f3ef 8211 	mrs	r2, BASEPRI
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	617a      	str	r2, [r7, #20]
 8003cd0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cd2:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d239      	bcs.n	8003d5a <xQueueGiveFromISR+0x116>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d00:	d112      	bne.n	8003d28 <xQueueGiveFromISR+0xe4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d024      	beq.n	8003d54 <xQueueGiveFromISR+0x110>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	3324      	adds	r3, #36	; 0x24
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fc40 	bl	8004594 <xTaskRemoveFromEventList>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01c      	beq.n	8003d54 <xQueueGiveFromISR+0x110>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d019      	beq.n	8003d54 <xQueueGiveFromISR+0x110>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e015      	b.n	8003d54 <xQueueGiveFromISR+0x110>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003d28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2e:	d109      	bne.n	8003d44 <xQueueGiveFromISR+0x100>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e7fe      	b.n	8003d42 <xQueueGiveFromISR+0xfe>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d48:	3301      	adds	r3, #1
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	b25a      	sxtb	r2, r3
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003d54:	2301      	movs	r3, #1
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
 8003d58:	e001      	b.n	8003d5e <xQueueGiveFromISR+0x11a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3738      	adds	r7, #56	; 0x38
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b090      	sub	sp, #64	; 0x40
 8003d78:	af04      	add	r7, sp, #16
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
	TCB_t *pxNewTCB;
	BaseType_t xReturn;
	char name[20];
	strcpy(name,pcName);
 8003d84:	f107 0310 	add.w	r3, r7, #16
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f80a 	bl	8004da4 <strcpy>
	printf("%s\n\r",name);
 8003d90:	f107 0310 	add.w	r3, r7, #16
 8003d94:	4619      	mov	r1, r3
 8003d96:	481e      	ldr	r0, [pc, #120]	; (8003e10 <xTaskCreate+0x9c>)
 8003d98:	f000 ffec 	bl	8004d74 <iprintf>
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fd9d 	bl	80038e0 <pvPortMalloc>
 8003da6:	6278      	str	r0, [r7, #36]	; 0x24

			if( pxStack != NULL )
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00e      	beq.n	8003dcc <xTaskCreate+0x58>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003dae:	2058      	movs	r0, #88	; 0x58
 8003db0:	f7ff fd96 	bl	80038e0 <pvPortMalloc>
 8003db4:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxNewTCB != NULL )
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <xTaskCreate+0x50>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc2:	e005      	b.n	8003dd0 <xTaskCreate+0x5c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dc6:	f7ff fe15 	bl	80039f4 <vPortFree>
 8003dca:	e001      	b.n	8003dd0 <xTaskCreate+0x5c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d013      	beq.n	8003dfe <xTaskCreate+0x8a>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9303      	str	r3, [sp, #12]
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	9302      	str	r3, [sp, #8]
 8003de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f811 	bl	8003e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003df4:	f000 f89c 	bl	8003f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dfc:	e002      	b.n	8003e04 <xTaskCreate+0x90>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		return xReturn;
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
	}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3730      	adds	r7, #48	; 0x30
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	08005ca4 	.word	0x08005ca4

08003e14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	21a5      	movs	r1, #165	; 0xa5
 8003e2e:	f000 ff99 	bl	8004d64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f023 0307 	bic.w	r3, r3, #7
 8003e4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <prvInitialiseNewTask+0x56>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e7fe      	b.n	8003e68 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01f      	beq.n	8003eb0 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
 8003e74:	e012      	b.n	8003e9c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	7819      	ldrb	r1, [r3, #0]
 8003e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	4413      	add	r3, r2
 8003e84:	3334      	adds	r3, #52	; 0x34
 8003e86:	460a      	mov	r2, r1
 8003e88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d006      	beq.n	8003ea4 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d9e9      	bls.n	8003e76 <prvInitialiseNewTask+0x62>
 8003ea2:	e000      	b.n	8003ea6 <prvInitialiseNewTask+0x92>
			{
				break;
 8003ea4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003eae:	e003      	b.n	8003eb8 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	2b0e      	cmp	r3, #14
 8003ebc:	d901      	bls.n	8003ec2 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ebe:	230e      	movs	r3, #14
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ecc:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fe1f 	bl	8003b1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fe1a 	bl	8003b1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	f1c3 020f 	rsb	r2, r3, #15
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2200      	movs	r2, #0
 8003f02:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	69b8      	ldr	r0, [r7, #24]
 8003f12:	f000 fcbb 	bl	800488c <pxPortInitialiseStack>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f28:	bf00      	nop
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f38:	f000 fdd0 	bl	8004adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <prvAddNewTaskToReadyList+0xc0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	4a2b      	ldr	r2, [pc, #172]	; (8003ff0 <prvAddNewTaskToReadyList+0xc0>)
 8003f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f46:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <prvAddNewTaskToReadyList+0xc4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f4e:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <prvAddNewTaskToReadyList+0xc4>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f54:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <prvAddNewTaskToReadyList+0xc0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d110      	bne.n	8003f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f5c:	f000 fb94 	bl	8004688 <prvInitialiseTaskLists>
 8003f60:	e00d      	b.n	8003f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <prvAddNewTaskToReadyList+0xc8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <prvAddNewTaskToReadyList+0xc4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d802      	bhi.n	8003f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f78:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <prvAddNewTaskToReadyList+0xc4>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f7e:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <prvAddNewTaskToReadyList+0xcc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <prvAddNewTaskToReadyList+0xcc>)
 8003f86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f88:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <prvAddNewTaskToReadyList+0xcc>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <prvAddNewTaskToReadyList+0xd0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	4a18      	ldr	r2, [pc, #96]	; (8004000 <prvAddNewTaskToReadyList+0xd0>)
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <prvAddNewTaskToReadyList+0xd4>)
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7ff fdbc 	bl	8003b36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fbe:	f000 fdbb 	bl	8004b38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <prvAddNewTaskToReadyList+0xc8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00e      	beq.n	8003fe8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <prvAddNewTaskToReadyList+0xc4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d207      	bcs.n	8003fe8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <prvAddNewTaskToReadyList+0xd8>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20001650 	.word	0x20001650
 8003ff4:	200014b0 	.word	0x200014b0
 8003ff8:	2000165c 	.word	0x2000165c
 8003ffc:	2000166c 	.word	0x2000166c
 8004000:	20001658 	.word	0x20001658
 8004004:	200014b4 	.word	0x200014b4
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004014:	f000 fd62 	bl	8004adc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <vTaskDelete+0x18>
 800401e:	4b38      	ldr	r3, [pc, #224]	; (8004100 <vTaskDelete+0xf4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	e000      	b.n	8004026 <vTaskDelete+0x1a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fddf 	bl	8003bf0 <uxListRemove>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d115      	bne.n	8004064 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403c:	4931      	ldr	r1, [pc, #196]	; (8004104 <vTaskDelete+0xf8>)
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <vTaskDelete+0x58>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	2201      	movs	r2, #1
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43da      	mvns	r2, r3
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <vTaskDelete+0xfc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4013      	ands	r3, r2
 8004060:	4a29      	ldr	r2, [pc, #164]	; (8004108 <vTaskDelete+0xfc>)
 8004062:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3318      	adds	r3, #24
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fdbd 	bl	8003bf0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004076:	4b25      	ldr	r3, [pc, #148]	; (800410c <vTaskDelete+0x100>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <vTaskDelete+0x100>)
 800407e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004080:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <vTaskDelete+0xf4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	429a      	cmp	r2, r3
 8004088:	d10b      	bne.n	80040a2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3304      	adds	r3, #4
 800408e:	4619      	mov	r1, r3
 8004090:	481f      	ldr	r0, [pc, #124]	; (8004110 <vTaskDelete+0x104>)
 8004092:	f7ff fd50 	bl	8003b36 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004096:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <vTaskDelete+0x108>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3301      	adds	r3, #1
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <vTaskDelete+0x108>)
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e009      	b.n	80040b6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <vTaskDelete+0x10c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <vTaskDelete+0x10c>)
 80040aa:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fb57 	bl	8004760 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80040b2:	f000 fb65 	bl	8004780 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80040b6:	f000 fd3f 	bl	8004b38 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80040ba:	4b18      	ldr	r3, [pc, #96]	; (800411c <vTaskDelete+0x110>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01a      	beq.n	80040f8 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <vTaskDelete+0xf4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d115      	bne.n	80040f8 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80040cc:	4b14      	ldr	r3, [pc, #80]	; (8004120 <vTaskDelete+0x114>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <vTaskDelete+0xdc>
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	e7fe      	b.n	80040e6 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80040e8:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <vTaskDelete+0x118>)
 80040ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200014b0 	.word	0x200014b0
 8004104:	200014b4 	.word	0x200014b4
 8004108:	20001658 	.word	0x20001658
 800410c:	2000166c 	.word	0x2000166c
 8004110:	20001624 	.word	0x20001624
 8004114:	20001638 	.word	0x20001638
 8004118:	20001650 	.word	0x20001650
 800411c:	2000165c 	.word	0x2000165c
 8004120:	20001678 	.word	0x20001678
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <vTaskDelay+0x60>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <vTaskDelay+0x2e>
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	e7fe      	b.n	8004154 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004156:	f000 f861 	bl	800421c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800415a:	2100      	movs	r1, #0
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fb2f 	bl	80047c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004162:	f000 f869 	bl	8004238 <xTaskResumeAll>
 8004166:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <vTaskDelay+0x64>)
 8004170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20001678 	.word	0x20001678
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004196:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <vTaskStartScheduler+0x74>)
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	2300      	movs	r3, #0
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	2282      	movs	r2, #130	; 0x82
 80041a2:	4919      	ldr	r1, [pc, #100]	; (8004208 <vTaskStartScheduler+0x78>)
 80041a4:	4819      	ldr	r0, [pc, #100]	; (800420c <vTaskStartScheduler+0x7c>)
 80041a6:	f7ff fde5 	bl	8003d74 <xTaskCreate>
 80041aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d115      	bne.n	80041de <vTaskStartScheduler+0x4e>
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <vTaskStartScheduler+0x80>)
 80041c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <vTaskStartScheduler+0x84>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <vTaskStartScheduler+0x88>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041d8:	f000 fbe2 	bl	80049a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041dc:	e00d      	b.n	80041fa <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e4:	d109      	bne.n	80041fa <vTaskStartScheduler+0x6a>
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	e7fe      	b.n	80041f8 <vTaskStartScheduler+0x68>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20001674 	.word	0x20001674
 8004208:	08005cac 	.word	0x08005cac
 800420c:	08004659 	.word	0x08004659
 8004210:	20001670 	.word	0x20001670
 8004214:	2000165c 	.word	0x2000165c
 8004218:	20001654 	.word	0x20001654

0800421c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <vTaskSuspendAll+0x18>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	4a03      	ldr	r2, [pc, #12]	; (8004234 <vTaskSuspendAll+0x18>)
 8004228:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20001678 	.word	0x20001678

08004238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004246:	4b41      	ldr	r3, [pc, #260]	; (800434c <xTaskResumeAll+0x114>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <xTaskResumeAll+0x2a>
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	e7fe      	b.n	8004260 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004262:	f000 fc3b 	bl	8004adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <xTaskResumeAll+0x114>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3b01      	subs	r3, #1
 800426c:	4a37      	ldr	r2, [pc, #220]	; (800434c <xTaskResumeAll+0x114>)
 800426e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004270:	4b36      	ldr	r3, [pc, #216]	; (800434c <xTaskResumeAll+0x114>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d161      	bne.n	800433c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <xTaskResumeAll+0x118>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05d      	beq.n	800433c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004280:	e02e      	b.n	80042e0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004282:	4b34      	ldr	r3, [pc, #208]	; (8004354 <xTaskResumeAll+0x11c>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3318      	adds	r3, #24
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fcae 	bl	8003bf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3304      	adds	r3, #4
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fca9 	bl	8003bf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	2201      	movs	r2, #1
 80042a4:	409a      	lsls	r2, r3
 80042a6:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <xTaskResumeAll+0x120>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <xTaskResumeAll+0x120>)
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4a27      	ldr	r2, [pc, #156]	; (800435c <xTaskResumeAll+0x124>)
 80042be:	441a      	add	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f7ff fc35 	bl	8003b36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <xTaskResumeAll+0x128>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <xTaskResumeAll+0x12c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042e0:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <xTaskResumeAll+0x11c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1cc      	bne.n	8004282 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042ee:	f000 fa47 	bl	8004780 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042f2:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <xTaskResumeAll+0x130>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d010      	beq.n	8004320 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042fe:	f000 f837 	bl	8004370 <xTaskIncrementTick>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004308:	4b16      	ldr	r3, [pc, #88]	; (8004364 <xTaskResumeAll+0x12c>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3b01      	subs	r3, #1
 8004312:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f1      	bne.n	80042fe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <xTaskResumeAll+0x130>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <xTaskResumeAll+0x12c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <xTaskResumeAll+0x134>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800433c:	f000 fbfc 	bl	8004b38 <vPortExitCritical>

	return xAlreadyYielded;
 8004340:	68bb      	ldr	r3, [r7, #8]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20001678 	.word	0x20001678
 8004350:	20001650 	.word	0x20001650
 8004354:	20001610 	.word	0x20001610
 8004358:	20001658 	.word	0x20001658
 800435c:	200014b4 	.word	0x200014b4
 8004360:	200014b0 	.word	0x200014b0
 8004364:	20001664 	.word	0x20001664
 8004368:	20001660 	.word	0x20001660
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800437a:	4b4e      	ldr	r3, [pc, #312]	; (80044b4 <xTaskIncrementTick+0x144>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 8087 	bne.w	8004492 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <xTaskIncrementTick+0x148>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800438c:	4a4a      	ldr	r2, [pc, #296]	; (80044b8 <xTaskIncrementTick+0x148>)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d11f      	bne.n	80043d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004398:	4b48      	ldr	r3, [pc, #288]	; (80044bc <xTaskIncrementTick+0x14c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <xTaskIncrementTick+0x46>
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	e7fe      	b.n	80043b4 <xTaskIncrementTick+0x44>
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <xTaskIncrementTick+0x14c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	4b40      	ldr	r3, [pc, #256]	; (80044c0 <xTaskIncrementTick+0x150>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3e      	ldr	r2, [pc, #248]	; (80044bc <xTaskIncrementTick+0x14c>)
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4a3e      	ldr	r2, [pc, #248]	; (80044c0 <xTaskIncrementTick+0x150>)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <xTaskIncrementTick+0x154>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3301      	adds	r3, #1
 80043d0:	4a3c      	ldr	r2, [pc, #240]	; (80044c4 <xTaskIncrementTick+0x154>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	f000 f9d4 	bl	8004780 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043d8:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <xTaskIncrementTick+0x158>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d348      	bcc.n	8004474 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e2:	4b36      	ldr	r3, [pc, #216]	; (80044bc <xTaskIncrementTick+0x14c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ec:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <xTaskIncrementTick+0x158>)
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043f2:	601a      	str	r2, [r3, #0]
					break;
 80043f4:	e03e      	b.n	8004474 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f6:	4b31      	ldr	r3, [pc, #196]	; (80044bc <xTaskIncrementTick+0x14c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d203      	bcs.n	8004416 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800440e:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <xTaskIncrementTick+0x158>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004414:	e02e      	b.n	8004474 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3304      	adds	r3, #4
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fbe8 	bl	8003bf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	3318      	adds	r3, #24
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fbdf 	bl	8003bf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2201      	movs	r2, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	4b24      	ldr	r3, [pc, #144]	; (80044cc <xTaskIncrementTick+0x15c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <xTaskIncrementTick+0x15c>)
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <xTaskIncrementTick+0x160>)
 8004452:	441a      	add	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7ff fb6b 	bl	8003b36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <xTaskIncrementTick+0x164>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	429a      	cmp	r2, r3
 800446c:	d3b9      	bcc.n	80043e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800446e:	2301      	movs	r3, #1
 8004470:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004472:	e7b6      	b.n	80043e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004474:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <xTaskIncrementTick+0x164>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4915      	ldr	r1, [pc, #84]	; (80044d0 <xTaskIncrementTick+0x160>)
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d907      	bls.n	800449c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e004      	b.n	800449c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <xTaskIncrementTick+0x168>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	4a0f      	ldr	r2, [pc, #60]	; (80044d8 <xTaskIncrementTick+0x168>)
 800449a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <xTaskIncrementTick+0x16c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80044a4:	2301      	movs	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044a8:	697b      	ldr	r3, [r7, #20]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20001678 	.word	0x20001678
 80044b8:	20001654 	.word	0x20001654
 80044bc:	20001608 	.word	0x20001608
 80044c0:	2000160c 	.word	0x2000160c
 80044c4:	20001668 	.word	0x20001668
 80044c8:	20001670 	.word	0x20001670
 80044cc:	20001658 	.word	0x20001658
 80044d0:	200014b4 	.word	0x200014b4
 80044d4:	200014b0 	.word	0x200014b0
 80044d8:	20001660 	.word	0x20001660
 80044dc:	20001664 	.word	0x20001664

080044e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <vTaskSwitchContext+0xa0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044ee:	4b25      	ldr	r3, [pc, #148]	; (8004584 <vTaskSwitchContext+0xa4>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044f4:	e03e      	b.n	8004574 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <vTaskSwitchContext+0xa4>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044fc:	4b22      	ldr	r3, [pc, #136]	; (8004588 <vTaskSwitchContext+0xa8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	f1c3 031f 	rsb	r3, r3, #31
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	491e      	ldr	r1, [pc, #120]	; (800458c <vTaskSwitchContext+0xac>)
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	e7fe      	b.n	8004538 <vTaskSwitchContext+0x58>
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4a11      	ldr	r2, [pc, #68]	; (800458c <vTaskSwitchContext+0xac>)
 8004546:	4413      	add	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	3308      	adds	r3, #8
 800455c:	429a      	cmp	r2, r3
 800455e:	d104      	bne.n	800456a <vTaskSwitchContext+0x8a>
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <vTaskSwitchContext+0xb0>)
 8004572:	6013      	str	r3, [r2, #0]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	20001678 	.word	0x20001678
 8004584:	20001664 	.word	0x20001664
 8004588:	20001658 	.word	0x20001658
 800458c:	200014b4 	.word	0x200014b4
 8004590:	200014b0 	.word	0x200014b0

08004594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <xTaskRemoveFromEventList+0x2a>
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e7fe      	b.n	80045bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3318      	adds	r3, #24
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fb14 	bl	8003bf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <xTaskRemoveFromEventList+0xac>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11c      	bne.n	800460a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fb0b 	bl	8003bf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	2201      	movs	r2, #1
 80045e0:	409a      	lsls	r2, r3
 80045e2:	4b18      	ldr	r3, [pc, #96]	; (8004644 <xTaskRemoveFromEventList+0xb0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	4a16      	ldr	r2, [pc, #88]	; (8004644 <xTaskRemoveFromEventList+0xb0>)
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4a13      	ldr	r2, [pc, #76]	; (8004648 <xTaskRemoveFromEventList+0xb4>)
 80045fa:	441a      	add	r2, r3
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f7ff fa97 	bl	8003b36 <vListInsertEnd>
 8004608:	e005      	b.n	8004616 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3318      	adds	r3, #24
 800460e:	4619      	mov	r1, r3
 8004610:	480e      	ldr	r0, [pc, #56]	; (800464c <xTaskRemoveFromEventList+0xb8>)
 8004612:	f7ff fa90 	bl	8003b36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <xTaskRemoveFromEventList+0xbc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	429a      	cmp	r2, r3
 8004622:	d905      	bls.n	8004630 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <xTaskRemoveFromEventList+0xc0>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e001      	b.n	8004634 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004634:	697b      	ldr	r3, [r7, #20]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20001678 	.word	0x20001678
 8004644:	20001658 	.word	0x20001658
 8004648:	200014b4 	.word	0x200014b4
 800464c:	20001610 	.word	0x20001610
 8004650:	200014b0 	.word	0x200014b0
 8004654:	20001664 	.word	0x20001664

08004658 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004660:	f000 f852 	bl	8004708 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <prvIdleTask+0x28>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d9f9      	bls.n	8004660 <prvIdleTask+0x8>
			{
				taskYIELD();
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <prvIdleTask+0x2c>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800467c:	e7f0      	b.n	8004660 <prvIdleTask+0x8>
 800467e:	bf00      	nop
 8004680:	200014b4 	.word	0x200014b4
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	e00c      	b.n	80046ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <prvInitialiseTaskLists+0x60>)
 80046a0:	4413      	add	r3, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fa1a 	bl	8003adc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3301      	adds	r3, #1
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b0e      	cmp	r3, #14
 80046b2:	d9ef      	bls.n	8004694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046b4:	480d      	ldr	r0, [pc, #52]	; (80046ec <prvInitialiseTaskLists+0x64>)
 80046b6:	f7ff fa11 	bl	8003adc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ba:	480d      	ldr	r0, [pc, #52]	; (80046f0 <prvInitialiseTaskLists+0x68>)
 80046bc:	f7ff fa0e 	bl	8003adc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046c0:	480c      	ldr	r0, [pc, #48]	; (80046f4 <prvInitialiseTaskLists+0x6c>)
 80046c2:	f7ff fa0b 	bl	8003adc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046c6:	480c      	ldr	r0, [pc, #48]	; (80046f8 <prvInitialiseTaskLists+0x70>)
 80046c8:	f7ff fa08 	bl	8003adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046cc:	480b      	ldr	r0, [pc, #44]	; (80046fc <prvInitialiseTaskLists+0x74>)
 80046ce:	f7ff fa05 	bl	8003adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <prvInitialiseTaskLists+0x78>)
 80046d4:	4a05      	ldr	r2, [pc, #20]	; (80046ec <prvInitialiseTaskLists+0x64>)
 80046d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <prvInitialiseTaskLists+0x7c>)
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <prvInitialiseTaskLists+0x68>)
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200014b4 	.word	0x200014b4
 80046ec:	200015e0 	.word	0x200015e0
 80046f0:	200015f4 	.word	0x200015f4
 80046f4:	20001610 	.word	0x20001610
 80046f8:	20001624 	.word	0x20001624
 80046fc:	2000163c 	.word	0x2000163c
 8004700:	20001608 	.word	0x20001608
 8004704:	2000160c 	.word	0x2000160c

08004708 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800470e:	e019      	b.n	8004744 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004710:	f000 f9e4 	bl	8004adc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <prvCheckTasksWaitingTermination+0x4c>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fa65 	bl	8003bf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <prvCheckTasksWaitingTermination+0x50>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3b01      	subs	r3, #1
 800472c:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <prvCheckTasksWaitingTermination+0x50>)
 800472e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <prvCheckTasksWaitingTermination+0x54>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	4a09      	ldr	r2, [pc, #36]	; (800475c <prvCheckTasksWaitingTermination+0x54>)
 8004738:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800473a:	f000 f9fd 	bl	8004b38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f80e 	bl	8004760 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <prvCheckTasksWaitingTermination+0x54>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e1      	bne.n	8004710 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20001624 	.word	0x20001624
 8004758:	20001650 	.word	0x20001650
 800475c:	20001638 	.word	0x20001638

08004760 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff f941 	bl	80039f4 <vPortFree>
			vPortFree( pxTCB );
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff f93e 	bl	80039f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <prvResetNextTaskUnblockTime+0x38>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <prvResetNextTaskUnblockTime+0x3c>)
 8004792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004796:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004798:	e008      	b.n	80047ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479a:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <prvResetNextTaskUnblockTime+0x38>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a04      	ldr	r2, [pc, #16]	; (80047bc <prvResetNextTaskUnblockTime+0x3c>)
 80047aa:	6013      	str	r3, [r2, #0]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20001608 	.word	0x20001608
 80047bc:	20001670 	.word	0x20001670

080047c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fa0a 	bl	8003bf0 <uxListRemove>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2201      	movs	r2, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43da      	mvns	r2, r3
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4013      	ands	r3, r2
 80047f6:	4a20      	ldr	r2, [pc, #128]	; (8004878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004800:	d10a      	bne.n	8004818 <prvAddCurrentTaskToDelayedList+0x58>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	481a      	ldr	r0, [pc, #104]	; (800487c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004812:	f7ff f990 	bl	8003b36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004816:	e026      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d209      	bcs.n	8004844 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f7ff f99e 	bl	8003b7e <vListInsert>
}
 8004842:	e010      	b.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7ff f994 	bl	8003b7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d202      	bcs.n	8004866 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004860:	4a09      	ldr	r2, [pc, #36]	; (8004888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6013      	str	r3, [r2, #0]
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20001654 	.word	0x20001654
 8004874:	200014b0 	.word	0x200014b0
 8004878:	20001658 	.word	0x20001658
 800487c:	2000163c 	.word	0x2000163c
 8004880:	2000160c 	.word	0x2000160c
 8004884:	20001608 	.word	0x20001608
 8004888:	20001670 	.word	0x20001670

0800488c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3b04      	subs	r3, #4
 800489c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b04      	subs	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048bc:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <pxPortInitialiseStack+0x64>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3b14      	subs	r3, #20
 80048c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3b04      	subs	r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f06f 0202 	mvn.w	r2, #2
 80048da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b20      	subs	r3, #32
 80048e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048e2:	68fb      	ldr	r3, [r7, #12]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	080048f5 	.word	0x080048f5

080048f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <prvTaskExitError+0x50>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004906:	d009      	beq.n	800491c <prvTaskExitError+0x28>
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e7fe      	b.n	800491a <prvTaskExitError+0x26>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800492e:	bf00      	nop
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0fc      	beq.n	8004930 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000014 	.word	0x20000014
	...

08004950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <pxCurrentTCBConst2>)
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	6808      	ldr	r0, [r1, #0]
 8004956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	f380 8809 	msr	PSP, r0
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	4770      	bx	lr
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst2>:
 8004970:	200014b0 	.word	0x200014b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004978:	4808      	ldr	r0, [pc, #32]	; (800499c <prvPortStartFirstTask+0x24>)
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f380 8808 	msr	MSP, r0
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f380 8814 	msr	CONTROL, r0
 800498a:	b662      	cpsie	i
 800498c:	b661      	cpsie	f
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	df00      	svc	0
 8004998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800499a:	bf00      	nop
 800499c:	e000ed08 	.word	0xe000ed08

080049a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049a6:	4b44      	ldr	r3, [pc, #272]	; (8004ab8 <xPortStartScheduler+0x118>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a44      	ldr	r2, [pc, #272]	; (8004abc <xPortStartScheduler+0x11c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d109      	bne.n	80049c4 <xPortStartScheduler+0x24>
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e7fe      	b.n	80049c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049c4:	4b3c      	ldr	r3, [pc, #240]	; (8004ab8 <xPortStartScheduler+0x118>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a3d      	ldr	r2, [pc, #244]	; (8004ac0 <xPortStartScheduler+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d109      	bne.n	80049e2 <xPortStartScheduler+0x42>
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e7fe      	b.n	80049e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049e2:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <xPortStartScheduler+0x124>)
 80049e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	22ff      	movs	r2, #255	; 0xff
 80049f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <xPortStartScheduler+0x128>)
 8004a08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a0a:	4b30      	ldr	r3, [pc, #192]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a10:	e009      	b.n	8004a26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004a12:	4b2e      	ldr	r3, [pc, #184]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b80      	cmp	r3, #128	; 0x80
 8004a30:	d0ef      	beq.n	8004a12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a32:	4b26      	ldr	r3, [pc, #152]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1c3 0307 	rsb	r3, r3, #7
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d009      	beq.n	8004a52 <xPortStartScheduler+0xb2>
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	e7fe      	b.n	8004a50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a52:	4b1e      	ldr	r3, [pc, #120]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a64:	4a19      	ldr	r2, [pc, #100]	; (8004acc <xPortStartScheduler+0x12c>)
 8004a66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a88:	f000 f8d6 	bl	8004c38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a8c:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a92:	f000 f8f5 	bl	8004c80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004aa0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aa2:	f7ff ff69 	bl	8004978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aa6:	f7ff fd1b 	bl	80044e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004aaa:	f7ff ff23 	bl	80048f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	e000ed00 	.word	0xe000ed00
 8004abc:	410fc271 	.word	0x410fc271
 8004ac0:	410fc270 	.word	0x410fc270
 8004ac4:	e000e400 	.word	0xe000e400
 8004ac8:	2000167c 	.word	0x2000167c
 8004acc:	20001680 	.word	0x20001680
 8004ad0:	e000ed20 	.word	0xe000ed20
 8004ad4:	20000014 	.word	0x20000014
 8004ad8:	e000ef34 	.word	0xe000ef34

08004adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <vPortEnterCritical+0x54>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <vPortEnterCritical+0x54>)
 8004afc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <vPortEnterCritical+0x54>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10e      	bne.n	8004b24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <vPortEnterCritical+0x58>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <vPortEnterCritical+0x48>
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	603b      	str	r3, [r7, #0]
 8004b22:	e7fe      	b.n	8004b22 <vPortEnterCritical+0x46>
	}
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20000014 	.word	0x20000014
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b3e:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <vPortExitCritical+0x4c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <vPortExitCritical+0x22>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	e7fe      	b.n	8004b58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <vPortExitCritical+0x4c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <vPortExitCritical+0x4c>)
 8004b62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <vPortExitCritical+0x4c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d104      	bne.n	8004b76 <vPortExitCritical+0x3e>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000014 	.word	0x20000014
	...

08004b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b90:	f3ef 8009 	mrs	r0, PSP
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <pxCurrentTCBConst>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f01e 0f10 	tst.w	lr, #16
 8004ba0:	bf08      	it	eq
 8004ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	6010      	str	r0, [r2, #0]
 8004bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bb4:	f380 8811 	msr	BASEPRI, r0
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f7ff fc8e 	bl	80044e0 <vTaskSwitchContext>
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f380 8811 	msr	BASEPRI, r0
 8004bcc:	bc09      	pop	{r0, r3}
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	6808      	ldr	r0, [r1, #0]
 8004bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd6:	f01e 0f10 	tst.w	lr, #16
 8004bda:	bf08      	it	eq
 8004bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004be0:	f380 8809 	msr	PSP, r0
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst>:
 8004bf0:	200014b0 	.word	0x200014b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c10:	f7ff fbae 	bl	8004370 <xTaskIncrementTick>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <SysTick_Handler+0x3c>)
 8004c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	2300      	movs	r3, #0
 8004c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <vPortSetupTimerInterrupt+0x34>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortSetupTimerInterrupt+0x38>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <vPortSetupTimerInterrupt+0x3c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <vPortSetupTimerInterrupt+0x40>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	099b      	lsrs	r3, r3, #6
 8004c54:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <vPortSetupTimerInterrupt+0x44>)
 8004c56:	3b01      	subs	r3, #1
 8004c58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c5a:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <vPortSetupTimerInterrupt+0x34>)
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e010 	.word	0xe000e010
 8004c70:	e000e018 	.word	0xe000e018
 8004c74:	20000004 	.word	0x20000004
 8004c78:	10624dd3 	.word	0x10624dd3
 8004c7c:	e000e014 	.word	0xe000e014

08004c80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c90 <vPortEnableVFP+0x10>
 8004c84:	6801      	ldr	r1, [r0, #0]
 8004c86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c8a:	6001      	str	r1, [r0, #0]
 8004c8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c8e:	bf00      	nop
 8004c90:	e000ed88 	.word	0xe000ed88

08004c94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c9a:	f3ef 8305 	mrs	r3, IPSR
 8004c9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b0f      	cmp	r3, #15
 8004ca4:	d913      	bls.n	8004cce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ca6:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <vPortValidateInterruptPriority+0x6c>)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cb0:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <vPortValidateInterruptPriority+0x70>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	7afa      	ldrb	r2, [r7, #11]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d209      	bcs.n	8004cce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	e7fe      	b.n	8004ccc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <vPortValidateInterruptPriority+0x74>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <vPortValidateInterruptPriority+0x78>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d909      	bls.n	8004cf2 <vPortValidateInterruptPriority+0x5e>
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	e7fe      	b.n	8004cf0 <vPortValidateInterruptPriority+0x5c>
	}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	e000e3f0 	.word	0xe000e3f0
 8004d04:	2000167c 	.word	0x2000167c
 8004d08:	e000ed0c 	.word	0xe000ed0c
 8004d0c:	20001680 	.word	0x20001680

08004d10 <__errno>:
 8004d10:	4b01      	ldr	r3, [pc, #4]	; (8004d18 <__errno+0x8>)
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000018 	.word	0x20000018

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4e0d      	ldr	r6, [pc, #52]	; (8004d54 <__libc_init_array+0x38>)
 8004d20:	4c0d      	ldr	r4, [pc, #52]	; (8004d58 <__libc_init_array+0x3c>)
 8004d22:	1ba4      	subs	r4, r4, r6
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	2500      	movs	r5, #0
 8004d28:	42a5      	cmp	r5, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	4e0b      	ldr	r6, [pc, #44]	; (8004d5c <__libc_init_array+0x40>)
 8004d2e:	4c0c      	ldr	r4, [pc, #48]	; (8004d60 <__libc_init_array+0x44>)
 8004d30:	f000 ff0c 	bl	8005b4c <_init>
 8004d34:	1ba4      	subs	r4, r4, r6
 8004d36:	10a4      	asrs	r4, r4, #2
 8004d38:	2500      	movs	r5, #0
 8004d3a:	42a5      	cmp	r5, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d44:	4798      	blx	r3
 8004d46:	3501      	adds	r5, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d4e:	4798      	blx	r3
 8004d50:	3501      	adds	r5, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	08005d6c 	.word	0x08005d6c
 8004d58:	08005d6c 	.word	0x08005d6c
 8004d5c:	08005d6c 	.word	0x08005d6c
 8004d60:	08005d70 	.word	0x08005d70

08004d64 <memset>:
 8004d64:	4402      	add	r2, r0
 8004d66:	4603      	mov	r3, r0
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d100      	bne.n	8004d6e <memset+0xa>
 8004d6c:	4770      	bx	lr
 8004d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d72:	e7f9      	b.n	8004d68 <memset+0x4>

08004d74 <iprintf>:
 8004d74:	b40f      	push	{r0, r1, r2, r3}
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <iprintf+0x2c>)
 8004d78:	b513      	push	{r0, r1, r4, lr}
 8004d7a:	681c      	ldr	r4, [r3, #0]
 8004d7c:	b124      	cbz	r4, 8004d88 <iprintf+0x14>
 8004d7e:	69a3      	ldr	r3, [r4, #24]
 8004d80:	b913      	cbnz	r3, 8004d88 <iprintf+0x14>
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f856 	bl	8004e34 <__sinit>
 8004d88:	ab05      	add	r3, sp, #20
 8004d8a:	9a04      	ldr	r2, [sp, #16]
 8004d8c:	68a1      	ldr	r1, [r4, #8]
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	4620      	mov	r0, r4
 8004d92:	f000 f95d 	bl	8005050 <_vfiprintf_r>
 8004d96:	b002      	add	sp, #8
 8004d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d9c:	b004      	add	sp, #16
 8004d9e:	4770      	bx	lr
 8004da0:	20000018 	.word	0x20000018

08004da4 <strcpy>:
 8004da4:	4603      	mov	r3, r0
 8004da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004daa:	f803 2b01 	strb.w	r2, [r3], #1
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d1f9      	bne.n	8004da6 <strcpy+0x2>
 8004db2:	4770      	bx	lr

08004db4 <std>:
 8004db4:	2300      	movs	r3, #0
 8004db6:	b510      	push	{r4, lr}
 8004db8:	4604      	mov	r4, r0
 8004dba:	e9c0 3300 	strd	r3, r3, [r0]
 8004dbe:	6083      	str	r3, [r0, #8]
 8004dc0:	8181      	strh	r1, [r0, #12]
 8004dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8004dc4:	81c2      	strh	r2, [r0, #14]
 8004dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dca:	6183      	str	r3, [r0, #24]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	2208      	movs	r2, #8
 8004dd0:	305c      	adds	r0, #92	; 0x5c
 8004dd2:	f7ff ffc7 	bl	8004d64 <memset>
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <std+0x38>)
 8004dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <std+0x3c>)
 8004ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <std+0x40>)
 8004de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <std+0x44>)
 8004de4:	6224      	str	r4, [r4, #32]
 8004de6:	6323      	str	r3, [r4, #48]	; 0x30
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	bf00      	nop
 8004dec:	080055ad 	.word	0x080055ad
 8004df0:	080055cf 	.word	0x080055cf
 8004df4:	08005607 	.word	0x08005607
 8004df8:	0800562b 	.word	0x0800562b

08004dfc <_cleanup_r>:
 8004dfc:	4901      	ldr	r1, [pc, #4]	; (8004e04 <_cleanup_r+0x8>)
 8004dfe:	f000 b885 	b.w	8004f0c <_fwalk_reent>
 8004e02:	bf00      	nop
 8004e04:	08005905 	.word	0x08005905

08004e08 <__sfmoreglue>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	1e4a      	subs	r2, r1, #1
 8004e0c:	2568      	movs	r5, #104	; 0x68
 8004e0e:	4355      	muls	r5, r2
 8004e10:	460e      	mov	r6, r1
 8004e12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e16:	f000 f897 	bl	8004f48 <_malloc_r>
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	b140      	cbz	r0, 8004e30 <__sfmoreglue+0x28>
 8004e1e:	2100      	movs	r1, #0
 8004e20:	e9c0 1600 	strd	r1, r6, [r0]
 8004e24:	300c      	adds	r0, #12
 8004e26:	60a0      	str	r0, [r4, #8]
 8004e28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e2c:	f7ff ff9a 	bl	8004d64 <memset>
 8004e30:	4620      	mov	r0, r4
 8004e32:	bd70      	pop	{r4, r5, r6, pc}

08004e34 <__sinit>:
 8004e34:	6983      	ldr	r3, [r0, #24]
 8004e36:	b510      	push	{r4, lr}
 8004e38:	4604      	mov	r4, r0
 8004e3a:	bb33      	cbnz	r3, 8004e8a <__sinit+0x56>
 8004e3c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004e40:	6503      	str	r3, [r0, #80]	; 0x50
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <__sinit+0x58>)
 8004e44:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <__sinit+0x5c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6282      	str	r2, [r0, #40]	; 0x28
 8004e4a:	4298      	cmp	r0, r3
 8004e4c:	bf04      	itt	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	6183      	streq	r3, [r0, #24]
 8004e52:	f000 f81f 	bl	8004e94 <__sfp>
 8004e56:	6060      	str	r0, [r4, #4]
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 f81b 	bl	8004e94 <__sfp>
 8004e5e:	60a0      	str	r0, [r4, #8]
 8004e60:	4620      	mov	r0, r4
 8004e62:	f000 f817 	bl	8004e94 <__sfp>
 8004e66:	2200      	movs	r2, #0
 8004e68:	60e0      	str	r0, [r4, #12]
 8004e6a:	2104      	movs	r1, #4
 8004e6c:	6860      	ldr	r0, [r4, #4]
 8004e6e:	f7ff ffa1 	bl	8004db4 <std>
 8004e72:	2201      	movs	r2, #1
 8004e74:	2109      	movs	r1, #9
 8004e76:	68a0      	ldr	r0, [r4, #8]
 8004e78:	f7ff ff9c 	bl	8004db4 <std>
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	2112      	movs	r1, #18
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	f7ff ff97 	bl	8004db4 <std>
 8004e86:	2301      	movs	r3, #1
 8004e88:	61a3      	str	r3, [r4, #24]
 8004e8a:	bd10      	pop	{r4, pc}
 8004e8c:	08005ccc 	.word	0x08005ccc
 8004e90:	08004dfd 	.word	0x08004dfd

08004e94 <__sfp>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	4b1b      	ldr	r3, [pc, #108]	; (8004f04 <__sfp+0x70>)
 8004e98:	681e      	ldr	r6, [r3, #0]
 8004e9a:	69b3      	ldr	r3, [r6, #24]
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	b913      	cbnz	r3, 8004ea6 <__sfp+0x12>
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f7ff ffc7 	bl	8004e34 <__sinit>
 8004ea6:	3648      	adds	r6, #72	; 0x48
 8004ea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	d503      	bpl.n	8004eb8 <__sfp+0x24>
 8004eb0:	6833      	ldr	r3, [r6, #0]
 8004eb2:	b133      	cbz	r3, 8004ec2 <__sfp+0x2e>
 8004eb4:	6836      	ldr	r6, [r6, #0]
 8004eb6:	e7f7      	b.n	8004ea8 <__sfp+0x14>
 8004eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ebc:	b16d      	cbz	r5, 8004eda <__sfp+0x46>
 8004ebe:	3468      	adds	r4, #104	; 0x68
 8004ec0:	e7f4      	b.n	8004eac <__sfp+0x18>
 8004ec2:	2104      	movs	r1, #4
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f7ff ff9f 	bl	8004e08 <__sfmoreglue>
 8004eca:	6030      	str	r0, [r6, #0]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d1f1      	bne.n	8004eb4 <__sfp+0x20>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eda:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <__sfp+0x74>)
 8004edc:	6665      	str	r5, [r4, #100]	; 0x64
 8004ede:	e9c4 5500 	strd	r5, r5, [r4]
 8004ee2:	60a5      	str	r5, [r4, #8]
 8004ee4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ee8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004eec:	2208      	movs	r2, #8
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ef4:	f7ff ff36 	bl	8004d64 <memset>
 8004ef8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004efc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f00:	e7e9      	b.n	8004ed6 <__sfp+0x42>
 8004f02:	bf00      	nop
 8004f04:	08005ccc 	.word	0x08005ccc
 8004f08:	ffff0001 	.word	0xffff0001

08004f0c <_fwalk_reent>:
 8004f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f10:	4680      	mov	r8, r0
 8004f12:	4689      	mov	r9, r1
 8004f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f18:	2600      	movs	r6, #0
 8004f1a:	b914      	cbnz	r4, 8004f22 <_fwalk_reent+0x16>
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f22:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004f26:	3f01      	subs	r7, #1
 8004f28:	d501      	bpl.n	8004f2e <_fwalk_reent+0x22>
 8004f2a:	6824      	ldr	r4, [r4, #0]
 8004f2c:	e7f5      	b.n	8004f1a <_fwalk_reent+0xe>
 8004f2e:	89ab      	ldrh	r3, [r5, #12]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d907      	bls.n	8004f44 <_fwalk_reent+0x38>
 8004f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	d003      	beq.n	8004f44 <_fwalk_reent+0x38>
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4640      	mov	r0, r8
 8004f40:	47c8      	blx	r9
 8004f42:	4306      	orrs	r6, r0
 8004f44:	3568      	adds	r5, #104	; 0x68
 8004f46:	e7ee      	b.n	8004f26 <_fwalk_reent+0x1a>

08004f48 <_malloc_r>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	1ccd      	adds	r5, r1, #3
 8004f4c:	f025 0503 	bic.w	r5, r5, #3
 8004f50:	3508      	adds	r5, #8
 8004f52:	2d0c      	cmp	r5, #12
 8004f54:	bf38      	it	cc
 8004f56:	250c      	movcc	r5, #12
 8004f58:	2d00      	cmp	r5, #0
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	db01      	blt.n	8004f62 <_malloc_r+0x1a>
 8004f5e:	42a9      	cmp	r1, r5
 8004f60:	d903      	bls.n	8004f6a <_malloc_r+0x22>
 8004f62:	230c      	movs	r3, #12
 8004f64:	6033      	str	r3, [r6, #0]
 8004f66:	2000      	movs	r0, #0
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
 8004f6a:	f000 fd6b 	bl	8005a44 <__malloc_lock>
 8004f6e:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <_malloc_r+0xac>)
 8004f70:	6814      	ldr	r4, [r2, #0]
 8004f72:	4621      	mov	r1, r4
 8004f74:	b991      	cbnz	r1, 8004f9c <_malloc_r+0x54>
 8004f76:	4c20      	ldr	r4, [pc, #128]	; (8004ff8 <_malloc_r+0xb0>)
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	b91b      	cbnz	r3, 8004f84 <_malloc_r+0x3c>
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f000 fb05 	bl	800558c <_sbrk_r>
 8004f82:	6020      	str	r0, [r4, #0]
 8004f84:	4629      	mov	r1, r5
 8004f86:	4630      	mov	r0, r6
 8004f88:	f000 fb00 	bl	800558c <_sbrk_r>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d124      	bne.n	8004fda <_malloc_r+0x92>
 8004f90:	230c      	movs	r3, #12
 8004f92:	6033      	str	r3, [r6, #0]
 8004f94:	4630      	mov	r0, r6
 8004f96:	f000 fd56 	bl	8005a46 <__malloc_unlock>
 8004f9a:	e7e4      	b.n	8004f66 <_malloc_r+0x1e>
 8004f9c:	680b      	ldr	r3, [r1, #0]
 8004f9e:	1b5b      	subs	r3, r3, r5
 8004fa0:	d418      	bmi.n	8004fd4 <_malloc_r+0x8c>
 8004fa2:	2b0b      	cmp	r3, #11
 8004fa4:	d90f      	bls.n	8004fc6 <_malloc_r+0x7e>
 8004fa6:	600b      	str	r3, [r1, #0]
 8004fa8:	50cd      	str	r5, [r1, r3]
 8004faa:	18cc      	adds	r4, r1, r3
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 fd4a 	bl	8005a46 <__malloc_unlock>
 8004fb2:	f104 000b 	add.w	r0, r4, #11
 8004fb6:	1d23      	adds	r3, r4, #4
 8004fb8:	f020 0007 	bic.w	r0, r0, #7
 8004fbc:	1ac3      	subs	r3, r0, r3
 8004fbe:	d0d3      	beq.n	8004f68 <_malloc_r+0x20>
 8004fc0:	425a      	negs	r2, r3
 8004fc2:	50e2      	str	r2, [r4, r3]
 8004fc4:	e7d0      	b.n	8004f68 <_malloc_r+0x20>
 8004fc6:	428c      	cmp	r4, r1
 8004fc8:	684b      	ldr	r3, [r1, #4]
 8004fca:	bf16      	itet	ne
 8004fcc:	6063      	strne	r3, [r4, #4]
 8004fce:	6013      	streq	r3, [r2, #0]
 8004fd0:	460c      	movne	r4, r1
 8004fd2:	e7eb      	b.n	8004fac <_malloc_r+0x64>
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	6849      	ldr	r1, [r1, #4]
 8004fd8:	e7cc      	b.n	8004f74 <_malloc_r+0x2c>
 8004fda:	1cc4      	adds	r4, r0, #3
 8004fdc:	f024 0403 	bic.w	r4, r4, #3
 8004fe0:	42a0      	cmp	r0, r4
 8004fe2:	d005      	beq.n	8004ff0 <_malloc_r+0xa8>
 8004fe4:	1a21      	subs	r1, r4, r0
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f000 fad0 	bl	800558c <_sbrk_r>
 8004fec:	3001      	adds	r0, #1
 8004fee:	d0cf      	beq.n	8004f90 <_malloc_r+0x48>
 8004ff0:	6025      	str	r5, [r4, #0]
 8004ff2:	e7db      	b.n	8004fac <_malloc_r+0x64>
 8004ff4:	20001684 	.word	0x20001684
 8004ff8:	20001688 	.word	0x20001688

08004ffc <__sfputc_r>:
 8004ffc:	6893      	ldr	r3, [r2, #8]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	b410      	push	{r4}
 8005004:	6093      	str	r3, [r2, #8]
 8005006:	da08      	bge.n	800501a <__sfputc_r+0x1e>
 8005008:	6994      	ldr	r4, [r2, #24]
 800500a:	42a3      	cmp	r3, r4
 800500c:	db01      	blt.n	8005012 <__sfputc_r+0x16>
 800500e:	290a      	cmp	r1, #10
 8005010:	d103      	bne.n	800501a <__sfputc_r+0x1e>
 8005012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005016:	f000 bb0d 	b.w	8005634 <__swbuf_r>
 800501a:	6813      	ldr	r3, [r2, #0]
 800501c:	1c58      	adds	r0, r3, #1
 800501e:	6010      	str	r0, [r2, #0]
 8005020:	7019      	strb	r1, [r3, #0]
 8005022:	4608      	mov	r0, r1
 8005024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005028:	4770      	bx	lr

0800502a <__sfputs_r>:
 800502a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502c:	4606      	mov	r6, r0
 800502e:	460f      	mov	r7, r1
 8005030:	4614      	mov	r4, r2
 8005032:	18d5      	adds	r5, r2, r3
 8005034:	42ac      	cmp	r4, r5
 8005036:	d101      	bne.n	800503c <__sfputs_r+0x12>
 8005038:	2000      	movs	r0, #0
 800503a:	e007      	b.n	800504c <__sfputs_r+0x22>
 800503c:	463a      	mov	r2, r7
 800503e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005042:	4630      	mov	r0, r6
 8005044:	f7ff ffda 	bl	8004ffc <__sfputc_r>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d1f3      	bne.n	8005034 <__sfputs_r+0xa>
 800504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005050 <_vfiprintf_r>:
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	460c      	mov	r4, r1
 8005056:	b09d      	sub	sp, #116	; 0x74
 8005058:	4617      	mov	r7, r2
 800505a:	461d      	mov	r5, r3
 800505c:	4606      	mov	r6, r0
 800505e:	b118      	cbz	r0, 8005068 <_vfiprintf_r+0x18>
 8005060:	6983      	ldr	r3, [r0, #24]
 8005062:	b90b      	cbnz	r3, 8005068 <_vfiprintf_r+0x18>
 8005064:	f7ff fee6 	bl	8004e34 <__sinit>
 8005068:	4b7c      	ldr	r3, [pc, #496]	; (800525c <_vfiprintf_r+0x20c>)
 800506a:	429c      	cmp	r4, r3
 800506c:	d158      	bne.n	8005120 <_vfiprintf_r+0xd0>
 800506e:	6874      	ldr	r4, [r6, #4]
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	0718      	lsls	r0, r3, #28
 8005074:	d55e      	bpl.n	8005134 <_vfiprintf_r+0xe4>
 8005076:	6923      	ldr	r3, [r4, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d05b      	beq.n	8005134 <_vfiprintf_r+0xe4>
 800507c:	2300      	movs	r3, #0
 800507e:	9309      	str	r3, [sp, #36]	; 0x24
 8005080:	2320      	movs	r3, #32
 8005082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005086:	2330      	movs	r3, #48	; 0x30
 8005088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800508c:	9503      	str	r5, [sp, #12]
 800508e:	f04f 0b01 	mov.w	fp, #1
 8005092:	46b8      	mov	r8, r7
 8005094:	4645      	mov	r5, r8
 8005096:	f815 3b01 	ldrb.w	r3, [r5], #1
 800509a:	b10b      	cbz	r3, 80050a0 <_vfiprintf_r+0x50>
 800509c:	2b25      	cmp	r3, #37	; 0x25
 800509e:	d154      	bne.n	800514a <_vfiprintf_r+0xfa>
 80050a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80050a4:	d00b      	beq.n	80050be <_vfiprintf_r+0x6e>
 80050a6:	4653      	mov	r3, sl
 80050a8:	463a      	mov	r2, r7
 80050aa:	4621      	mov	r1, r4
 80050ac:	4630      	mov	r0, r6
 80050ae:	f7ff ffbc 	bl	800502a <__sfputs_r>
 80050b2:	3001      	adds	r0, #1
 80050b4:	f000 80c2 	beq.w	800523c <_vfiprintf_r+0x1ec>
 80050b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ba:	4453      	add	r3, sl
 80050bc:	9309      	str	r3, [sp, #36]	; 0x24
 80050be:	f898 3000 	ldrb.w	r3, [r8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80ba 	beq.w	800523c <_vfiprintf_r+0x1ec>
 80050c8:	2300      	movs	r3, #0
 80050ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050d2:	9304      	str	r3, [sp, #16]
 80050d4:	9307      	str	r3, [sp, #28]
 80050d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050da:	931a      	str	r3, [sp, #104]	; 0x68
 80050dc:	46a8      	mov	r8, r5
 80050de:	2205      	movs	r2, #5
 80050e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80050e4:	485e      	ldr	r0, [pc, #376]	; (8005260 <_vfiprintf_r+0x210>)
 80050e6:	f7fb f873 	bl	80001d0 <memchr>
 80050ea:	9b04      	ldr	r3, [sp, #16]
 80050ec:	bb78      	cbnz	r0, 800514e <_vfiprintf_r+0xfe>
 80050ee:	06d9      	lsls	r1, r3, #27
 80050f0:	bf44      	itt	mi
 80050f2:	2220      	movmi	r2, #32
 80050f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050f8:	071a      	lsls	r2, r3, #28
 80050fa:	bf44      	itt	mi
 80050fc:	222b      	movmi	r2, #43	; 0x2b
 80050fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005102:	782a      	ldrb	r2, [r5, #0]
 8005104:	2a2a      	cmp	r2, #42	; 0x2a
 8005106:	d02a      	beq.n	800515e <_vfiprintf_r+0x10e>
 8005108:	9a07      	ldr	r2, [sp, #28]
 800510a:	46a8      	mov	r8, r5
 800510c:	2000      	movs	r0, #0
 800510e:	250a      	movs	r5, #10
 8005110:	4641      	mov	r1, r8
 8005112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005116:	3b30      	subs	r3, #48	; 0x30
 8005118:	2b09      	cmp	r3, #9
 800511a:	d969      	bls.n	80051f0 <_vfiprintf_r+0x1a0>
 800511c:	b360      	cbz	r0, 8005178 <_vfiprintf_r+0x128>
 800511e:	e024      	b.n	800516a <_vfiprintf_r+0x11a>
 8005120:	4b50      	ldr	r3, [pc, #320]	; (8005264 <_vfiprintf_r+0x214>)
 8005122:	429c      	cmp	r4, r3
 8005124:	d101      	bne.n	800512a <_vfiprintf_r+0xda>
 8005126:	68b4      	ldr	r4, [r6, #8]
 8005128:	e7a2      	b.n	8005070 <_vfiprintf_r+0x20>
 800512a:	4b4f      	ldr	r3, [pc, #316]	; (8005268 <_vfiprintf_r+0x218>)
 800512c:	429c      	cmp	r4, r3
 800512e:	bf08      	it	eq
 8005130:	68f4      	ldreq	r4, [r6, #12]
 8005132:	e79d      	b.n	8005070 <_vfiprintf_r+0x20>
 8005134:	4621      	mov	r1, r4
 8005136:	4630      	mov	r0, r6
 8005138:	f000 fae0 	bl	80056fc <__swsetup_r>
 800513c:	2800      	cmp	r0, #0
 800513e:	d09d      	beq.n	800507c <_vfiprintf_r+0x2c>
 8005140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005144:	b01d      	add	sp, #116	; 0x74
 8005146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514a:	46a8      	mov	r8, r5
 800514c:	e7a2      	b.n	8005094 <_vfiprintf_r+0x44>
 800514e:	4a44      	ldr	r2, [pc, #272]	; (8005260 <_vfiprintf_r+0x210>)
 8005150:	1a80      	subs	r0, r0, r2
 8005152:	fa0b f000 	lsl.w	r0, fp, r0
 8005156:	4318      	orrs	r0, r3
 8005158:	9004      	str	r0, [sp, #16]
 800515a:	4645      	mov	r5, r8
 800515c:	e7be      	b.n	80050dc <_vfiprintf_r+0x8c>
 800515e:	9a03      	ldr	r2, [sp, #12]
 8005160:	1d11      	adds	r1, r2, #4
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	9103      	str	r1, [sp, #12]
 8005166:	2a00      	cmp	r2, #0
 8005168:	db01      	blt.n	800516e <_vfiprintf_r+0x11e>
 800516a:	9207      	str	r2, [sp, #28]
 800516c:	e004      	b.n	8005178 <_vfiprintf_r+0x128>
 800516e:	4252      	negs	r2, r2
 8005170:	f043 0302 	orr.w	r3, r3, #2
 8005174:	9207      	str	r2, [sp, #28]
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	f898 3000 	ldrb.w	r3, [r8]
 800517c:	2b2e      	cmp	r3, #46	; 0x2e
 800517e:	d10e      	bne.n	800519e <_vfiprintf_r+0x14e>
 8005180:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005184:	2b2a      	cmp	r3, #42	; 0x2a
 8005186:	d138      	bne.n	80051fa <_vfiprintf_r+0x1aa>
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	9203      	str	r2, [sp, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	bfb8      	it	lt
 8005194:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005198:	f108 0802 	add.w	r8, r8, #2
 800519c:	9305      	str	r3, [sp, #20]
 800519e:	4d33      	ldr	r5, [pc, #204]	; (800526c <_vfiprintf_r+0x21c>)
 80051a0:	f898 1000 	ldrb.w	r1, [r8]
 80051a4:	2203      	movs	r2, #3
 80051a6:	4628      	mov	r0, r5
 80051a8:	f7fb f812 	bl	80001d0 <memchr>
 80051ac:	b140      	cbz	r0, 80051c0 <_vfiprintf_r+0x170>
 80051ae:	2340      	movs	r3, #64	; 0x40
 80051b0:	1b40      	subs	r0, r0, r5
 80051b2:	fa03 f000 	lsl.w	r0, r3, r0
 80051b6:	9b04      	ldr	r3, [sp, #16]
 80051b8:	4303      	orrs	r3, r0
 80051ba:	f108 0801 	add.w	r8, r8, #1
 80051be:	9304      	str	r3, [sp, #16]
 80051c0:	f898 1000 	ldrb.w	r1, [r8]
 80051c4:	482a      	ldr	r0, [pc, #168]	; (8005270 <_vfiprintf_r+0x220>)
 80051c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ca:	2206      	movs	r2, #6
 80051cc:	f108 0701 	add.w	r7, r8, #1
 80051d0:	f7fa fffe 	bl	80001d0 <memchr>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d037      	beq.n	8005248 <_vfiprintf_r+0x1f8>
 80051d8:	4b26      	ldr	r3, [pc, #152]	; (8005274 <_vfiprintf_r+0x224>)
 80051da:	bb1b      	cbnz	r3, 8005224 <_vfiprintf_r+0x1d4>
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	3307      	adds	r3, #7
 80051e0:	f023 0307 	bic.w	r3, r3, #7
 80051e4:	3308      	adds	r3, #8
 80051e6:	9303      	str	r3, [sp, #12]
 80051e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ea:	444b      	add	r3, r9
 80051ec:	9309      	str	r3, [sp, #36]	; 0x24
 80051ee:	e750      	b.n	8005092 <_vfiprintf_r+0x42>
 80051f0:	fb05 3202 	mla	r2, r5, r2, r3
 80051f4:	2001      	movs	r0, #1
 80051f6:	4688      	mov	r8, r1
 80051f8:	e78a      	b.n	8005110 <_vfiprintf_r+0xc0>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f108 0801 	add.w	r8, r8, #1
 8005200:	9305      	str	r3, [sp, #20]
 8005202:	4619      	mov	r1, r3
 8005204:	250a      	movs	r5, #10
 8005206:	4640      	mov	r0, r8
 8005208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800520c:	3a30      	subs	r2, #48	; 0x30
 800520e:	2a09      	cmp	r2, #9
 8005210:	d903      	bls.n	800521a <_vfiprintf_r+0x1ca>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0c3      	beq.n	800519e <_vfiprintf_r+0x14e>
 8005216:	9105      	str	r1, [sp, #20]
 8005218:	e7c1      	b.n	800519e <_vfiprintf_r+0x14e>
 800521a:	fb05 2101 	mla	r1, r5, r1, r2
 800521e:	2301      	movs	r3, #1
 8005220:	4680      	mov	r8, r0
 8005222:	e7f0      	b.n	8005206 <_vfiprintf_r+0x1b6>
 8005224:	ab03      	add	r3, sp, #12
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	4622      	mov	r2, r4
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <_vfiprintf_r+0x228>)
 800522c:	a904      	add	r1, sp, #16
 800522e:	4630      	mov	r0, r6
 8005230:	f3af 8000 	nop.w
 8005234:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005238:	4681      	mov	r9, r0
 800523a:	d1d5      	bne.n	80051e8 <_vfiprintf_r+0x198>
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	065b      	lsls	r3, r3, #25
 8005240:	f53f af7e 	bmi.w	8005140 <_vfiprintf_r+0xf0>
 8005244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005246:	e77d      	b.n	8005144 <_vfiprintf_r+0xf4>
 8005248:	ab03      	add	r3, sp, #12
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	4622      	mov	r2, r4
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <_vfiprintf_r+0x228>)
 8005250:	a904      	add	r1, sp, #16
 8005252:	4630      	mov	r0, r6
 8005254:	f000 f888 	bl	8005368 <_printf_i>
 8005258:	e7ec      	b.n	8005234 <_vfiprintf_r+0x1e4>
 800525a:	bf00      	nop
 800525c:	08005cf0 	.word	0x08005cf0
 8005260:	08005d30 	.word	0x08005d30
 8005264:	08005d10 	.word	0x08005d10
 8005268:	08005cd0 	.word	0x08005cd0
 800526c:	08005d36 	.word	0x08005d36
 8005270:	08005d3a 	.word	0x08005d3a
 8005274:	00000000 	.word	0x00000000
 8005278:	0800502b 	.word	0x0800502b

0800527c <_printf_common>:
 800527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	4691      	mov	r9, r2
 8005282:	461f      	mov	r7, r3
 8005284:	688a      	ldr	r2, [r1, #8]
 8005286:	690b      	ldr	r3, [r1, #16]
 8005288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800528c:	4293      	cmp	r3, r2
 800528e:	bfb8      	it	lt
 8005290:	4613      	movlt	r3, r2
 8005292:	f8c9 3000 	str.w	r3, [r9]
 8005296:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800529a:	4606      	mov	r6, r0
 800529c:	460c      	mov	r4, r1
 800529e:	b112      	cbz	r2, 80052a6 <_printf_common+0x2a>
 80052a0:	3301      	adds	r3, #1
 80052a2:	f8c9 3000 	str.w	r3, [r9]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	0699      	lsls	r1, r3, #26
 80052aa:	bf42      	ittt	mi
 80052ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052b0:	3302      	addmi	r3, #2
 80052b2:	f8c9 3000 	strmi.w	r3, [r9]
 80052b6:	6825      	ldr	r5, [r4, #0]
 80052b8:	f015 0506 	ands.w	r5, r5, #6
 80052bc:	d107      	bne.n	80052ce <_printf_common+0x52>
 80052be:	f104 0a19 	add.w	sl, r4, #25
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	f8d9 2000 	ldr.w	r2, [r9]
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	42ab      	cmp	r3, r5
 80052cc:	dc28      	bgt.n	8005320 <_printf_common+0xa4>
 80052ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	3300      	adds	r3, #0
 80052d6:	bf18      	it	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	0692      	lsls	r2, r2, #26
 80052dc:	d42d      	bmi.n	800533a <_printf_common+0xbe>
 80052de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e2:	4639      	mov	r1, r7
 80052e4:	4630      	mov	r0, r6
 80052e6:	47c0      	blx	r8
 80052e8:	3001      	adds	r0, #1
 80052ea:	d020      	beq.n	800532e <_printf_common+0xb2>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	68e5      	ldr	r5, [r4, #12]
 80052f0:	f8d9 2000 	ldr.w	r2, [r9]
 80052f4:	f003 0306 	and.w	r3, r3, #6
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	bf08      	it	eq
 80052fc:	1aad      	subeq	r5, r5, r2
 80052fe:	68a3      	ldr	r3, [r4, #8]
 8005300:	6922      	ldr	r2, [r4, #16]
 8005302:	bf0c      	ite	eq
 8005304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005308:	2500      	movne	r5, #0
 800530a:	4293      	cmp	r3, r2
 800530c:	bfc4      	itt	gt
 800530e:	1a9b      	subgt	r3, r3, r2
 8005310:	18ed      	addgt	r5, r5, r3
 8005312:	f04f 0900 	mov.w	r9, #0
 8005316:	341a      	adds	r4, #26
 8005318:	454d      	cmp	r5, r9
 800531a:	d11a      	bne.n	8005352 <_printf_common+0xd6>
 800531c:	2000      	movs	r0, #0
 800531e:	e008      	b.n	8005332 <_printf_common+0xb6>
 8005320:	2301      	movs	r3, #1
 8005322:	4652      	mov	r2, sl
 8005324:	4639      	mov	r1, r7
 8005326:	4630      	mov	r0, r6
 8005328:	47c0      	blx	r8
 800532a:	3001      	adds	r0, #1
 800532c:	d103      	bne.n	8005336 <_printf_common+0xba>
 800532e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005336:	3501      	adds	r5, #1
 8005338:	e7c3      	b.n	80052c2 <_printf_common+0x46>
 800533a:	18e1      	adds	r1, r4, r3
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	2030      	movs	r0, #48	; 0x30
 8005340:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005344:	4422      	add	r2, r4
 8005346:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800534a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800534e:	3302      	adds	r3, #2
 8005350:	e7c5      	b.n	80052de <_printf_common+0x62>
 8005352:	2301      	movs	r3, #1
 8005354:	4622      	mov	r2, r4
 8005356:	4639      	mov	r1, r7
 8005358:	4630      	mov	r0, r6
 800535a:	47c0      	blx	r8
 800535c:	3001      	adds	r0, #1
 800535e:	d0e6      	beq.n	800532e <_printf_common+0xb2>
 8005360:	f109 0901 	add.w	r9, r9, #1
 8005364:	e7d8      	b.n	8005318 <_printf_common+0x9c>
	...

08005368 <_printf_i>:
 8005368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800536c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005370:	460c      	mov	r4, r1
 8005372:	7e09      	ldrb	r1, [r1, #24]
 8005374:	b085      	sub	sp, #20
 8005376:	296e      	cmp	r1, #110	; 0x6e
 8005378:	4617      	mov	r7, r2
 800537a:	4606      	mov	r6, r0
 800537c:	4698      	mov	r8, r3
 800537e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005380:	f000 80b3 	beq.w	80054ea <_printf_i+0x182>
 8005384:	d822      	bhi.n	80053cc <_printf_i+0x64>
 8005386:	2963      	cmp	r1, #99	; 0x63
 8005388:	d036      	beq.n	80053f8 <_printf_i+0x90>
 800538a:	d80a      	bhi.n	80053a2 <_printf_i+0x3a>
 800538c:	2900      	cmp	r1, #0
 800538e:	f000 80b9 	beq.w	8005504 <_printf_i+0x19c>
 8005392:	2958      	cmp	r1, #88	; 0x58
 8005394:	f000 8083 	beq.w	800549e <_printf_i+0x136>
 8005398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800539c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80053a0:	e032      	b.n	8005408 <_printf_i+0xa0>
 80053a2:	2964      	cmp	r1, #100	; 0x64
 80053a4:	d001      	beq.n	80053aa <_printf_i+0x42>
 80053a6:	2969      	cmp	r1, #105	; 0x69
 80053a8:	d1f6      	bne.n	8005398 <_printf_i+0x30>
 80053aa:	6820      	ldr	r0, [r4, #0]
 80053ac:	6813      	ldr	r3, [r2, #0]
 80053ae:	0605      	lsls	r5, r0, #24
 80053b0:	f103 0104 	add.w	r1, r3, #4
 80053b4:	d52a      	bpl.n	800540c <_printf_i+0xa4>
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6011      	str	r1, [r2, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	da03      	bge.n	80053c6 <_printf_i+0x5e>
 80053be:	222d      	movs	r2, #45	; 0x2d
 80053c0:	425b      	negs	r3, r3
 80053c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053c6:	486f      	ldr	r0, [pc, #444]	; (8005584 <_printf_i+0x21c>)
 80053c8:	220a      	movs	r2, #10
 80053ca:	e039      	b.n	8005440 <_printf_i+0xd8>
 80053cc:	2973      	cmp	r1, #115	; 0x73
 80053ce:	f000 809d 	beq.w	800550c <_printf_i+0x1a4>
 80053d2:	d808      	bhi.n	80053e6 <_printf_i+0x7e>
 80053d4:	296f      	cmp	r1, #111	; 0x6f
 80053d6:	d020      	beq.n	800541a <_printf_i+0xb2>
 80053d8:	2970      	cmp	r1, #112	; 0x70
 80053da:	d1dd      	bne.n	8005398 <_printf_i+0x30>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f043 0320 	orr.w	r3, r3, #32
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	e003      	b.n	80053ee <_printf_i+0x86>
 80053e6:	2975      	cmp	r1, #117	; 0x75
 80053e8:	d017      	beq.n	800541a <_printf_i+0xb2>
 80053ea:	2978      	cmp	r1, #120	; 0x78
 80053ec:	d1d4      	bne.n	8005398 <_printf_i+0x30>
 80053ee:	2378      	movs	r3, #120	; 0x78
 80053f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053f4:	4864      	ldr	r0, [pc, #400]	; (8005588 <_printf_i+0x220>)
 80053f6:	e055      	b.n	80054a4 <_printf_i+0x13c>
 80053f8:	6813      	ldr	r3, [r2, #0]
 80053fa:	1d19      	adds	r1, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6011      	str	r1, [r2, #0]
 8005400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005408:	2301      	movs	r3, #1
 800540a:	e08c      	b.n	8005526 <_printf_i+0x1be>
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6011      	str	r1, [r2, #0]
 8005410:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005414:	bf18      	it	ne
 8005416:	b21b      	sxthne	r3, r3
 8005418:	e7cf      	b.n	80053ba <_printf_i+0x52>
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	1d18      	adds	r0, r3, #4
 8005420:	6010      	str	r0, [r2, #0]
 8005422:	0628      	lsls	r0, r5, #24
 8005424:	d501      	bpl.n	800542a <_printf_i+0xc2>
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	e002      	b.n	8005430 <_printf_i+0xc8>
 800542a:	0668      	lsls	r0, r5, #25
 800542c:	d5fb      	bpl.n	8005426 <_printf_i+0xbe>
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	4854      	ldr	r0, [pc, #336]	; (8005584 <_printf_i+0x21c>)
 8005432:	296f      	cmp	r1, #111	; 0x6f
 8005434:	bf14      	ite	ne
 8005436:	220a      	movne	r2, #10
 8005438:	2208      	moveq	r2, #8
 800543a:	2100      	movs	r1, #0
 800543c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005440:	6865      	ldr	r5, [r4, #4]
 8005442:	60a5      	str	r5, [r4, #8]
 8005444:	2d00      	cmp	r5, #0
 8005446:	f2c0 8095 	blt.w	8005574 <_printf_i+0x20c>
 800544a:	6821      	ldr	r1, [r4, #0]
 800544c:	f021 0104 	bic.w	r1, r1, #4
 8005450:	6021      	str	r1, [r4, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d13d      	bne.n	80054d2 <_printf_i+0x16a>
 8005456:	2d00      	cmp	r5, #0
 8005458:	f040 808e 	bne.w	8005578 <_printf_i+0x210>
 800545c:	4665      	mov	r5, ip
 800545e:	2a08      	cmp	r2, #8
 8005460:	d10b      	bne.n	800547a <_printf_i+0x112>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	07db      	lsls	r3, r3, #31
 8005466:	d508      	bpl.n	800547a <_printf_i+0x112>
 8005468:	6923      	ldr	r3, [r4, #16]
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	bfde      	ittt	le
 8005470:	2330      	movle	r3, #48	; 0x30
 8005472:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005476:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800547a:	ebac 0305 	sub.w	r3, ip, r5
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	f8cd 8000 	str.w	r8, [sp]
 8005484:	463b      	mov	r3, r7
 8005486:	aa03      	add	r2, sp, #12
 8005488:	4621      	mov	r1, r4
 800548a:	4630      	mov	r0, r6
 800548c:	f7ff fef6 	bl	800527c <_printf_common>
 8005490:	3001      	adds	r0, #1
 8005492:	d14d      	bne.n	8005530 <_printf_i+0x1c8>
 8005494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005498:	b005      	add	sp, #20
 800549a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800549e:	4839      	ldr	r0, [pc, #228]	; (8005584 <_printf_i+0x21c>)
 80054a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	6821      	ldr	r1, [r4, #0]
 80054a8:	1d1d      	adds	r5, r3, #4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6015      	str	r5, [r2, #0]
 80054ae:	060a      	lsls	r2, r1, #24
 80054b0:	d50b      	bpl.n	80054ca <_printf_i+0x162>
 80054b2:	07ca      	lsls	r2, r1, #31
 80054b4:	bf44      	itt	mi
 80054b6:	f041 0120 	orrmi.w	r1, r1, #32
 80054ba:	6021      	strmi	r1, [r4, #0]
 80054bc:	b91b      	cbnz	r3, 80054c6 <_printf_i+0x15e>
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	f022 0220 	bic.w	r2, r2, #32
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	2210      	movs	r2, #16
 80054c8:	e7b7      	b.n	800543a <_printf_i+0xd2>
 80054ca:	064d      	lsls	r5, r1, #25
 80054cc:	bf48      	it	mi
 80054ce:	b29b      	uxthmi	r3, r3
 80054d0:	e7ef      	b.n	80054b2 <_printf_i+0x14a>
 80054d2:	4665      	mov	r5, ip
 80054d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80054d8:	fb02 3311 	mls	r3, r2, r1, r3
 80054dc:	5cc3      	ldrb	r3, [r0, r3]
 80054de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054e2:	460b      	mov	r3, r1
 80054e4:	2900      	cmp	r1, #0
 80054e6:	d1f5      	bne.n	80054d4 <_printf_i+0x16c>
 80054e8:	e7b9      	b.n	800545e <_printf_i+0xf6>
 80054ea:	6813      	ldr	r3, [r2, #0]
 80054ec:	6825      	ldr	r5, [r4, #0]
 80054ee:	6961      	ldr	r1, [r4, #20]
 80054f0:	1d18      	adds	r0, r3, #4
 80054f2:	6010      	str	r0, [r2, #0]
 80054f4:	0628      	lsls	r0, r5, #24
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	d501      	bpl.n	80054fe <_printf_i+0x196>
 80054fa:	6019      	str	r1, [r3, #0]
 80054fc:	e002      	b.n	8005504 <_printf_i+0x19c>
 80054fe:	066a      	lsls	r2, r5, #25
 8005500:	d5fb      	bpl.n	80054fa <_printf_i+0x192>
 8005502:	8019      	strh	r1, [r3, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	6123      	str	r3, [r4, #16]
 8005508:	4665      	mov	r5, ip
 800550a:	e7b9      	b.n	8005480 <_printf_i+0x118>
 800550c:	6813      	ldr	r3, [r2, #0]
 800550e:	1d19      	adds	r1, r3, #4
 8005510:	6011      	str	r1, [r2, #0]
 8005512:	681d      	ldr	r5, [r3, #0]
 8005514:	6862      	ldr	r2, [r4, #4]
 8005516:	2100      	movs	r1, #0
 8005518:	4628      	mov	r0, r5
 800551a:	f7fa fe59 	bl	80001d0 <memchr>
 800551e:	b108      	cbz	r0, 8005524 <_printf_i+0x1bc>
 8005520:	1b40      	subs	r0, r0, r5
 8005522:	6060      	str	r0, [r4, #4]
 8005524:	6863      	ldr	r3, [r4, #4]
 8005526:	6123      	str	r3, [r4, #16]
 8005528:	2300      	movs	r3, #0
 800552a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552e:	e7a7      	b.n	8005480 <_printf_i+0x118>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	462a      	mov	r2, r5
 8005534:	4639      	mov	r1, r7
 8005536:	4630      	mov	r0, r6
 8005538:	47c0      	blx	r8
 800553a:	3001      	adds	r0, #1
 800553c:	d0aa      	beq.n	8005494 <_printf_i+0x12c>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	079b      	lsls	r3, r3, #30
 8005542:	d413      	bmi.n	800556c <_printf_i+0x204>
 8005544:	68e0      	ldr	r0, [r4, #12]
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	4298      	cmp	r0, r3
 800554a:	bfb8      	it	lt
 800554c:	4618      	movlt	r0, r3
 800554e:	e7a3      	b.n	8005498 <_printf_i+0x130>
 8005550:	2301      	movs	r3, #1
 8005552:	464a      	mov	r2, r9
 8005554:	4639      	mov	r1, r7
 8005556:	4630      	mov	r0, r6
 8005558:	47c0      	blx	r8
 800555a:	3001      	adds	r0, #1
 800555c:	d09a      	beq.n	8005494 <_printf_i+0x12c>
 800555e:	3501      	adds	r5, #1
 8005560:	68e3      	ldr	r3, [r4, #12]
 8005562:	9a03      	ldr	r2, [sp, #12]
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	42ab      	cmp	r3, r5
 8005568:	dcf2      	bgt.n	8005550 <_printf_i+0x1e8>
 800556a:	e7eb      	b.n	8005544 <_printf_i+0x1dc>
 800556c:	2500      	movs	r5, #0
 800556e:	f104 0919 	add.w	r9, r4, #25
 8005572:	e7f5      	b.n	8005560 <_printf_i+0x1f8>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ac      	bne.n	80054d2 <_printf_i+0x16a>
 8005578:	7803      	ldrb	r3, [r0, #0]
 800557a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800557e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005582:	e76c      	b.n	800545e <_printf_i+0xf6>
 8005584:	08005d41 	.word	0x08005d41
 8005588:	08005d52 	.word	0x08005d52

0800558c <_sbrk_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4c06      	ldr	r4, [pc, #24]	; (80055a8 <_sbrk_r+0x1c>)
 8005590:	2300      	movs	r3, #0
 8005592:	4605      	mov	r5, r0
 8005594:	4608      	mov	r0, r1
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	f7fb fce8 	bl	8000f6c <_sbrk>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_sbrk_r+0x1a>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_sbrk_r+0x1a>
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	2000176c 	.word	0x2000176c

080055ac <__sread>:
 80055ac:	b510      	push	{r4, lr}
 80055ae:	460c      	mov	r4, r1
 80055b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b4:	f000 fa96 	bl	8005ae4 <_read_r>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	bfab      	itete	ge
 80055bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055be:	89a3      	ldrhlt	r3, [r4, #12]
 80055c0:	181b      	addge	r3, r3, r0
 80055c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055c6:	bfac      	ite	ge
 80055c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80055ca:	81a3      	strhlt	r3, [r4, #12]
 80055cc:	bd10      	pop	{r4, pc}

080055ce <__swrite>:
 80055ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	461f      	mov	r7, r3
 80055d4:	898b      	ldrh	r3, [r1, #12]
 80055d6:	05db      	lsls	r3, r3, #23
 80055d8:	4605      	mov	r5, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	4616      	mov	r6, r2
 80055de:	d505      	bpl.n	80055ec <__swrite+0x1e>
 80055e0:	2302      	movs	r3, #2
 80055e2:	2200      	movs	r2, #0
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	f000 f9b6 	bl	8005958 <_lseek_r>
 80055ec:	89a3      	ldrh	r3, [r4, #12]
 80055ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f6:	81a3      	strh	r3, [r4, #12]
 80055f8:	4632      	mov	r2, r6
 80055fa:	463b      	mov	r3, r7
 80055fc:	4628      	mov	r0, r5
 80055fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005602:	f000 b869 	b.w	80056d8 <_write_r>

08005606 <__sseek>:
 8005606:	b510      	push	{r4, lr}
 8005608:	460c      	mov	r4, r1
 800560a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560e:	f000 f9a3 	bl	8005958 <_lseek_r>
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	bf15      	itete	ne
 8005618:	6560      	strne	r0, [r4, #84]	; 0x54
 800561a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800561e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005622:	81a3      	strheq	r3, [r4, #12]
 8005624:	bf18      	it	ne
 8005626:	81a3      	strhne	r3, [r4, #12]
 8005628:	bd10      	pop	{r4, pc}

0800562a <__sclose>:
 800562a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562e:	f000 b8d3 	b.w	80057d8 <_close_r>
	...

08005634 <__swbuf_r>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	460e      	mov	r6, r1
 8005638:	4614      	mov	r4, r2
 800563a:	4605      	mov	r5, r0
 800563c:	b118      	cbz	r0, 8005646 <__swbuf_r+0x12>
 800563e:	6983      	ldr	r3, [r0, #24]
 8005640:	b90b      	cbnz	r3, 8005646 <__swbuf_r+0x12>
 8005642:	f7ff fbf7 	bl	8004e34 <__sinit>
 8005646:	4b21      	ldr	r3, [pc, #132]	; (80056cc <__swbuf_r+0x98>)
 8005648:	429c      	cmp	r4, r3
 800564a:	d12a      	bne.n	80056a2 <__swbuf_r+0x6e>
 800564c:	686c      	ldr	r4, [r5, #4]
 800564e:	69a3      	ldr	r3, [r4, #24]
 8005650:	60a3      	str	r3, [r4, #8]
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	071a      	lsls	r2, r3, #28
 8005656:	d52e      	bpl.n	80056b6 <__swbuf_r+0x82>
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	b363      	cbz	r3, 80056b6 <__swbuf_r+0x82>
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	1ac0      	subs	r0, r0, r3
 8005662:	6963      	ldr	r3, [r4, #20]
 8005664:	b2f6      	uxtb	r6, r6
 8005666:	4283      	cmp	r3, r0
 8005668:	4637      	mov	r7, r6
 800566a:	dc04      	bgt.n	8005676 <__swbuf_r+0x42>
 800566c:	4621      	mov	r1, r4
 800566e:	4628      	mov	r0, r5
 8005670:	f000 f948 	bl	8005904 <_fflush_r>
 8005674:	bb28      	cbnz	r0, 80056c2 <__swbuf_r+0x8e>
 8005676:	68a3      	ldr	r3, [r4, #8]
 8005678:	3b01      	subs	r3, #1
 800567a:	60a3      	str	r3, [r4, #8]
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	6022      	str	r2, [r4, #0]
 8005682:	701e      	strb	r6, [r3, #0]
 8005684:	6963      	ldr	r3, [r4, #20]
 8005686:	3001      	adds	r0, #1
 8005688:	4283      	cmp	r3, r0
 800568a:	d004      	beq.n	8005696 <__swbuf_r+0x62>
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	07db      	lsls	r3, r3, #31
 8005690:	d519      	bpl.n	80056c6 <__swbuf_r+0x92>
 8005692:	2e0a      	cmp	r6, #10
 8005694:	d117      	bne.n	80056c6 <__swbuf_r+0x92>
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 f933 	bl	8005904 <_fflush_r>
 800569e:	b190      	cbz	r0, 80056c6 <__swbuf_r+0x92>
 80056a0:	e00f      	b.n	80056c2 <__swbuf_r+0x8e>
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <__swbuf_r+0x9c>)
 80056a4:	429c      	cmp	r4, r3
 80056a6:	d101      	bne.n	80056ac <__swbuf_r+0x78>
 80056a8:	68ac      	ldr	r4, [r5, #8]
 80056aa:	e7d0      	b.n	800564e <__swbuf_r+0x1a>
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <__swbuf_r+0xa0>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	bf08      	it	eq
 80056b2:	68ec      	ldreq	r4, [r5, #12]
 80056b4:	e7cb      	b.n	800564e <__swbuf_r+0x1a>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f81f 	bl	80056fc <__swsetup_r>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d0cc      	beq.n	800565c <__swbuf_r+0x28>
 80056c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80056c6:	4638      	mov	r0, r7
 80056c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ca:	bf00      	nop
 80056cc:	08005cf0 	.word	0x08005cf0
 80056d0:	08005d10 	.word	0x08005d10
 80056d4:	08005cd0 	.word	0x08005cd0

080056d8 <_write_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4c07      	ldr	r4, [pc, #28]	; (80056f8 <_write_r+0x20>)
 80056dc:	4605      	mov	r5, r0
 80056de:	4608      	mov	r0, r1
 80056e0:	4611      	mov	r1, r2
 80056e2:	2200      	movs	r2, #0
 80056e4:	6022      	str	r2, [r4, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f7fb fbef 	bl	8000eca <_write>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_write_r+0x1e>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_write_r+0x1e>
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	2000176c 	.word	0x2000176c

080056fc <__swsetup_r>:
 80056fc:	4b32      	ldr	r3, [pc, #200]	; (80057c8 <__swsetup_r+0xcc>)
 80056fe:	b570      	push	{r4, r5, r6, lr}
 8005700:	681d      	ldr	r5, [r3, #0]
 8005702:	4606      	mov	r6, r0
 8005704:	460c      	mov	r4, r1
 8005706:	b125      	cbz	r5, 8005712 <__swsetup_r+0x16>
 8005708:	69ab      	ldr	r3, [r5, #24]
 800570a:	b913      	cbnz	r3, 8005712 <__swsetup_r+0x16>
 800570c:	4628      	mov	r0, r5
 800570e:	f7ff fb91 	bl	8004e34 <__sinit>
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <__swsetup_r+0xd0>)
 8005714:	429c      	cmp	r4, r3
 8005716:	d10f      	bne.n	8005738 <__swsetup_r+0x3c>
 8005718:	686c      	ldr	r4, [r5, #4]
 800571a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800571e:	b29a      	uxth	r2, r3
 8005720:	0715      	lsls	r5, r2, #28
 8005722:	d42c      	bmi.n	800577e <__swsetup_r+0x82>
 8005724:	06d0      	lsls	r0, r2, #27
 8005726:	d411      	bmi.n	800574c <__swsetup_r+0x50>
 8005728:	2209      	movs	r2, #9
 800572a:	6032      	str	r2, [r6, #0]
 800572c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005730:	81a3      	strh	r3, [r4, #12]
 8005732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005736:	e03e      	b.n	80057b6 <__swsetup_r+0xba>
 8005738:	4b25      	ldr	r3, [pc, #148]	; (80057d0 <__swsetup_r+0xd4>)
 800573a:	429c      	cmp	r4, r3
 800573c:	d101      	bne.n	8005742 <__swsetup_r+0x46>
 800573e:	68ac      	ldr	r4, [r5, #8]
 8005740:	e7eb      	b.n	800571a <__swsetup_r+0x1e>
 8005742:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <__swsetup_r+0xd8>)
 8005744:	429c      	cmp	r4, r3
 8005746:	bf08      	it	eq
 8005748:	68ec      	ldreq	r4, [r5, #12]
 800574a:	e7e6      	b.n	800571a <__swsetup_r+0x1e>
 800574c:	0751      	lsls	r1, r2, #29
 800574e:	d512      	bpl.n	8005776 <__swsetup_r+0x7a>
 8005750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005752:	b141      	cbz	r1, 8005766 <__swsetup_r+0x6a>
 8005754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005758:	4299      	cmp	r1, r3
 800575a:	d002      	beq.n	8005762 <__swsetup_r+0x66>
 800575c:	4630      	mov	r0, r6
 800575e:	f000 f973 	bl	8005a48 <_free_r>
 8005762:	2300      	movs	r3, #0
 8005764:	6363      	str	r3, [r4, #52]	; 0x34
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800576c:	81a3      	strh	r3, [r4, #12]
 800576e:	2300      	movs	r3, #0
 8005770:	6063      	str	r3, [r4, #4]
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	f043 0308 	orr.w	r3, r3, #8
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	b94b      	cbnz	r3, 8005796 <__swsetup_r+0x9a>
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800578c:	d003      	beq.n	8005796 <__swsetup_r+0x9a>
 800578e:	4621      	mov	r1, r4
 8005790:	4630      	mov	r0, r6
 8005792:	f000 f917 	bl	80059c4 <__smakebuf_r>
 8005796:	89a2      	ldrh	r2, [r4, #12]
 8005798:	f012 0301 	ands.w	r3, r2, #1
 800579c:	d00c      	beq.n	80057b8 <__swsetup_r+0xbc>
 800579e:	2300      	movs	r3, #0
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	6963      	ldr	r3, [r4, #20]
 80057a4:	425b      	negs	r3, r3
 80057a6:	61a3      	str	r3, [r4, #24]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b953      	cbnz	r3, 80057c2 <__swsetup_r+0xc6>
 80057ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80057b4:	d1ba      	bne.n	800572c <__swsetup_r+0x30>
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	0792      	lsls	r2, r2, #30
 80057ba:	bf58      	it	pl
 80057bc:	6963      	ldrpl	r3, [r4, #20]
 80057be:	60a3      	str	r3, [r4, #8]
 80057c0:	e7f2      	b.n	80057a8 <__swsetup_r+0xac>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e7f7      	b.n	80057b6 <__swsetup_r+0xba>
 80057c6:	bf00      	nop
 80057c8:	20000018 	.word	0x20000018
 80057cc:	08005cf0 	.word	0x08005cf0
 80057d0:	08005d10 	.word	0x08005d10
 80057d4:	08005cd0 	.word	0x08005cd0

080057d8 <_close_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4c06      	ldr	r4, [pc, #24]	; (80057f4 <_close_r+0x1c>)
 80057dc:	2300      	movs	r3, #0
 80057de:	4605      	mov	r5, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	f7fb fb8d 	bl	8000f02 <_close>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_close_r+0x1a>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_close_r+0x1a>
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	2000176c 	.word	0x2000176c

080057f8 <__sflush_r>:
 80057f8:	898a      	ldrh	r2, [r1, #12]
 80057fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fe:	4605      	mov	r5, r0
 8005800:	0710      	lsls	r0, r2, #28
 8005802:	460c      	mov	r4, r1
 8005804:	d458      	bmi.n	80058b8 <__sflush_r+0xc0>
 8005806:	684b      	ldr	r3, [r1, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dc05      	bgt.n	8005818 <__sflush_r+0x20>
 800580c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	dc02      	bgt.n	8005818 <__sflush_r+0x20>
 8005812:	2000      	movs	r0, #0
 8005814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581a:	2e00      	cmp	r6, #0
 800581c:	d0f9      	beq.n	8005812 <__sflush_r+0x1a>
 800581e:	2300      	movs	r3, #0
 8005820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005824:	682f      	ldr	r7, [r5, #0]
 8005826:	6a21      	ldr	r1, [r4, #32]
 8005828:	602b      	str	r3, [r5, #0]
 800582a:	d032      	beq.n	8005892 <__sflush_r+0x9a>
 800582c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	075a      	lsls	r2, r3, #29
 8005832:	d505      	bpl.n	8005840 <__sflush_r+0x48>
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	1ac0      	subs	r0, r0, r3
 8005838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800583a:	b10b      	cbz	r3, 8005840 <__sflush_r+0x48>
 800583c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800583e:	1ac0      	subs	r0, r0, r3
 8005840:	2300      	movs	r3, #0
 8005842:	4602      	mov	r2, r0
 8005844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005846:	6a21      	ldr	r1, [r4, #32]
 8005848:	4628      	mov	r0, r5
 800584a:	47b0      	blx	r6
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	d106      	bne.n	8005860 <__sflush_r+0x68>
 8005852:	6829      	ldr	r1, [r5, #0]
 8005854:	291d      	cmp	r1, #29
 8005856:	d848      	bhi.n	80058ea <__sflush_r+0xf2>
 8005858:	4a29      	ldr	r2, [pc, #164]	; (8005900 <__sflush_r+0x108>)
 800585a:	40ca      	lsrs	r2, r1
 800585c:	07d6      	lsls	r6, r2, #31
 800585e:	d544      	bpl.n	80058ea <__sflush_r+0xf2>
 8005860:	2200      	movs	r2, #0
 8005862:	6062      	str	r2, [r4, #4]
 8005864:	04d9      	lsls	r1, r3, #19
 8005866:	6922      	ldr	r2, [r4, #16]
 8005868:	6022      	str	r2, [r4, #0]
 800586a:	d504      	bpl.n	8005876 <__sflush_r+0x7e>
 800586c:	1c42      	adds	r2, r0, #1
 800586e:	d101      	bne.n	8005874 <__sflush_r+0x7c>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b903      	cbnz	r3, 8005876 <__sflush_r+0x7e>
 8005874:	6560      	str	r0, [r4, #84]	; 0x54
 8005876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005878:	602f      	str	r7, [r5, #0]
 800587a:	2900      	cmp	r1, #0
 800587c:	d0c9      	beq.n	8005812 <__sflush_r+0x1a>
 800587e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005882:	4299      	cmp	r1, r3
 8005884:	d002      	beq.n	800588c <__sflush_r+0x94>
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f8de 	bl	8005a48 <_free_r>
 800588c:	2000      	movs	r0, #0
 800588e:	6360      	str	r0, [r4, #52]	; 0x34
 8005890:	e7c0      	b.n	8005814 <__sflush_r+0x1c>
 8005892:	2301      	movs	r3, #1
 8005894:	4628      	mov	r0, r5
 8005896:	47b0      	blx	r6
 8005898:	1c41      	adds	r1, r0, #1
 800589a:	d1c8      	bne.n	800582e <__sflush_r+0x36>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0c5      	beq.n	800582e <__sflush_r+0x36>
 80058a2:	2b1d      	cmp	r3, #29
 80058a4:	d001      	beq.n	80058aa <__sflush_r+0xb2>
 80058a6:	2b16      	cmp	r3, #22
 80058a8:	d101      	bne.n	80058ae <__sflush_r+0xb6>
 80058aa:	602f      	str	r7, [r5, #0]
 80058ac:	e7b1      	b.n	8005812 <__sflush_r+0x1a>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b4:	81a3      	strh	r3, [r4, #12]
 80058b6:	e7ad      	b.n	8005814 <__sflush_r+0x1c>
 80058b8:	690f      	ldr	r7, [r1, #16]
 80058ba:	2f00      	cmp	r7, #0
 80058bc:	d0a9      	beq.n	8005812 <__sflush_r+0x1a>
 80058be:	0793      	lsls	r3, r2, #30
 80058c0:	680e      	ldr	r6, [r1, #0]
 80058c2:	bf08      	it	eq
 80058c4:	694b      	ldreq	r3, [r1, #20]
 80058c6:	600f      	str	r7, [r1, #0]
 80058c8:	bf18      	it	ne
 80058ca:	2300      	movne	r3, #0
 80058cc:	eba6 0807 	sub.w	r8, r6, r7
 80058d0:	608b      	str	r3, [r1, #8]
 80058d2:	f1b8 0f00 	cmp.w	r8, #0
 80058d6:	dd9c      	ble.n	8005812 <__sflush_r+0x1a>
 80058d8:	4643      	mov	r3, r8
 80058da:	463a      	mov	r2, r7
 80058dc:	6a21      	ldr	r1, [r4, #32]
 80058de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b0      	blx	r6
 80058e4:	2800      	cmp	r0, #0
 80058e6:	dc06      	bgt.n	80058f6 <__sflush_r+0xfe>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f4:	e78e      	b.n	8005814 <__sflush_r+0x1c>
 80058f6:	4407      	add	r7, r0
 80058f8:	eba8 0800 	sub.w	r8, r8, r0
 80058fc:	e7e9      	b.n	80058d2 <__sflush_r+0xda>
 80058fe:	bf00      	nop
 8005900:	20400001 	.word	0x20400001

08005904 <_fflush_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	690b      	ldr	r3, [r1, #16]
 8005908:	4605      	mov	r5, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b1db      	cbz	r3, 8005946 <_fflush_r+0x42>
 800590e:	b118      	cbz	r0, 8005918 <_fflush_r+0x14>
 8005910:	6983      	ldr	r3, [r0, #24]
 8005912:	b90b      	cbnz	r3, 8005918 <_fflush_r+0x14>
 8005914:	f7ff fa8e 	bl	8004e34 <__sinit>
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <_fflush_r+0x48>)
 800591a:	429c      	cmp	r4, r3
 800591c:	d109      	bne.n	8005932 <_fflush_r+0x2e>
 800591e:	686c      	ldr	r4, [r5, #4]
 8005920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005924:	b17b      	cbz	r3, 8005946 <_fflush_r+0x42>
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800592e:	f7ff bf63 	b.w	80057f8 <__sflush_r>
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <_fflush_r+0x4c>)
 8005934:	429c      	cmp	r4, r3
 8005936:	d101      	bne.n	800593c <_fflush_r+0x38>
 8005938:	68ac      	ldr	r4, [r5, #8]
 800593a:	e7f1      	b.n	8005920 <_fflush_r+0x1c>
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <_fflush_r+0x50>)
 800593e:	429c      	cmp	r4, r3
 8005940:	bf08      	it	eq
 8005942:	68ec      	ldreq	r4, [r5, #12]
 8005944:	e7ec      	b.n	8005920 <_fflush_r+0x1c>
 8005946:	2000      	movs	r0, #0
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	08005cf0 	.word	0x08005cf0
 8005950:	08005d10 	.word	0x08005d10
 8005954:	08005cd0 	.word	0x08005cd0

08005958 <_lseek_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4c07      	ldr	r4, [pc, #28]	; (8005978 <_lseek_r+0x20>)
 800595c:	4605      	mov	r5, r0
 800595e:	4608      	mov	r0, r1
 8005960:	4611      	mov	r1, r2
 8005962:	2200      	movs	r2, #0
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fb faf2 	bl	8000f50 <_lseek>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_lseek_r+0x1e>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	b103      	cbz	r3, 8005976 <_lseek_r+0x1e>
 8005974:	602b      	str	r3, [r5, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	2000176c 	.word	0x2000176c

0800597c <__swhatbuf_r>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	460e      	mov	r6, r1
 8005980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005984:	2900      	cmp	r1, #0
 8005986:	b096      	sub	sp, #88	; 0x58
 8005988:	4614      	mov	r4, r2
 800598a:	461d      	mov	r5, r3
 800598c:	da07      	bge.n	800599e <__swhatbuf_r+0x22>
 800598e:	2300      	movs	r3, #0
 8005990:	602b      	str	r3, [r5, #0]
 8005992:	89b3      	ldrh	r3, [r6, #12]
 8005994:	061a      	lsls	r2, r3, #24
 8005996:	d410      	bmi.n	80059ba <__swhatbuf_r+0x3e>
 8005998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800599c:	e00e      	b.n	80059bc <__swhatbuf_r+0x40>
 800599e:	466a      	mov	r2, sp
 80059a0:	f000 f8b2 	bl	8005b08 <_fstat_r>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	dbf2      	blt.n	800598e <__swhatbuf_r+0x12>
 80059a8:	9a01      	ldr	r2, [sp, #4]
 80059aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059b2:	425a      	negs	r2, r3
 80059b4:	415a      	adcs	r2, r3
 80059b6:	602a      	str	r2, [r5, #0]
 80059b8:	e7ee      	b.n	8005998 <__swhatbuf_r+0x1c>
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	2000      	movs	r0, #0
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	b016      	add	sp, #88	; 0x58
 80059c2:	bd70      	pop	{r4, r5, r6, pc}

080059c4 <__smakebuf_r>:
 80059c4:	898b      	ldrh	r3, [r1, #12]
 80059c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059c8:	079d      	lsls	r5, r3, #30
 80059ca:	4606      	mov	r6, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	d507      	bpl.n	80059e0 <__smakebuf_r+0x1c>
 80059d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	6123      	str	r3, [r4, #16]
 80059d8:	2301      	movs	r3, #1
 80059da:	6163      	str	r3, [r4, #20]
 80059dc:	b002      	add	sp, #8
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	ab01      	add	r3, sp, #4
 80059e2:	466a      	mov	r2, sp
 80059e4:	f7ff ffca 	bl	800597c <__swhatbuf_r>
 80059e8:	9900      	ldr	r1, [sp, #0]
 80059ea:	4605      	mov	r5, r0
 80059ec:	4630      	mov	r0, r6
 80059ee:	f7ff faab 	bl	8004f48 <_malloc_r>
 80059f2:	b948      	cbnz	r0, 8005a08 <__smakebuf_r+0x44>
 80059f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059f8:	059a      	lsls	r2, r3, #22
 80059fa:	d4ef      	bmi.n	80059dc <__smakebuf_r+0x18>
 80059fc:	f023 0303 	bic.w	r3, r3, #3
 8005a00:	f043 0302 	orr.w	r3, r3, #2
 8005a04:	81a3      	strh	r3, [r4, #12]
 8005a06:	e7e3      	b.n	80059d0 <__smakebuf_r+0xc>
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <__smakebuf_r+0x7c>)
 8005a0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	6020      	str	r0, [r4, #0]
 8005a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	9b00      	ldr	r3, [sp, #0]
 8005a18:	6163      	str	r3, [r4, #20]
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	6120      	str	r0, [r4, #16]
 8005a1e:	b15b      	cbz	r3, 8005a38 <__smakebuf_r+0x74>
 8005a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 f881 	bl	8005b2c <_isatty_r>
 8005a2a:	b128      	cbz	r0, 8005a38 <__smakebuf_r+0x74>
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	f043 0301 	orr.w	r3, r3, #1
 8005a36:	81a3      	strh	r3, [r4, #12]
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	431d      	orrs	r5, r3
 8005a3c:	81a5      	strh	r5, [r4, #12]
 8005a3e:	e7cd      	b.n	80059dc <__smakebuf_r+0x18>
 8005a40:	08004dfd 	.word	0x08004dfd

08005a44 <__malloc_lock>:
 8005a44:	4770      	bx	lr

08005a46 <__malloc_unlock>:
 8005a46:	4770      	bx	lr

08005a48 <_free_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d045      	beq.n	8005adc <_free_r+0x94>
 8005a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a54:	1f0c      	subs	r4, r1, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfb8      	it	lt
 8005a5a:	18e4      	addlt	r4, r4, r3
 8005a5c:	f7ff fff2 	bl	8005a44 <__malloc_lock>
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <_free_r+0x98>)
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	4610      	mov	r0, r2
 8005a66:	b933      	cbnz	r3, 8005a76 <_free_r+0x2e>
 8005a68:	6063      	str	r3, [r4, #4]
 8005a6a:	6014      	str	r4, [r2, #0]
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a72:	f7ff bfe8 	b.w	8005a46 <__malloc_unlock>
 8005a76:	42a3      	cmp	r3, r4
 8005a78:	d90c      	bls.n	8005a94 <_free_r+0x4c>
 8005a7a:	6821      	ldr	r1, [r4, #0]
 8005a7c:	1862      	adds	r2, r4, r1
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	bf04      	itt	eq
 8005a82:	681a      	ldreq	r2, [r3, #0]
 8005a84:	685b      	ldreq	r3, [r3, #4]
 8005a86:	6063      	str	r3, [r4, #4]
 8005a88:	bf04      	itt	eq
 8005a8a:	1852      	addeq	r2, r2, r1
 8005a8c:	6022      	streq	r2, [r4, #0]
 8005a8e:	6004      	str	r4, [r0, #0]
 8005a90:	e7ec      	b.n	8005a6c <_free_r+0x24>
 8005a92:	4613      	mov	r3, r2
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	b10a      	cbz	r2, 8005a9c <_free_r+0x54>
 8005a98:	42a2      	cmp	r2, r4
 8005a9a:	d9fa      	bls.n	8005a92 <_free_r+0x4a>
 8005a9c:	6819      	ldr	r1, [r3, #0]
 8005a9e:	1858      	adds	r0, r3, r1
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d10b      	bne.n	8005abc <_free_r+0x74>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	4401      	add	r1, r0
 8005aa8:	1858      	adds	r0, r3, r1
 8005aaa:	4282      	cmp	r2, r0
 8005aac:	6019      	str	r1, [r3, #0]
 8005aae:	d1dd      	bne.n	8005a6c <_free_r+0x24>
 8005ab0:	6810      	ldr	r0, [r2, #0]
 8005ab2:	6852      	ldr	r2, [r2, #4]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	4401      	add	r1, r0
 8005ab8:	6019      	str	r1, [r3, #0]
 8005aba:	e7d7      	b.n	8005a6c <_free_r+0x24>
 8005abc:	d902      	bls.n	8005ac4 <_free_r+0x7c>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	e7d3      	b.n	8005a6c <_free_r+0x24>
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	1821      	adds	r1, r4, r0
 8005ac8:	428a      	cmp	r2, r1
 8005aca:	bf04      	itt	eq
 8005acc:	6811      	ldreq	r1, [r2, #0]
 8005ace:	6852      	ldreq	r2, [r2, #4]
 8005ad0:	6062      	str	r2, [r4, #4]
 8005ad2:	bf04      	itt	eq
 8005ad4:	1809      	addeq	r1, r1, r0
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	605c      	str	r4, [r3, #4]
 8005ada:	e7c7      	b.n	8005a6c <_free_r+0x24>
 8005adc:	bd38      	pop	{r3, r4, r5, pc}
 8005ade:	bf00      	nop
 8005ae0:	20001684 	.word	0x20001684

08005ae4 <_read_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4c07      	ldr	r4, [pc, #28]	; (8005b04 <_read_r+0x20>)
 8005ae8:	4605      	mov	r5, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	6022      	str	r2, [r4, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fb f9cc 	bl	8000e90 <_read>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_read_r+0x1e>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_read_r+0x1e>
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	2000176c 	.word	0x2000176c

08005b08 <_fstat_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4c07      	ldr	r4, [pc, #28]	; (8005b28 <_fstat_r+0x20>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4605      	mov	r5, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	f7fb fa00 	bl	8000f1a <_fstat>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	d102      	bne.n	8005b24 <_fstat_r+0x1c>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	b103      	cbz	r3, 8005b24 <_fstat_r+0x1c>
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	bf00      	nop
 8005b28:	2000176c 	.word	0x2000176c

08005b2c <_isatty_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4c06      	ldr	r4, [pc, #24]	; (8005b48 <_isatty_r+0x1c>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	4605      	mov	r5, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	6023      	str	r3, [r4, #0]
 8005b38:	f7fb f9ff 	bl	8000f3a <_isatty>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_isatty_r+0x1a>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_isatty_r+0x1a>
 8005b44:	602b      	str	r3, [r5, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	2000176c 	.word	0x2000176c

08005b4c <_init>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr

08005b58 <_fini>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr
